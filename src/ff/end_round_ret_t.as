/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ff {

import org.apache.thrift.Set;
import flash.utils.ByteArray;
import flash.utils.Dictionary;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


  public class end_round_ret_t implements TBase   {
    private static const STRUCT_DESC:TStruct = new TStruct("end_round_ret_t");
    private static const INC_STAR_FIELD_DESC:TField = new TField("inc_star", TType.I32, 1);
    private static const INC_EXP_FIELD_DESC:TField = new TField("inc_exp", TType.I32, 2);
    private static const CUR_LEVEL_FIELD_DESC:TField = new TField("cur_level", TType.I32, 3);
    private static const INC_ITEMS_FIELD_DESC:TField = new TField("inc_items", TType.MAP, 4);

    private var _inc_star:int;
    public static const INC_STAR:int = 1;
    private var _inc_exp:int;
    public static const INC_EXP:int = 2;
    private var _cur_level:int;
    public static const CUR_LEVEL:int = 3;
    private var _inc_items:Dictionary;
    public static const INC_ITEMS:int = 4;

    private var __isset_inc_star:Boolean = false;
    private var __isset_inc_exp:Boolean = false;
    private var __isset_cur_level:Boolean = false;

    public static const metaDataMap:Dictionary = new Dictionary();
    {
      metaDataMap[INC_STAR] = new FieldMetaData("inc_star", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32));
      metaDataMap[INC_EXP] = new FieldMetaData("inc_exp", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32));
      metaDataMap[CUR_LEVEL] = new FieldMetaData("cur_level", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32));
      metaDataMap[INC_ITEMS] = new FieldMetaData("inc_items", TFieldRequirementType.DEFAULT, 
          new MapMetaData(TType.MAP, 
              new FieldValueMetaData(TType.I32), 
              new FieldValueMetaData(TType.I32)));
    }
    {
      FieldMetaData.addStructMetaDataMap(end_round_ret_t, metaDataMap);
    }

    public function end_round_ret_t() {
      this._inc_star = 0;
      this._inc_exp = 0;
      this._cur_level = 0;
    }

    public function get inc_star():int {
      return this._inc_star;
    }

    public function set inc_star(inc_star:int):void {
      this._inc_star = inc_star;
      this.__isset_inc_star = true;
    }

    public function unsetInc_star():void {
      this.__isset_inc_star = false;
    }

    // Returns true if field inc_star is set (has been assigned a value) and false otherwise
    public function isSetInc_star():Boolean {
      return this.__isset_inc_star;
    }

    public function get inc_exp():int {
      return this._inc_exp;
    }

    public function set inc_exp(inc_exp:int):void {
      this._inc_exp = inc_exp;
      this.__isset_inc_exp = true;
    }

    public function unsetInc_exp():void {
      this.__isset_inc_exp = false;
    }

    // Returns true if field inc_exp is set (has been assigned a value) and false otherwise
    public function isSetInc_exp():Boolean {
      return this.__isset_inc_exp;
    }

    public function get cur_level():int {
      return this._cur_level;
    }

    public function set cur_level(cur_level:int):void {
      this._cur_level = cur_level;
      this.__isset_cur_level = true;
    }

    public function unsetCur_level():void {
      this.__isset_cur_level = false;
    }

    // Returns true if field cur_level is set (has been assigned a value) and false otherwise
    public function isSetCur_level():Boolean {
      return this.__isset_cur_level;
    }

    public function get inc_items():Dictionary {
      return this._inc_items;
    }

    public function set inc_items(inc_items:Dictionary):void {
      this._inc_items = inc_items;
    }

    public function unsetInc_items():void {
      this.inc_items = null;
    }

    // Returns true if field inc_items is set (has been assigned a value) and false otherwise
    public function isSetInc_items():Boolean {
      return this.inc_items != null;
    }

    public function setFieldValue(fieldID:int, value:*):void {
      switch (fieldID) {
      case INC_STAR:
        if (value == null) {
          unsetInc_star();
        } else {
          this.inc_star = value;
        }
        break;

      case INC_EXP:
        if (value == null) {
          unsetInc_exp();
        } else {
          this.inc_exp = value;
        }
        break;

      case CUR_LEVEL:
        if (value == null) {
          unsetCur_level();
        } else {
          this.cur_level = value;
        }
        break;

      case INC_ITEMS:
        if (value == null) {
          unsetInc_items();
        } else {
          this.inc_items = value;
        }
        break;

      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function getFieldValue(fieldID:int):* {
      switch (fieldID) {
      case INC_STAR:
        return this.inc_star;
      case INC_EXP:
        return this.inc_exp;
      case CUR_LEVEL:
        return this.cur_level;
      case INC_ITEMS:
        return this.inc_items;
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
    public function isSet(fieldID:int):Boolean {
      switch (fieldID) {
      case INC_STAR:
        return isSetInc_star();
      case INC_EXP:
        return isSetInc_exp();
      case CUR_LEVEL:
        return isSetCur_level();
      case INC_ITEMS:
        return isSetInc_items();
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function read(iprot:TProtocol):void {
      var field:TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case INC_STAR:
            if (field.type == TType.I32) {
              this.inc_star = iprot.readI32();
              this.__isset_inc_star = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case INC_EXP:
            if (field.type == TType.I32) {
              this.inc_exp = iprot.readI32();
              this.__isset_inc_exp = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case CUR_LEVEL:
            if (field.type == TType.I32) {
              this.cur_level = iprot.readI32();
              this.__isset_cur_level = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case INC_ITEMS:
            if (field.type == TType.MAP) {
              {
                var _map151:TMap = iprot.readMapBegin();
                this.inc_items = new Dictionary();
                for (var _i152:int = 0; _i152 < _map151.size; ++_i152)
                {
                  var _key153:int;
                  var _val154:int;
                  _key153 = iprot.readI32();
                  _val154 = iprot.readI32();
                  this.inc_items[_key153] = _val154;
                }
                iprot.readMapEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public function write(oprot:TProtocol):void {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(INC_STAR_FIELD_DESC);
      oprot.writeI32(this.inc_star);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INC_EXP_FIELD_DESC);
      oprot.writeI32(this.inc_exp);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CUR_LEVEL_FIELD_DESC);
      oprot.writeI32(this.cur_level);
      oprot.writeFieldEnd();
      if (this.inc_items != null) {
        oprot.writeFieldBegin(INC_ITEMS_FIELD_DESC);
        {
          var _sizeCounter156:int = 0;
          for (var _key155:* in this.inc_items) {
            _sizeCounter156++;
          }
          oprot.writeMapBegin(new TMap(TType.I32, TType.I32, _sizeCounter156));
          for (var elem157:* in this.inc_items)          {
            oprot.writeI32(elem157);
            oprot.writeI32(this.inc_items[elem157]);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public function toString():String {
      var ret:String = new String("end_round_ret_t(");
      var first:Boolean = true;

      ret += "inc_star:";
      ret += this.inc_star;
      first = false;
      if (!first) ret +=  ", ";
      ret += "inc_exp:";
      ret += this.inc_exp;
      first = false;
      if (!first) ret +=  ", ";
      ret += "cur_level:";
      ret += this.cur_level;
      first = false;
      if (!first) ret +=  ", ";
      ret += "inc_items:";
      if (this.inc_items == null) {
        ret += "null";
      } else {
        ret += this.inc_items;
      }
      first = false;
      ret += ")";
      return ret;
    }

    public function validate():void {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

}
