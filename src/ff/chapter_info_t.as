/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ff {

import org.apache.thrift.Set;
import flash.utils.ByteArray;
import flash.utils.Dictionary;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


  public class chapter_info_t implements TBase   {
    private static const STRUCT_DESC:TStruct = new TStruct("chapter_info_t");
    private static const IS_OPEN_FIELD_DESC:TField = new TField("is_open", TType.BOOL, 1);
    private static const AREA_INFO_FIELD_DESC:TField = new TField("area_info", TType.MAP, 2);

    private var _is_open:Boolean;
    public static const IS_OPEN:int = 1;
    private var _area_info:Dictionary;
    public static const AREA_INFO:int = 2;

    private var __isset_is_open:Boolean = false;

    public static const metaDataMap:Dictionary = new Dictionary();
    {
      metaDataMap[IS_OPEN] = new FieldMetaData("is_open", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.BOOL));
      metaDataMap[AREA_INFO] = new FieldMetaData("area_info", TFieldRequirementType.DEFAULT, 
          new MapMetaData(TType.MAP, 
              new FieldValueMetaData(TType.I32), 
              new FieldValueMetaData(TType.I32)));
    }
    {
      FieldMetaData.addStructMetaDataMap(chapter_info_t, metaDataMap);
    }

    public function chapter_info_t() {
    }

    public function get is_open():Boolean {
      return this._is_open;
    }

    public function set is_open(is_open:Boolean):void {
      this._is_open = is_open;
      this.__isset_is_open = true;
    }

    public function unsetIs_open():void {
      this.__isset_is_open = false;
    }

    // Returns true if field is_open is set (has been assigned a value) and false otherwise
    public function isSetIs_open():Boolean {
      return this.__isset_is_open;
    }

    public function get area_info():Dictionary {
      return this._area_info;
    }

    public function set area_info(area_info:Dictionary):void {
      this._area_info = area_info;
    }

    public function unsetArea_info():void {
      this.area_info = null;
    }

    // Returns true if field area_info is set (has been assigned a value) and false otherwise
    public function isSetArea_info():Boolean {
      return this.area_info != null;
    }

    public function setFieldValue(fieldID:int, value:*):void {
      switch (fieldID) {
      case IS_OPEN:
        if (value == null) {
          unsetIs_open();
        } else {
          this.is_open = value;
        }
        break;

      case AREA_INFO:
        if (value == null) {
          unsetArea_info();
        } else {
          this.area_info = value;
        }
        break;

      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function getFieldValue(fieldID:int):* {
      switch (fieldID) {
      case IS_OPEN:
        return this.is_open;
      case AREA_INFO:
        return this.area_info;
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
    public function isSet(fieldID:int):Boolean {
      switch (fieldID) {
      case IS_OPEN:
        return isSetIs_open();
      case AREA_INFO:
        return isSetArea_info();
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function read(iprot:TProtocol):void {
      var field:TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case IS_OPEN:
            if (field.type == TType.BOOL) {
              this.is_open = iprot.readBool();
              this.__isset_is_open = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case AREA_INFO:
            if (field.type == TType.MAP) {
              {
                var _map78:TMap = iprot.readMapBegin();
                this.area_info = new Dictionary();
                for (var _i79:int = 0; _i79 < _map78.size; ++_i79)
                {
                  var _key80:int;
                  var _val81:int;
                  _key80 = iprot.readI32();
                  _val81 = iprot.readI32();
                  this.area_info[_key80] = _val81;
                }
                iprot.readMapEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public function write(oprot:TProtocol):void {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(IS_OPEN_FIELD_DESC);
      oprot.writeBool(this.is_open);
      oprot.writeFieldEnd();
      if (this.area_info != null) {
        oprot.writeFieldBegin(AREA_INFO_FIELD_DESC);
        {
          var _sizeCounter83:int = 0;
          for (var _key82:* in this.area_info) {
            _sizeCounter83++;
          }
          oprot.writeMapBegin(new TMap(TType.I32, TType.I32, _sizeCounter83));
          for (var elem84:* in this.area_info)          {
            oprot.writeI32(elem84);
            oprot.writeI32(this.area_info[elem84]);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public function toString():String {
      var ret:String = new String("chapter_info_t(");
      var first:Boolean = true;

      ret += "is_open:";
      ret += this.is_open;
      first = false;
      if (!first) ret +=  ", ";
      ret += "area_info:";
      if (this.area_info == null) {
        ret += "null";
      } else {
        ret += this.area_info;
      }
      first = false;
      ret += ")";
      return ret;
    }

    public function validate():void {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

}
