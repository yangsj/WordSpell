/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ff {

import org.apache.thrift.Set;
import flash.utils.ByteArray;
import flash.utils.Dictionary;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


  public class update_property_ret_t implements TBase   {
    private static const STRUCT_DESC:TStruct = new TStruct("update_property_ret_t");
    private static const EXP_FIELD_DESC:TField = new TField("exp", TType.I32, 1);
    private static const LEVEL_FIELD_DESC:TField = new TField("level", TType.I32, 2);
    private static const COIN_FIELD_DESC:TField = new TField("coin", TType.I32, 3);
    private static const ITEMS_FIELD_DESC:TField = new TField("items", TType.MAP, 4);

    private var _exp:int;
    public static const EXP:int = 1;
    private var _level:int;
    public static const LEVEL:int = 2;
    private var _coin:int;
    public static const COIN:int = 3;
    private var _items:Dictionary;
    public static const ITEMS:int = 4;

    private var __isset_exp:Boolean = false;
    private var __isset_level:Boolean = false;
    private var __isset_coin:Boolean = false;

    public static const metaDataMap:Dictionary = new Dictionary();
    {
      metaDataMap[EXP] = new FieldMetaData("exp", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32));
      metaDataMap[LEVEL] = new FieldMetaData("level", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32));
      metaDataMap[COIN] = new FieldMetaData("coin", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32));
      metaDataMap[ITEMS] = new FieldMetaData("items", TFieldRequirementType.DEFAULT, 
          new MapMetaData(TType.MAP, 
              new FieldValueMetaData(TType.I32), 
              new FieldValueMetaData(TType.I32)));
    }
    {
      FieldMetaData.addStructMetaDataMap(update_property_ret_t, metaDataMap);
    }

    public function update_property_ret_t() {
      this._exp = 0;
      this._level = 0;
      this._coin = 0;
    }

    public function get exp():int {
      return this._exp;
    }

    public function set exp(exp:int):void {
      this._exp = exp;
      this.__isset_exp = true;
    }

    public function unsetExp():void {
      this.__isset_exp = false;
    }

    // Returns true if field exp is set (has been assigned a value) and false otherwise
    public function isSetExp():Boolean {
      return this.__isset_exp;
    }

    public function get level():int {
      return this._level;
    }

    public function set level(level:int):void {
      this._level = level;
      this.__isset_level = true;
    }

    public function unsetLevel():void {
      this.__isset_level = false;
    }

    // Returns true if field level is set (has been assigned a value) and false otherwise
    public function isSetLevel():Boolean {
      return this.__isset_level;
    }

    public function get coin():int {
      return this._coin;
    }

    public function set coin(coin:int):void {
      this._coin = coin;
      this.__isset_coin = true;
    }

    public function unsetCoin():void {
      this.__isset_coin = false;
    }

    // Returns true if field coin is set (has been assigned a value) and false otherwise
    public function isSetCoin():Boolean {
      return this.__isset_coin;
    }

    public function get items():Dictionary {
      return this._items;
    }

    public function set items(items:Dictionary):void {
      this._items = items;
    }

    public function unsetItems():void {
      this.items = null;
    }

    // Returns true if field items is set (has been assigned a value) and false otherwise
    public function isSetItems():Boolean {
      return this.items != null;
    }

    public function setFieldValue(fieldID:int, value:*):void {
      switch (fieldID) {
      case EXP:
        if (value == null) {
          unsetExp();
        } else {
          this.exp = value;
        }
        break;

      case LEVEL:
        if (value == null) {
          unsetLevel();
        } else {
          this.level = value;
        }
        break;

      case COIN:
        if (value == null) {
          unsetCoin();
        } else {
          this.coin = value;
        }
        break;

      case ITEMS:
        if (value == null) {
          unsetItems();
        } else {
          this.items = value;
        }
        break;

      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function getFieldValue(fieldID:int):* {
      switch (fieldID) {
      case EXP:
        return this.exp;
      case LEVEL:
        return this.level;
      case COIN:
        return this.coin;
      case ITEMS:
        return this.items;
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
    public function isSet(fieldID:int):Boolean {
      switch (fieldID) {
      case EXP:
        return isSetExp();
      case LEVEL:
        return isSetLevel();
      case COIN:
        return isSetCoin();
      case ITEMS:
        return isSetItems();
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function read(iprot:TProtocol):void {
      var field:TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case EXP:
            if (field.type == TType.I32) {
              this.exp = iprot.readI32();
              this.__isset_exp = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case LEVEL:
            if (field.type == TType.I32) {
              this.level = iprot.readI32();
              this.__isset_level = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case COIN:
            if (field.type == TType.I32) {
              this.coin = iprot.readI32();
              this.__isset_coin = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case ITEMS:
            if (field.type == TType.MAP) {
              {
                var _map215:TMap = iprot.readMapBegin();
                this.items = new Dictionary();
                for (var _i216:int = 0; _i216 < _map215.size; ++_i216)
                {
                  var _key217:int;
                  var _val218:int;
                  _key217 = iprot.readI32();
                  _val218 = iprot.readI32();
                  this.items[_key217] = _val218;
                }
                iprot.readMapEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public function write(oprot:TProtocol):void {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(EXP_FIELD_DESC);
      oprot.writeI32(this.exp);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LEVEL_FIELD_DESC);
      oprot.writeI32(this.level);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COIN_FIELD_DESC);
      oprot.writeI32(this.coin);
      oprot.writeFieldEnd();
      if (this.items != null) {
        oprot.writeFieldBegin(ITEMS_FIELD_DESC);
        {
          var _sizeCounter220:int = 0;
          for (var _key219:* in this.items) {
            _sizeCounter220++;
          }
          oprot.writeMapBegin(new TMap(TType.I32, TType.I32, _sizeCounter220));
          for (var elem221:* in this.items)          {
            oprot.writeI32(elem221);
            oprot.writeI32(this.items[elem221]);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public function toString():String {
      var ret:String = new String("update_property_ret_t(");
      var first:Boolean = true;

      ret += "exp:";
      ret += this.exp;
      first = false;
      if (!first) ret +=  ", ";
      ret += "level:";
      ret += this.level;
      first = false;
      if (!first) ret +=  ", ";
      ret += "coin:";
      ret += this.coin;
      first = false;
      if (!first) ret +=  ", ";
      ret += "items:";
      if (this.items == null) {
        ret += "null";
      } else {
        ret += this.items;
      }
      first = false;
      ret += ")";
      return ret;
    }

    public function validate():void {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

}
