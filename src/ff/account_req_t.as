/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ff {

import org.apache.thrift.Set;
import flash.utils.ByteArray;
import flash.utils.Dictionary;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


  public class account_req_t implements TBase   {
    private static const STRUCT_DESC:TStruct = new TStruct("account_req_t");
    private static const NICK_NAME_FIELD_DESC:TField = new TField("nick_name", TType.STRING, 1);
    private static const PASSWORD_FIELD_DESC:TField = new TField("password", TType.STRING, 2);
    private static const REGISTER_FLAG_FIELD_DESC:TField = new TField("register_flag", TType.BOOL, 3);
    private static const EMAIL_FIELD_DESC:TField = new TField("email", TType.STRING, 4);

    private var _nick_name:String;
    public static const NICK_NAME:int = 1;
    private var _password:String;
    public static const PASSWORD:int = 2;
    private var _register_flag:Boolean;
    public static const REGISTER_FLAG:int = 3;
    private var _email:String;
    public static const EMAIL:int = 4;

    private var __isset_register_flag:Boolean = false;

    public static const metaDataMap:Dictionary = new Dictionary();
    {
      metaDataMap[NICK_NAME] = new FieldMetaData("nick_name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING));
      metaDataMap[PASSWORD] = new FieldMetaData("password", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING));
      metaDataMap[REGISTER_FLAG] = new FieldMetaData("register_flag", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.BOOL));
      metaDataMap[EMAIL] = new FieldMetaData("email", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING));
    }
    {
      FieldMetaData.addStructMetaDataMap(account_req_t, metaDataMap);
    }

    public function account_req_t() {
      this._register_flag = 0;
    }

    public function get nick_name():String {
      return this._nick_name;
    }

    public function set nick_name(nick_name:String):void {
      this._nick_name = nick_name;
    }

    public function unsetNick_name():void {
      this.nick_name = null;
    }

    // Returns true if field nick_name is set (has been assigned a value) and false otherwise
    public function isSetNick_name():Boolean {
      return this.nick_name != null;
    }

    public function get password():String {
      return this._password;
    }

    public function set password(password:String):void {
      this._password = password;
    }

    public function unsetPassword():void {
      this.password = null;
    }

    // Returns true if field password is set (has been assigned a value) and false otherwise
    public function isSetPassword():Boolean {
      return this.password != null;
    }

    public function get register_flag():Boolean {
      return this._register_flag;
    }

    public function set register_flag(register_flag:Boolean):void {
      this._register_flag = register_flag;
      this.__isset_register_flag = true;
    }

    public function unsetRegister_flag():void {
      this.__isset_register_flag = false;
    }

    // Returns true if field register_flag is set (has been assigned a value) and false otherwise
    public function isSetRegister_flag():Boolean {
      return this.__isset_register_flag;
    }

    public function get email():String {
      return this._email;
    }

    public function set email(email:String):void {
      this._email = email;
    }

    public function unsetEmail():void {
      this.email = null;
    }

    // Returns true if field email is set (has been assigned a value) and false otherwise
    public function isSetEmail():Boolean {
      return this.email != null;
    }

    public function setFieldValue(fieldID:int, value:*):void {
      switch (fieldID) {
      case NICK_NAME:
        if (value == null) {
          unsetNick_name();
        } else {
          this.nick_name = value;
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          this.password = value;
        }
        break;

      case REGISTER_FLAG:
        if (value == null) {
          unsetRegister_flag();
        } else {
          this.register_flag = value;
        }
        break;

      case EMAIL:
        if (value == null) {
          unsetEmail();
        } else {
          this.email = value;
        }
        break;

      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function getFieldValue(fieldID:int):* {
      switch (fieldID) {
      case NICK_NAME:
        return this.nick_name;
      case PASSWORD:
        return this.password;
      case REGISTER_FLAG:
        return this.register_flag;
      case EMAIL:
        return this.email;
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
    public function isSet(fieldID:int):Boolean {
      switch (fieldID) {
      case NICK_NAME:
        return isSetNick_name();
      case PASSWORD:
        return isSetPassword();
      case REGISTER_FLAG:
        return isSetRegister_flag();
      case EMAIL:
        return isSetEmail();
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function read(iprot:TProtocol):void {
      var field:TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case NICK_NAME:
            if (field.type == TType.STRING) {
              this.nick_name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case PASSWORD:
            if (field.type == TType.STRING) {
              this.password = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case REGISTER_FLAG:
            if (field.type == TType.BOOL) {
              this.register_flag = iprot.readBool();
              this.__isset_register_flag = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case EMAIL:
            if (field.type == TType.STRING) {
              this.email = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public function write(oprot:TProtocol):void {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.nick_name != null) {
        oprot.writeFieldBegin(NICK_NAME_FIELD_DESC);
        oprot.writeString(this.nick_name);
        oprot.writeFieldEnd();
      }
      if (this.password != null) {
        oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
        oprot.writeString(this.password);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REGISTER_FLAG_FIELD_DESC);
      oprot.writeBool(this.register_flag);
      oprot.writeFieldEnd();
      if (this.email != null) {
        oprot.writeFieldBegin(EMAIL_FIELD_DESC);
        oprot.writeString(this.email);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public function toString():String {
      var ret:String = new String("account_req_t(");
      var first:Boolean = true;

      ret += "nick_name:";
      if (this.nick_name == null) {
        ret += "null";
      } else {
        ret += this.nick_name;
      }
      first = false;
      if (!first) ret +=  ", ";
      ret += "password:";
      if (this.password == null) {
        ret += "null";
      } else {
        ret += this.password;
      }
      first = false;
      if (!first) ret +=  ", ";
      ret += "register_flag:";
      ret += this.register_flag;
      first = false;
      if (!first) ret +=  ", ";
      ret += "email:";
      if (this.email == null) {
        ret += "null";
      } else {
        ret += this.email;
      }
      first = false;
      ret += ")";
      return ret;
    }

    public function validate():void {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

}
