/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ff {

import org.apache.thrift.Set;
import flash.utils.ByteArray;
import flash.utils.Dictionary;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


  public class chat_msg_req_t implements TBase   {
    private static const STRUCT_DESC:TStruct = new TStruct("chat_msg_req_t");
    private static const MODE_FIELD_DESC:TField = new TField("mode", TType.I32, 1);
    private static const DEST_ID_FIELD_DESC:TField = new TField("dest_id", TType.I32, 2);
    private static const VALUE_FIELD_DESC:TField = new TField("value", TType.STRING, 3);

    private var _mode:int;
    public static const MODE:int = 1;
    private var _dest_id:int;
    public static const DEST_ID:int = 2;
    private var _value:String;
    public static const VALUE:int = 3;

    private var __isset_mode:Boolean = false;
    private var __isset_dest_id:Boolean = false;

    public static const metaDataMap:Dictionary = new Dictionary();
    {
      metaDataMap[MODE] = new FieldMetaData("mode", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32));
      metaDataMap[DEST_ID] = new FieldMetaData("dest_id", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32));
      metaDataMap[VALUE] = new FieldMetaData("value", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING));
    }
    {
      FieldMetaData.addStructMetaDataMap(chat_msg_req_t, metaDataMap);
    }

    public function chat_msg_req_t() {
      this._mode = 0;
      this._dest_id = 0;
    }

    public function get mode():int {
      return this._mode;
    }

    public function set mode(mode:int):void {
      this._mode = mode;
      this.__isset_mode = true;
    }

    public function unsetMode():void {
      this.__isset_mode = false;
    }

    // Returns true if field mode is set (has been assigned a value) and false otherwise
    public function isSetMode():Boolean {
      return this.__isset_mode;
    }

    public function get dest_id():int {
      return this._dest_id;
    }

    public function set dest_id(dest_id:int):void {
      this._dest_id = dest_id;
      this.__isset_dest_id = true;
    }

    public function unsetDest_id():void {
      this.__isset_dest_id = false;
    }

    // Returns true if field dest_id is set (has been assigned a value) and false otherwise
    public function isSetDest_id():Boolean {
      return this.__isset_dest_id;
    }

    public function get value():String {
      return this._value;
    }

    public function set value(value:String):void {
      this._value = value;
    }

    public function unsetValue():void {
      this.value = null;
    }

    // Returns true if field value is set (has been assigned a value) and false otherwise
    public function isSetValue():Boolean {
      return this.value != null;
    }

    public function setFieldValue(fieldID:int, value:*):void {
      switch (fieldID) {
      case MODE:
        if (value == null) {
          unsetMode();
        } else {
          this.mode = value;
        }
        break;

      case DEST_ID:
        if (value == null) {
          unsetDest_id();
        } else {
          this.dest_id = value;
        }
        break;

      case VALUE:
        if (value == null) {
          unsetValue();
        } else {
          this.value = value;
        }
        break;

      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function getFieldValue(fieldID:int):* {
      switch (fieldID) {
      case MODE:
        return this.mode;
      case DEST_ID:
        return this.dest_id;
      case VALUE:
        return this.value;
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
    public function isSet(fieldID:int):Boolean {
      switch (fieldID) {
      case MODE:
        return isSetMode();
      case DEST_ID:
        return isSetDest_id();
      case VALUE:
        return isSetValue();
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function read(iprot:TProtocol):void {
      var field:TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case MODE:
            if (field.type == TType.I32) {
              this.mode = iprot.readI32();
              this.__isset_mode = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case DEST_ID:
            if (field.type == TType.I32) {
              this.dest_id = iprot.readI32();
              this.__isset_dest_id = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case VALUE:
            if (field.type == TType.STRING) {
              this.value = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public function write(oprot:TProtocol):void {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MODE_FIELD_DESC);
      oprot.writeI32(this.mode);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEST_ID_FIELD_DESC);
      oprot.writeI32(this.dest_id);
      oprot.writeFieldEnd();
      if (this.value != null) {
        oprot.writeFieldBegin(VALUE_FIELD_DESC);
        oprot.writeString(this.value);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public function toString():String {
      var ret:String = new String("chat_msg_req_t(");
      var first:Boolean = true;

      ret += "mode:";
      ret += this.mode;
      first = false;
      if (!first) ret +=  ", ";
      ret += "dest_id:";
      ret += this.dest_id;
      first = false;
      if (!first) ret +=  ", ";
      ret += "value:";
      if (this.value == null) {
        ret += "null";
      } else {
        ret += this.value;
      }
      first = false;
      ret += ")";
      return ret;
    }

    public function validate():void {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

}
