/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ff {

import org.apache.thrift.Set;
import flash.utils.ByteArray;
import flash.utils.Dictionary;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


  public class start_round_req_t implements TBase   {
    private static const STRUCT_DESC:TStruct = new TStruct("start_round_req_t");
    private static const LEVEL_FIELD_DESC:TField = new TField("level", TType.I32, 1);
    private static const MODE_FIELD_DESC:TField = new TField("mode", TType.I16, 2);
    private static const DEST_UID_FIELD_DESC:TField = new TField("dest_uid", TType.I32, 3);

    private var _level:int;
    public static const LEVEL:int = 1;
    private var _mode:int;
    public static const MODE:int = 2;
    private var _dest_uid:int;
    public static const DEST_UID:int = 3;

    private var __isset_level:Boolean = false;
    private var __isset_mode:Boolean = false;
    private var __isset_dest_uid:Boolean = false;

    public static const metaDataMap:Dictionary = new Dictionary();
    {
      metaDataMap[LEVEL] = new FieldMetaData("level", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32));
      metaDataMap[MODE] = new FieldMetaData("mode", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I16));
      metaDataMap[DEST_UID] = new FieldMetaData("dest_uid", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32));
    }
    {
      FieldMetaData.addStructMetaDataMap(start_round_req_t, metaDataMap);
    }

    public function start_round_req_t() {
      this._level = 0;
      this._mode = 0;
      this._dest_uid = 0;
    }

    public function get level():int {
      return this._level;
    }

    public function set level(level:int):void {
      this._level = level;
      this.__isset_level = true;
    }

    public function unsetLevel():void {
      this.__isset_level = false;
    }

    // Returns true if field level is set (has been assigned a value) and false otherwise
    public function isSetLevel():Boolean {
      return this.__isset_level;
    }

    public function get mode():int {
      return this._mode;
    }

    public function set mode(mode:int):void {
      this._mode = mode;
      this.__isset_mode = true;
    }

    public function unsetMode():void {
      this.__isset_mode = false;
    }

    // Returns true if field mode is set (has been assigned a value) and false otherwise
    public function isSetMode():Boolean {
      return this.__isset_mode;
    }

    public function get dest_uid():int {
      return this._dest_uid;
    }

    public function set dest_uid(dest_uid:int):void {
      this._dest_uid = dest_uid;
      this.__isset_dest_uid = true;
    }

    public function unsetDest_uid():void {
      this.__isset_dest_uid = false;
    }

    // Returns true if field dest_uid is set (has been assigned a value) and false otherwise
    public function isSetDest_uid():Boolean {
      return this.__isset_dest_uid;
    }

    public function setFieldValue(fieldID:int, value:*):void {
      switch (fieldID) {
      case LEVEL:
        if (value == null) {
          unsetLevel();
        } else {
          this.level = value;
        }
        break;

      case MODE:
        if (value == null) {
          unsetMode();
        } else {
          this.mode = value;
        }
        break;

      case DEST_UID:
        if (value == null) {
          unsetDest_uid();
        } else {
          this.dest_uid = value;
        }
        break;

      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function getFieldValue(fieldID:int):* {
      switch (fieldID) {
      case LEVEL:
        return this.level;
      case MODE:
        return this.mode;
      case DEST_UID:
        return this.dest_uid;
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
    public function isSet(fieldID:int):Boolean {
      switch (fieldID) {
      case LEVEL:
        return isSetLevel();
      case MODE:
        return isSetMode();
      case DEST_UID:
        return isSetDest_uid();
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function read(iprot:TProtocol):void {
      var field:TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case LEVEL:
            if (field.type == TType.I32) {
              this.level = iprot.readI32();
              this.__isset_level = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case MODE:
            if (field.type == TType.I16) {
              this.mode = iprot.readI16();
              this.__isset_mode = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case DEST_UID:
            if (field.type == TType.I32) {
              this.dest_uid = iprot.readI32();
              this.__isset_dest_uid = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public function write(oprot:TProtocol):void {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(LEVEL_FIELD_DESC);
      oprot.writeI32(this.level);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MODE_FIELD_DESC);
      oprot.writeI16(this.mode);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEST_UID_FIELD_DESC);
      oprot.writeI32(this.dest_uid);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public function toString():String {
      var ret:String = new String("start_round_req_t(");
      var first:Boolean = true;

      ret += "level:";
      ret += this.level;
      first = false;
      if (!first) ret +=  ", ";
      ret += "mode:";
      ret += this.mode;
      first = false;
      if (!first) ret +=  ", ";
      ret += "dest_uid:";
      ret += this.dest_uid;
      first = false;
      ret += ")";
      return ret;
    }

    public function validate():void {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

}
