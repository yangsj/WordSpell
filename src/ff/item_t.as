/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ff {

import org.apache.thrift.Set;
import flash.utils.ByteArray;
import flash.utils.Dictionary;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


  public class item_t implements TBase   {
    private static const STRUCT_DESC:TStruct = new TStruct("item_t");
    private static const ITEM_ID_FIELD_DESC:TField = new TField("item_id", TType.I32, 1);
    private static const ITEM_TYPE_FIELD_DESC:TField = new TField("item_type", TType.I32, 2);

    private var _item_id:int;
    public static const ITEM_ID:int = 1;
    private var _item_type:int;
    public static const ITEM_TYPE:int = 2;

    private var __isset_item_id:Boolean = false;
    private var __isset_item_type:Boolean = false;

    public static const metaDataMap:Dictionary = new Dictionary();
    {
      metaDataMap[ITEM_ID] = new FieldMetaData("item_id", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32));
      metaDataMap[ITEM_TYPE] = new FieldMetaData("item_type", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32));
    }
    {
      FieldMetaData.addStructMetaDataMap(item_t, metaDataMap);
    }

    public function item_t() {
    }

    public function get item_id():int {
      return this._item_id;
    }

    public function set item_id(item_id:int):void {
      this._item_id = item_id;
      this.__isset_item_id = true;
    }

    public function unsetItem_id():void {
      this.__isset_item_id = false;
    }

    // Returns true if field item_id is set (has been assigned a value) and false otherwise
    public function isSetItem_id():Boolean {
      return this.__isset_item_id;
    }

    public function get item_type():int {
      return this._item_type;
    }

    public function set item_type(item_type:int):void {
      this._item_type = item_type;
      this.__isset_item_type = true;
    }

    public function unsetItem_type():void {
      this.__isset_item_type = false;
    }

    // Returns true if field item_type is set (has been assigned a value) and false otherwise
    public function isSetItem_type():Boolean {
      return this.__isset_item_type;
    }

    public function setFieldValue(fieldID:int, value:*):void {
      switch (fieldID) {
      case ITEM_ID:
        if (value == null) {
          unsetItem_id();
        } else {
          this.item_id = value;
        }
        break;

      case ITEM_TYPE:
        if (value == null) {
          unsetItem_type();
        } else {
          this.item_type = value;
        }
        break;

      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function getFieldValue(fieldID:int):* {
      switch (fieldID) {
      case ITEM_ID:
        return this.item_id;
      case ITEM_TYPE:
        return this.item_type;
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
    public function isSet(fieldID:int):Boolean {
      switch (fieldID) {
      case ITEM_ID:
        return isSetItem_id();
      case ITEM_TYPE:
        return isSetItem_type();
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function read(iprot:TProtocol):void {
      var field:TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case ITEM_ID:
            if (field.type == TType.I32) {
              this.item_id = iprot.readI32();
              this.__isset_item_id = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case ITEM_TYPE:
            if (field.type == TType.I32) {
              this.item_type = iprot.readI32();
              this.__isset_item_type = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public function write(oprot:TProtocol):void {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ITEM_ID_FIELD_DESC);
      oprot.writeI32(this.item_id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ITEM_TYPE_FIELD_DESC);
      oprot.writeI32(this.item_type);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public function toString():String {
      var ret:String = new String("item_t(");
      var first:Boolean = true;

      ret += "item_id:";
      ret += this.item_id;
      first = false;
      if (!first) ret +=  ", ";
      ret += "item_type:";
      ret += this.item_type;
      first = false;
      ret += ")";
      return ret;
    }

    public function validate():void {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

}
