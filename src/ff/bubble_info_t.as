/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ff {

import org.apache.thrift.Set;
import flash.utils.ByteArray;
import flash.utils.Dictionary;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


  public class bubble_info_t implements TBase   {
    private static const STRUCT_DESC:TStruct = new TStruct("bubble_info_t");
    private static const WORD_FIELD_DESC:TField = new TField("word", TType.STRING, 2);

    private var _word:String;
    public static const WORD:int = 2;


    public static const metaDataMap:Dictionary = new Dictionary();
    {
      metaDataMap[WORD] = new FieldMetaData("word", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING));
    }
    {
      FieldMetaData.addStructMetaDataMap(bubble_info_t, metaDataMap);
    }

    public function bubble_info_t() {
    }

    public function get word():String {
      return this._word;
    }

    public function set word(word:String):void {
      this._word = word;
    }

    public function unsetWord():void {
      this.word = null;
    }

    // Returns true if field word is set (has been assigned a value) and false otherwise
    public function isSetWord():Boolean {
      return this.word != null;
    }

    public function setFieldValue(fieldID:int, value:*):void {
      switch (fieldID) {
      case WORD:
        if (value == null) {
          unsetWord();
        } else {
          this.word = value;
        }
        break;

      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function getFieldValue(fieldID:int):* {
      switch (fieldID) {
      case WORD:
        return this.word;
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
    public function isSet(fieldID:int):Boolean {
      switch (fieldID) {
      case WORD:
        return isSetWord();
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function read(iprot:TProtocol):void {
      var field:TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case WORD:
            if (field.type == TType.STRING) {
              this.word = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public function write(oprot:TProtocol):void {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.word != null) {
        oprot.writeFieldBegin(WORD_FIELD_DESC);
        oprot.writeString(this.word);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public function toString():String {
      var ret:String = new String("bubble_info_t(");
      var first:Boolean = true;

      ret += "word:";
      if (this.word == null) {
        ret += "null";
      } else {
        ret += this.word;
      }
      first = false;
      ret += ")";
      return ret;
    }

    public function validate():void {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

}
