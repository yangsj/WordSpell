<asdoc>

<interfaceRec name='ICommandTrigger' fullname='robotlegs.bender.extensions.commandCenter.api:ICommandTrigger' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/commandCenter/api/ICommandTrigger.as' namespace='robotlegs.bender.extensions.commandCenter.api' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 ]]></description>
<private><![CDATA[]]></private>
</interfaceRec>
<method name='activate' fullname='robotlegs.bender.extensions.commandCenter.api:ICommandTrigger/robotlegs.bender.extensions.commandCenter.api:ICommandTrigger:activate' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 Invoked when the trigger should be activated.
		 		 <p>Use this to add event listeners or Signal handlers.</p>
		 ]]></description>
</method>
<method name='deactivate' fullname='robotlegs.bender.extensions.commandCenter.api:ICommandTrigger/robotlegs.bender.extensions.commandCenter.api:ICommandTrigger:deactivate' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 Invoked when the trigger should be deactivated.
		 		 <p>Use this to remove event listeners or Signal handlers.</p>
		 ]]></description>
</method>
<interfaceRec name='ICommand' fullname='robotlegs.bender.extensions.commandCenter.api:ICommand' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/commandCenter/api/ICommand.as' namespace='robotlegs.bender.extensions.commandCenter.api' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Optional Command interface.
	 	 <p>Note, you do not need to implement this interface,
	 any class with an execute method can be used.</p>
	 ]]></description>
</interfaceRec>
<method name='execute' fullname='robotlegs.bender.extensions.commandCenter.api:ICommand/robotlegs.bender.extensions.commandCenter.api:ICommand:execute' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 The execute method
		 ]]></description>
</method>
<classRec name='CommandPayload' fullname='robotlegs.bender.extensions.commandCenter.api:CommandPayload' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/commandCenter/api/CommandPayload.as' namespace='robotlegs.bender.extensions.commandCenter.api' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 ]]></description>
<private><![CDATA[]]></private>
</classRec>
<method name='CommandPayload' fullname='robotlegs.bender.extensions.commandCenter.api:CommandPayload/CommandPayload' isStatic='false' isFinal='false' isOverride='false'  param_names='values;classes' param_types='Array;Array' param_defaults='null;null' result_type='*'>
<description><![CDATA[
		 Creates a command payload
		 ]]></description>
<param><![CDATA[values Optional values
		 ]]></param>
<param><![CDATA[classes Optional classes
		 ]]></param>
</method>
<method name='addPayload' fullname='robotlegs.bender.extensions.commandCenter.api:CommandPayload/addPayload' isStatic='false' isFinal='false' isOverride='false'  param_names='payloadValue;payloadClass' param_types='Object;Class' param_defaults='undefined;undefined' result_type='robotlegs.bender.extensions.commandCenter.api:CommandPayload'>
<description><![CDATA[
		 Adds an item to this payload
		 ]]></description>
<param><![CDATA[payloadValue The value
		 ]]></param>
<param><![CDATA[payloadClass The class of the value
		 ]]></param>
<return><![CDATA[Self
		 ]]></return>
</method>
<method name='hasPayload' fullname='robotlegs.bender.extensions.commandCenter.api:CommandPayload/hasPayload' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 Does this payload have any items?
		 ]]></description>
<return><![CDATA[Boolean
		 ]]></return>
</method>
<method name='classes' fullname='robotlegs.bender.extensions.commandCenter.api:CommandPayload/classes/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
		 Ordered list of value classes
		 ]]></description>
</method>
<method name='length' fullname='robotlegs.bender.extensions.commandCenter.api:CommandPayload/length/get' isStatic='false' isFinal='false' isOverride='false'  result_type='uint'>
<description><![CDATA[
		 The number of payload items
		 ]]></description>
</method>
<method name='values' fullname='robotlegs.bender.extensions.commandCenter.api:CommandPayload/values/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
		 Ordered list of values
		 ]]></description>
</method>
<field name='_classes' fullname='robotlegs.bender.extensions.commandCenter.api:CommandPayload/private:_classes' type='Array' isStatic='false' isConst='false' >
</field>
<field name='_values' fullname='robotlegs.bender.extensions.commandCenter.api:CommandPayload/private:_values' type='Array' isStatic='false' isConst='false' >
</field>
<interfaceRec name='ICommandMapping' fullname='robotlegs.bender.extensions.commandCenter.api:ICommandMapping' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/commandCenter/api/ICommandMapping.as' namespace='robotlegs.bender.extensions.commandCenter.api' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 ]]></description>
<private><![CDATA[]]></private>
</interfaceRec>
<method name='addGuards' fullname='robotlegs.bender.extensions.commandCenter.api:ICommandMapping/robotlegs.bender.extensions.commandCenter.api:ICommandMapping:addGuards' isStatic='false' isFinal='false' isOverride='false'  param_names='guards' param_types='restParam' param_defaults='undefined' result_type='robotlegs.bender.extensions.commandCenter.api:ICommandMapping'>
<description><![CDATA[
		 A list of Guards to query before execution
		 ]]></description>
</method>
<method name='addHooks' fullname='robotlegs.bender.extensions.commandCenter.api:ICommandMapping/robotlegs.bender.extensions.commandCenter.api:ICommandMapping:addHooks' isStatic='false' isFinal='false' isOverride='false'  param_names='hooks' param_types='restParam' param_defaults='undefined' result_type='robotlegs.bender.extensions.commandCenter.api:ICommandMapping'>
<description><![CDATA[
		 A list of Hooks to run during execution
		 ]]></description>
</method>
<method name='setExecuteMethod' fullname='robotlegs.bender.extensions.commandCenter.api:ICommandMapping/robotlegs.bender.extensions.commandCenter.api:ICommandMapping:setExecuteMethod' isStatic='false' isFinal='false' isOverride='false'  param_names='name' param_types='String' param_defaults='undefined' result_type='robotlegs.bender.extensions.commandCenter.api:ICommandMapping'>
<description><![CDATA[
		 The "execute" method to invoke on the Command instance
		 ]]></description>
</method>
<method name='setFireOnce' fullname='robotlegs.bender.extensions.commandCenter.api:ICommandMapping/robotlegs.bender.extensions.commandCenter.api:ICommandMapping:setFireOnce' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='Boolean' param_defaults='undefined' result_type='robotlegs.bender.extensions.commandCenter.api:ICommandMapping'>
<description><![CDATA[
		 Unmaps a Command after a successful execution
		 ]]></description>
</method>
<method name='setPayloadInjectionEnabled' fullname='robotlegs.bender.extensions.commandCenter.api:ICommandMapping/robotlegs.bender.extensions.commandCenter.api:ICommandMapping:setPayloadInjectionEnabled' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='Boolean' param_defaults='undefined' result_type='robotlegs.bender.extensions.commandCenter.api:ICommandMapping'>
<description><![CDATA[
		 Supply the payload values via instance injection
		 ]]></description>
</method>
<method name='commandClass' fullname='robotlegs.bender.extensions.commandCenter.api:ICommandMapping/robotlegs.bender.extensions.commandCenter.api:ICommandMapping:commandClass/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Class'>
<description><![CDATA[
		 The concrete Command Class for this mapping
		 ]]></description>
</method>
<method name='executeMethod' fullname='robotlegs.bender.extensions.commandCenter.api:ICommandMapping/robotlegs.bender.extensions.commandCenter.api:ICommandMapping:executeMethod/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
		 The "execute" method to invoke on the Command instance
		 ]]></description>
</method>
<method name='fireOnce' fullname='robotlegs.bender.extensions.commandCenter.api:ICommandMapping/robotlegs.bender.extensions.commandCenter.api:ICommandMapping:fireOnce/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 Unmaps a Command after a successful execution
		 ]]></description>
</method>
<method name='guards' fullname='robotlegs.bender.extensions.commandCenter.api:ICommandMapping/robotlegs.bender.extensions.commandCenter.api:ICommandMapping:guards/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
		 A list of Guards to query before execution
		 ]]></description>
</method>
<method name='hooks' fullname='robotlegs.bender.extensions.commandCenter.api:ICommandMapping/robotlegs.bender.extensions.commandCenter.api:ICommandMapping:hooks/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
		 A list of Hooks to run during execution
		 ]]></description>
</method>
<method name='payloadInjectionEnabled' fullname='robotlegs.bender.extensions.commandCenter.api:ICommandMapping/robotlegs.bender.extensions.commandCenter.api:ICommandMapping:payloadInjectionEnabled/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 Supply the payload values via instance injection
		 ]]></description>
</method>
<interfaceRec name='ICommandMappingList' fullname='robotlegs.bender.extensions.commandCenter.api:ICommandMappingList' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/commandCenter/api/ICommandMappingList.as' namespace='robotlegs.bender.extensions.commandCenter.api' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 ]]></description>
<private><![CDATA[]]></private>
</interfaceRec>
<method name='addMapping' fullname='robotlegs.bender.extensions.commandCenter.api:ICommandMappingList/robotlegs.bender.extensions.commandCenter.api:ICommandMappingList:addMapping' isStatic='false' isFinal='false' isOverride='false'  param_names='mapping' param_types='robotlegs.bender.extensions.commandCenter.api:ICommandMapping' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Adds a mapping to the mapping list
		 ]]></description>
<param><![CDATA[mapping Command mapping
		 ]]></param>
</method>
<method name='getList' fullname='robotlegs.bender.extensions.commandCenter.api:ICommandMappingList/robotlegs.bender.extensions.commandCenter.api:ICommandMappingList:getList' isStatic='false' isFinal='false' isOverride='false'  result_type='Vector$robotlegs.bender.extensions.commandCenter.api:ICommandMapping'>
<description><![CDATA[
		 Sorted list of active mappings
		 ]]></description>
<return><![CDATA[List of mappings
		 ]]></return>
</method>
<method name='removeAllMappings' fullname='robotlegs.bender.extensions.commandCenter.api:ICommandMappingList/robotlegs.bender.extensions.commandCenter.api:ICommandMappingList:removeAllMappings' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 Removes all mappings for this command mapping list
		 ]]></description>
</method>
<method name='removeMappingFor' fullname='robotlegs.bender.extensions.commandCenter.api:ICommandMappingList/robotlegs.bender.extensions.commandCenter.api:ICommandMappingList:removeMappingFor' isStatic='false' isFinal='false' isOverride='false'  param_names='commandClass' param_types='Class' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Removes a mapping from the mapping list using the Command class
		 ]]></description>
<param><![CDATA[commandClass The command class to remove the mapping for
		 ]]></param>
</method>
<method name='removeMapping' fullname='robotlegs.bender.extensions.commandCenter.api:ICommandMappingList/robotlegs.bender.extensions.commandCenter.api:ICommandMappingList:removeMapping' isStatic='false' isFinal='false' isOverride='false'  param_names='mapping' param_types='robotlegs.bender.extensions.commandCenter.api:ICommandMapping' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Removes a mapping from the mapping list
		 ]]></description>
<param><![CDATA[mapping Command mapping
		 ]]></param>
</method>
<method name='withSortFunction' fullname='robotlegs.bender.extensions.commandCenter.api:ICommandMappingList/robotlegs.bender.extensions.commandCenter.api:ICommandMappingList:withSortFunction' isStatic='false' isFinal='false' isOverride='false'  param_names='sorter' param_types='Function' param_defaults='undefined' result_type='robotlegs.bender.extensions.commandCenter.api:ICommandMappingList'>
<description><![CDATA[
		 Optional mapping sort function
		 ]]></description>
<param><![CDATA[sorter Sort function
		 ]]></param>
<return><![CDATA[Self
		 ]]></return>
</method>
<interfaceRec name='ICommandExecutor' fullname='robotlegs.bender.extensions.commandCenter.api:ICommandExecutor' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/commandCenter/api/ICommandExecutor.as' namespace='robotlegs.bender.extensions.commandCenter.api' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 ]]></description>
<private><![CDATA[]]></private>
</interfaceRec>
<method name='executeCommand' fullname='robotlegs.bender.extensions.commandCenter.api:ICommandExecutor/robotlegs.bender.extensions.commandCenter.api:ICommandExecutor:executeCommand' isStatic='false' isFinal='false' isOverride='false'  param_names='mapping;payload' param_types='robotlegs.bender.extensions.commandCenter.api:ICommandMapping;robotlegs.bender.extensions.commandCenter.api:CommandPayload' param_defaults='undefined;null' result_type='void'>
<description><![CDATA[
		 Execute a command for a given mapping
		 ]]></description>
<param><![CDATA[mapping The Command Mapping
		 ]]></param>
<param><![CDATA[payload The Command Payload
		 ]]></param>
</method>
<method name='executeCommands' fullname='robotlegs.bender.extensions.commandCenter.api:ICommandExecutor/robotlegs.bender.extensions.commandCenter.api:ICommandExecutor:executeCommands' isStatic='false' isFinal='false' isOverride='false'  param_names='mappings;payload' param_types='Vector$robotlegs.bender.extensions.commandCenter.api:ICommandMapping;robotlegs.bender.extensions.commandCenter.api:CommandPayload' param_defaults='undefined;null' result_type='void'>
<description><![CDATA[
		 Execute a list of commands for a given list of mappings
		 ]]></description>
<param><![CDATA[mappings The Command Mappings
		 ]]></param>
<param><![CDATA[payload The Command Payload
		 ]]></param>
</method>
<interfaceRec name='IMediator' fullname='robotlegs.bender.extensions.mediatorMap.api:IMediator' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/mediatorMap/api/IMediator.as' namespace='robotlegs.bender.extensions.mediatorMap.api' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Optional Mediator interface
	 ]]></description>
</interfaceRec>
<method name='destroy' fullname='robotlegs.bender.extensions.mediatorMap.api:IMediator/robotlegs.bender.extensions.mediatorMap.api:IMediator:destroy' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 Destroys the mediator. This is run automatically by the mediatorMap when a mediator is destroyed.
		 You should clean up any handlers that were added directly (eventMap handlers will be cleaned up automatically).
		 ]]></description>
</method>
<method name='initialize' fullname='robotlegs.bender.extensions.mediatorMap.api:IMediator/robotlegs.bender.extensions.mediatorMap.api:IMediator:initialize' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 Initializes the mediator. This is run automatically by the mediatorMap when a mediator is created.
		 Normally the initialize function is where you would add handlers using the eventMap.
		 ]]></description>
</method>
<interfaceRec name='IMediatorMap' fullname='robotlegs.bender.extensions.mediatorMap.api:IMediatorMap' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/mediatorMap/api/IMediatorMap.as' namespace='robotlegs.bender.extensions.mediatorMap.api' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The Mediator Map allows you to bind Mediators to objects
	 ]]></description>
</interfaceRec>
<method name='mapMatcher' fullname='robotlegs.bender.extensions.mediatorMap.api:IMediatorMap/robotlegs.bender.extensions.mediatorMap.api:IMediatorMap:mapMatcher' isStatic='false' isFinal='false' isOverride='false'  param_names='matcher' param_types='robotlegs.bender.extensions.matching:ITypeMatcher' param_defaults='undefined' result_type='robotlegs.bender.extensions.mediatorMap.dsl:IMediatorMapper'>
<description><![CDATA[
		 Maps a matcher that will be tested against incoming items to be handled.
		 ]]></description>
<param><![CDATA[matcher The type or package matcher specifying the rules for matching.
		 ]]></param>
<return><![CDATA[the mapper so that you can continue the mapping.
		 ]]></return>
</method>
<method name='map' fullname='robotlegs.bender.extensions.mediatorMap.api:IMediatorMap/robotlegs.bender.extensions.mediatorMap.api:IMediatorMap:map' isStatic='false' isFinal='false' isOverride='false'  param_names='type' param_types='Class' param_defaults='undefined' result_type='robotlegs.bender.extensions.mediatorMap.dsl:IMediatorMapper'>
<description><![CDATA[
		 Maps a type that will be tested against incoming items to be handled.
		 Under the hood this will create a TypeMatcher for this type.
		 ]]></description>
<param><![CDATA[type The class or interface to be matched against.
		 ]]></param>
<return><![CDATA[the mapper so that you can continue the mapping.
		 ]]></return>
</method>
<method name='mediate' fullname='robotlegs.bender.extensions.mediatorMap.api:IMediatorMap/robotlegs.bender.extensions.mediatorMap.api:IMediatorMap:mediate' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Mediates an item directly. If the item matches any mapped matchers or types then it will be mediated according to those mappings.
		 ]]></description>
<param><![CDATA[item The item to create mediators for.
		 ]]></param>
</method>
<method name='unmapMatcher' fullname='robotlegs.bender.extensions.mediatorMap.api:IMediatorMap/robotlegs.bender.extensions.mediatorMap.api:IMediatorMap:unmapMatcher' isStatic='false' isFinal='false' isOverride='false'  param_names='matcher' param_types='robotlegs.bender.extensions.matching:ITypeMatcher' param_defaults='undefined' result_type='robotlegs.bender.extensions.mediatorMap.dsl:IMediatorUnmapper'>
<description><![CDATA[
		 Removes a mapping that was made against a matcher.
		 No error will be thrown if there isn't a mapping to remove.
		 ]]></description>
<param><![CDATA[matcher The type or package matcher specifying the rules for matching.
		 ]]></param>
<return><![CDATA[the unmapper so that you can continue the unmapping.
		 ]]></return>
</method>
<method name='unmap' fullname='robotlegs.bender.extensions.mediatorMap.api:IMediatorMap/robotlegs.bender.extensions.mediatorMap.api:IMediatorMap:unmap' isStatic='false' isFinal='false' isOverride='false'  param_names='type' param_types='Class' param_defaults='undefined' result_type='robotlegs.bender.extensions.mediatorMap.dsl:IMediatorUnmapper'>
<description><![CDATA[
		 Removes a mapping that was made against a type.
		 No error will be thrown if there isn't a mapping to remove.
		 ]]></description>
<param><![CDATA[type The class or interface to be matched against.
		 ]]></param>
<return><![CDATA[the unmapper so that you can continue the unmapping.
		 ]]></return>
</method>
<method name='unmediateAll' fullname='robotlegs.bender.extensions.mediatorMap.api:IMediatorMap/robotlegs.bender.extensions.mediatorMap.api:IMediatorMap:unmediateAll' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 Removes all mediators
		 ]]></description>
</method>
<method name='unmediate' fullname='robotlegs.bender.extensions.mediatorMap.api:IMediatorMap/robotlegs.bender.extensions.mediatorMap.api:IMediatorMap:unmediate' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Removes the mediators for an item if there are any.
		 ]]></description>
<param><![CDATA[item The item to remove mediators for.
		 ]]></param>
</method>
<interfaceRec name='IMediatorMapping' fullname='robotlegs.bender.extensions.mediatorMap.api:IMediatorMapping' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/mediatorMap/api/IMediatorMapping.as' namespace='robotlegs.bender.extensions.mediatorMap.api' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Represents a Mediator mapping
	 ]]></description>
</interfaceRec>
<method name='autoRemoveEnabled' fullname='robotlegs.bender.extensions.mediatorMap.api:IMediatorMapping/robotlegs.bender.extensions.mediatorMap.api:IMediatorMapping:autoRemoveEnabled/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 Should the mediator be removed when the mediated item looses scope?
		 ]]></description>
</method>
<method name='guards' fullname='robotlegs.bender.extensions.mediatorMap.api:IMediatorMapping/robotlegs.bender.extensions.mediatorMap.api:IMediatorMapping:guards/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
		 A list of guards to check before allowing mediator creation
		 ]]></description>
</method>
<method name='hooks' fullname='robotlegs.bender.extensions.mediatorMap.api:IMediatorMapping/robotlegs.bender.extensions.mediatorMap.api:IMediatorMapping:hooks/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
		 A list of hooks to run before creating a mediator
		 ]]></description>
</method>
<method name='matcher' fullname='robotlegs.bender.extensions.mediatorMap.api:IMediatorMapping/robotlegs.bender.extensions.mediatorMap.api:IMediatorMapping:matcher/get' isStatic='false' isFinal='false' isOverride='false'  result_type='robotlegs.bender.extensions.matching:ITypeFilter'>
<description><![CDATA[
		 The matcher for this mapping
		 ]]></description>
</method>
<method name='mediatorClass' fullname='robotlegs.bender.extensions.mediatorMap.api:IMediatorMapping/robotlegs.bender.extensions.mediatorMap.api:IMediatorMapping:mediatorClass/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Class'>
<description><![CDATA[
		 The concrete mediator class
		 ]]></description>
</method>
<interfaceRec name='ILogTarget' fullname='robotlegs.bender.framework.api:ILogTarget' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/framework/api/ILogTarget.as' namespace='robotlegs.bender.framework.api' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The Robotlegs log target contract
	 ]]></description>
</interfaceRec>
<method name='log' fullname='robotlegs.bender.framework.api:ILogTarget/robotlegs.bender.framework.api:ILogTarget:log' isStatic='false' isFinal='false' isOverride='false'  param_names='source;level;timestamp;message;params' param_types='Object;uint;int;String;Array' param_defaults='undefined;undefined;undefined;undefined;null' result_type='void'>
<description><![CDATA[
		 Captures a log message
		 		 ]]></description>
<param><![CDATA[source The source of the log message
		 ]]></param>
<param><![CDATA[level The log level of the message
		 ]]></param>
<param><![CDATA[timestamp getTimer() timestamp
		 ]]></param>
<param><![CDATA[message The log message
		 ]]></param>
<param><![CDATA[params Message parameters
		 ]]></param>
</method>
<interfaceRec name='IGuard' fullname='robotlegs.bender.framework.api:IGuard' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/framework/api/IGuard.as' namespace='robotlegs.bender.framework.api' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 A guard is expected to expose an "approve" method that returns a boolean
	 	 <p>Note: a guard does not need to implement this interface.
	 Any object that exposes an "approve" method can be used as a guard.</p>
	 ]]></description>
</interfaceRec>
<method name='approve' fullname='robotlegs.bender.framework.api:IGuard/robotlegs.bender.framework.api:IGuard:approve' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 Does this guard approve of this action?
		 ]]></description>
<return><![CDATA[Approval
		 ]]></return>
</method>
<classRec name='LifecycleState' fullname='robotlegs.bender.framework.api:LifecycleState' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/framework/api/LifecycleState.as' namespace='robotlegs.bender.framework.api' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Robotlegs object lifecycle state
	 ]]></description>
</classRec>
<field name='ACTIVE' fullname='robotlegs.bender.framework.api:LifecycleState/ACTIVE' type='String' isStatic='true' isConst='true' defaultValue='active' >
</field>
<field name='DESTROYED' fullname='robotlegs.bender.framework.api:LifecycleState/DESTROYED' type='String' isStatic='true' isConst='true' defaultValue='destroyed' >
</field>
<field name='DESTROYING' fullname='robotlegs.bender.framework.api:LifecycleState/DESTROYING' type='String' isStatic='true' isConst='true' defaultValue='destroying' >
</field>
<field name='INITIALIZING' fullname='robotlegs.bender.framework.api:LifecycleState/INITIALIZING' type='String' isStatic='true' isConst='true' defaultValue='initializing' >
</field>
<field name='RESUMING' fullname='robotlegs.bender.framework.api:LifecycleState/RESUMING' type='String' isStatic='true' isConst='true' defaultValue='resuming' >
</field>
<field name='SUSPENDED' fullname='robotlegs.bender.framework.api:LifecycleState/SUSPENDED' type='String' isStatic='true' isConst='true' defaultValue='suspended' >
</field>
<field name='SUSPENDING' fullname='robotlegs.bender.framework.api:LifecycleState/SUSPENDING' type='String' isStatic='true' isConst='true' defaultValue='suspending' >
</field>
<field name='UNINITIALIZED' fullname='robotlegs.bender.framework.api:LifecycleState/UNINITIALIZED' type='String' isStatic='true' isConst='true' defaultValue='uninitialized' >
</field>
<classRec name='LogLevel' fullname='robotlegs.bender.framework.api:LogLevel' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/framework/api/LogLevel.as' namespace='robotlegs.bender.framework.api' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Robotlegs log level
	 ]]></description>
</classRec>
<field name='DEBUG' fullname='robotlegs.bender.framework.api:LogLevel/DEBUG' type='uint' isStatic='true' isConst='true' defaultValue='32' >
</field>
<field name='ERROR' fullname='robotlegs.bender.framework.api:LogLevel/ERROR' type='uint' isStatic='true' isConst='true' defaultValue='4' >
</field>
<field name='FATAL' fullname='robotlegs.bender.framework.api:LogLevel/FATAL' type='uint' isStatic='true' isConst='true' defaultValue='2' >
</field>
<field name='INFO' fullname='robotlegs.bender.framework.api:LogLevel/INFO' type='uint' isStatic='true' isConst='true' defaultValue='16' >
</field>
<field name='NAME' fullname='robotlegs.bender.framework.api:LogLevel/NAME' type='Array' isStatic='true' isConst='true' defaultValue='unknown' >
</field>
<field name='WARN' fullname='robotlegs.bender.framework.api:LogLevel/WARN' type='uint' isStatic='true' isConst='true' defaultValue='8' >
</field>
<interfaceRec name='IConfig' fullname='robotlegs.bender.framework.api:IConfig' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/framework/api/IConfig.as' namespace='robotlegs.bender.framework.api' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Optional application configuration interface
	 	 <p>Note: a config does not need to implement this interface. But, it is highly recommended.</p>
	 ]]></description>
</interfaceRec>
<method name='configure' fullname='robotlegs.bender.framework.api:IConfig/robotlegs.bender.framework.api:IConfig:configure' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 Configure will be invoked after dependencies have been supplied
		 ]]></description>
</method>
<interfaceRec name='ILogger' fullname='robotlegs.bender.framework.api:ILogger' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/framework/api/ILogger.as' namespace='robotlegs.bender.framework.api' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The Robotlegs logger contract
	 ]]></description>
</interfaceRec>
<method name='debug' fullname='robotlegs.bender.framework.api:ILogger/robotlegs.bender.framework.api:ILogger:debug' isStatic='false' isFinal='false' isOverride='false'  param_names='message;params' param_types='*;Array' param_defaults='undefined;null' result_type='void'>
<description><![CDATA[
		 Logs a message for debug purposes
		 ]]></description>
<param><![CDATA[message Message to log
		 ]]></param>
<param><![CDATA[params Message parameters
		 ]]></param>
</method>
<method name='error' fullname='robotlegs.bender.framework.api:ILogger/robotlegs.bender.framework.api:ILogger:error' isStatic='false' isFinal='false' isOverride='false'  param_names='message;params' param_types='*;Array' param_defaults='undefined;null' result_type='void'>
<description><![CDATA[
		 Logs an error message
		 ]]></description>
<param><![CDATA[message Message to log
		 ]]></param>
<param><![CDATA[params Message parameters
		 ]]></param>
</method>
<method name='fatal' fullname='robotlegs.bender.framework.api:ILogger/robotlegs.bender.framework.api:ILogger:fatal' isStatic='false' isFinal='false' isOverride='false'  param_names='message;params' param_types='*;Array' param_defaults='undefined;null' result_type='void'>
<description><![CDATA[
		 Logs a fatal error message
		 ]]></description>
<param><![CDATA[message Message to log
		 ]]></param>
<param><![CDATA[params Message parameters
		 ]]></param>
</method>
<method name='info' fullname='robotlegs.bender.framework.api:ILogger/robotlegs.bender.framework.api:ILogger:info' isStatic='false' isFinal='false' isOverride='false'  param_names='message;params' param_types='*;Array' param_defaults='undefined;null' result_type='void'>
<description><![CDATA[
		 Logs a message for notification purposes
		 ]]></description>
<param><![CDATA[message Message to log
		 ]]></param>
<param><![CDATA[params Message parameters
		 ]]></param>
</method>
<method name='warn' fullname='robotlegs.bender.framework.api:ILogger/robotlegs.bender.framework.api:ILogger:warn' isStatic='false' isFinal='false' isOverride='false'  param_names='message;params' param_types='*;Array' param_defaults='undefined;null' result_type='void'>
<description><![CDATA[
		 Logs a warning message
		 ]]></description>
<param><![CDATA[message Message to log
		 ]]></param>
<param><![CDATA[params Message parameters
		 ]]></param>
</method>
<interfaceRec name='IMatcher' fullname='robotlegs.bender.framework.api:IMatcher' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/framework/api/IMatcher.as' namespace='robotlegs.bender.framework.api' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Simple Object Matcher
	 ]]></description>
</interfaceRec>
<method name='matches' fullname='robotlegs.bender.framework.api:IMatcher/robotlegs.bender.framework.api:IMatcher:matches' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 Does this object match the given criteria?
		 		 ]]></description>
<param><![CDATA[item The object to test
		 ]]></param>
<return><![CDATA[Boolean
		 ]]></return>
</method>
<classRec name='PinEvent' fullname='robotlegs.bender.framework.api:PinEvent' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/framework/api/PinEvent.as' namespace='robotlegs.bender.framework.api' access='public' baseclass='flash.events:Event' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Detain/release pin Event
	 ]]></description>
</classRec>
<method name='PinEvent' fullname='robotlegs.bender.framework.api:PinEvent/PinEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='type;instance' param_types='String;Object' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[
		 Create a Pin Event
		 ]]></description>
<param><![CDATA[type The event type
		 ]]></param>
<param><![CDATA[instance The associated instance
		 ]]></param>
</method>
<method name='clone' fullname='robotlegs.bender.framework.api:PinEvent/clone' isStatic='false' isFinal='false' isOverride='true'  result_type='flash.events:Event'>
<description><![CDATA[
		 ]]></description>
<inheritDoc><![CDATA[]]></inheritDoc>
</method>
<method name='instance' fullname='robotlegs.bender.framework.api:PinEvent/instance/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Object'>
<description><![CDATA[
		 The instance being detained or released
		 ]]></description>
</method>
<field name='DETAIN' fullname='robotlegs.bender.framework.api:PinEvent/DETAIN' type='String' isStatic='true' isConst='true' defaultValue='detain' >
</field>
<field name='RELEASE' fullname='robotlegs.bender.framework.api:PinEvent/RELEASE' type='String' isStatic='true' isConst='true' defaultValue='release' >
</field>
<field name='_instance' fullname='robotlegs.bender.framework.api:PinEvent/private:_instance' type='Object' isStatic='false' isConst='false' >
</field>
<interfaceRec name='ILifecycle' fullname='robotlegs.bender.framework.api:ILifecycle' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/framework/api/ILifecycle.as' namespace='robotlegs.bender.framework.api' access='public' baseClasses='flash.events:IEventDispatcher' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The Robotlegs object lifecycle contract
	 ]]></description>
<metadata>
	<Event owner='robotlegs.bender.framework.api:ILifecycle' name='suspend' type='robotlegs.bender.framework.api.LifecycleEvent' >
	</Event>
</metadata>
<metadata>
	<Event owner='robotlegs.bender.framework.api:ILifecycle' name='stateChange' type='robotlegs.bender.framework.api.LifecycleEvent' >
	</Event>
</metadata>
<metadata>
	<Event owner='robotlegs.bender.framework.api:ILifecycle' name='resume' type='robotlegs.bender.framework.api.LifecycleEvent' >
	</Event>
</metadata>
<metadata>
	<Event owner='robotlegs.bender.framework.api:ILifecycle' name='preSuspend' type='robotlegs.bender.framework.api.LifecycleEvent' >
	</Event>
</metadata>
<metadata>
	<Event owner='robotlegs.bender.framework.api:ILifecycle' name='preResume' type='robotlegs.bender.framework.api.LifecycleEvent' >
	</Event>
</metadata>
<metadata>
	<Event owner='robotlegs.bender.framework.api:ILifecycle' name='preInitialize' type='robotlegs.bender.framework.api.LifecycleEvent' >
	</Event>
</metadata>
<metadata>
	<Event owner='robotlegs.bender.framework.api:ILifecycle' name='preDestroy' type='robotlegs.bender.framework.api.LifecycleEvent' >
	</Event>
</metadata>
<metadata>
	<Event owner='robotlegs.bender.framework.api:ILifecycle' name='postSuspend' type='robotlegs.bender.framework.api.LifecycleEvent' >
	</Event>
</metadata>
<metadata>
	<Event owner='robotlegs.bender.framework.api:ILifecycle' name='postResume' type='robotlegs.bender.framework.api.LifecycleEvent' >
	</Event>
</metadata>
<metadata>
	<Event owner='robotlegs.bender.framework.api:ILifecycle' name='postInitialize' type='robotlegs.bender.framework.api.LifecycleEvent' >
	</Event>
</metadata>
<metadata>
	<Event owner='robotlegs.bender.framework.api:ILifecycle' name='postDestroy' type='robotlegs.bender.framework.api.LifecycleEvent' >
	</Event>
</metadata>
<metadata>
	<Event owner='robotlegs.bender.framework.api:ILifecycle' name='initialize' type='robotlegs.bender.framework.api.LifecycleEvent' >
	</Event>
</metadata>
<metadata>
	<Event owner='robotlegs.bender.framework.api:ILifecycle' name='error' type='robotlegs.bender.framework.api.LifecycleEvent' >
	</Event>
</metadata>
<metadata>
	<Event owner='robotlegs.bender.framework.api:ILifecycle' name='destroy' type='robotlegs.bender.framework.api.LifecycleEvent' >
	</Event>
</metadata>
</interfaceRec>
<method name='afterDestroying' fullname='robotlegs.bender.framework.api:ILifecycle/robotlegs.bender.framework.api:ILifecycle:afterDestroying' isStatic='false' isFinal='false' isOverride='false'  param_names='handler' param_types='Function' param_defaults='undefined' result_type='robotlegs.bender.framework.api:ILifecycle'>
<description><![CDATA[
		 A handler to run after destruction
		 		 <p>Note: The handler must be synchronous.</p>
		 ]]></description>
<param><![CDATA[handler Post-destroy handler
		 ]]></param>
<return><![CDATA[Self
		 ]]></return>
</method>
<method name='afterInitializing' fullname='robotlegs.bender.framework.api:ILifecycle/robotlegs.bender.framework.api:ILifecycle:afterInitializing' isStatic='false' isFinal='false' isOverride='false'  param_names='handler' param_types='Function' param_defaults='undefined' result_type='robotlegs.bender.framework.api:ILifecycle'>
<description><![CDATA[
		 A handler to run after initialization
		 		 <p>Note: The handler must be synchronous.</p>
		 ]]></description>
<param><![CDATA[handler Post-initialize handler
		 ]]></param>
<return><![CDATA[Self
		 ]]></return>
</method>
<method name='afterResuming' fullname='robotlegs.bender.framework.api:ILifecycle/robotlegs.bender.framework.api:ILifecycle:afterResuming' isStatic='false' isFinal='false' isOverride='false'  param_names='handler' param_types='Function' param_defaults='undefined' result_type='robotlegs.bender.framework.api:ILifecycle'>
<description><![CDATA[
		 A handler to run after resumption
		 		 <p>Note: The handler must be synchronous.</p>
		 ]]></description>
<param><![CDATA[handler Post-resume handler
		 ]]></param>
<return><![CDATA[Self
		 ]]></return>
</method>
<method name='afterSuspending' fullname='robotlegs.bender.framework.api:ILifecycle/robotlegs.bender.framework.api:ILifecycle:afterSuspending' isStatic='false' isFinal='false' isOverride='false'  param_names='handler' param_types='Function' param_defaults='undefined' result_type='robotlegs.bender.framework.api:ILifecycle'>
<description><![CDATA[
		 A handler to run after suspension
		 		 <p>Note: The handler must be synchronous.</p>
		 ]]></description>
<param><![CDATA[handler Post-suspend handler
		 ]]></param>
<return><![CDATA[Self
		 ]]></return>
</method>
<method name='beforeDestroying' fullname='robotlegs.bender.framework.api:ILifecycle/robotlegs.bender.framework.api:ILifecycle:beforeDestroying' isStatic='false' isFinal='false' isOverride='false'  param_names='handler' param_types='Function' param_defaults='undefined' result_type='robotlegs.bender.framework.api:ILifecycle'>
<description><![CDATA[
		 A handler to run before the target object is destroyed
		 		 <p>The handler can be asynchronous. See: readme-async</p>
		 		 ]]></description>
<param><![CDATA[handler Pre-destroy handler
		 ]]></param>
<return><![CDATA[Self
		 ]]></return>
</method>
<method name='beforeInitializing' fullname='robotlegs.bender.framework.api:ILifecycle/robotlegs.bender.framework.api:ILifecycle:beforeInitializing' isStatic='false' isFinal='false' isOverride='false'  param_names='handler' param_types='Function' param_defaults='undefined' result_type='robotlegs.bender.framework.api:ILifecycle'>
<description><![CDATA[
		 A handler to run before the target object is initialized
		 		 <p>The handler can be asynchronous. See: readme-async</p>
		 		 ]]></description>
<param><![CDATA[handler Pre-initialize handler
		 ]]></param>
<return><![CDATA[Self
		 ]]></return>
</method>
<method name='beforeResuming' fullname='robotlegs.bender.framework.api:ILifecycle/robotlegs.bender.framework.api:ILifecycle:beforeResuming' isStatic='false' isFinal='false' isOverride='false'  param_names='handler' param_types='Function' param_defaults='undefined' result_type='robotlegs.bender.framework.api:ILifecycle'>
<description><![CDATA[
		 A handler to run before the target object is resumed
		 		 <p>The handler can be asynchronous. See: readme-async</p>
		 		 ]]></description>
<param><![CDATA[handler Pre-resume handler
		 ]]></param>
<return><![CDATA[Self
		 ]]></return>
</method>
<method name='beforeSuspending' fullname='robotlegs.bender.framework.api:ILifecycle/robotlegs.bender.framework.api:ILifecycle:beforeSuspending' isStatic='false' isFinal='false' isOverride='false'  param_names='handler' param_types='Function' param_defaults='undefined' result_type='robotlegs.bender.framework.api:ILifecycle'>
<description><![CDATA[
		 A handler to run before the target object is suspended
		 		 <p>The handler can be asynchronous. See: readme-async</p>
		 		 ]]></description>
<param><![CDATA[handler Pre-suspend handler
		 ]]></param>
<return><![CDATA[Self
		 ]]></return>
</method>
<method name='destroy' fullname='robotlegs.bender.framework.api:ILifecycle/robotlegs.bender.framework.api:ILifecycle:destroy' isStatic='false' isFinal='false' isOverride='false'  param_names='callback' param_types='Function' param_defaults='null' result_type='void'>
<description><![CDATA[
		 Destroys an active lifecycle
		 ]]></description>
<param><![CDATA[callback Destruction callback
		 ]]></param>
</method>
<method name='initialize' fullname='robotlegs.bender.framework.api:ILifecycle/robotlegs.bender.framework.api:ILifecycle:initialize' isStatic='false' isFinal='false' isOverride='false'  param_names='callback' param_types='Function' param_defaults='null' result_type='void'>
<description><![CDATA[
		 Initializes the lifecycle
		 ]]></description>
<param><![CDATA[callback Initialization callback
		 ]]></param>
</method>
<method name='resume' fullname='robotlegs.bender.framework.api:ILifecycle/robotlegs.bender.framework.api:ILifecycle:resume' isStatic='false' isFinal='false' isOverride='false'  param_names='callback' param_types='Function' param_defaults='null' result_type='void'>
<description><![CDATA[
		 Resumes a suspended lifecycle
		 ]]></description>
<param><![CDATA[callback Resumption callback
		 ]]></param>
</method>
<method name='suspend' fullname='robotlegs.bender.framework.api:ILifecycle/robotlegs.bender.framework.api:ILifecycle:suspend' isStatic='false' isFinal='false' isOverride='false'  param_names='callback' param_types='Function' param_defaults='null' result_type='void'>
<description><![CDATA[
		 Suspends the lifecycle
		 ]]></description>
<param><![CDATA[callback Suspension callback
		 ]]></param>
</method>
<method name='whenDestroying' fullname='robotlegs.bender.framework.api:ILifecycle/robotlegs.bender.framework.api:ILifecycle:whenDestroying' isStatic='false' isFinal='false' isOverride='false'  param_names='handler' param_types='Function' param_defaults='undefined' result_type='robotlegs.bender.framework.api:ILifecycle'>
<description><![CDATA[
		 A handler to run during destruction
		 		 <p>Note: The handler must be synchronous.</p>
		 ]]></description>
<param><![CDATA[handler Destruction handler
		 ]]></param>
<return><![CDATA[Self
		 ]]></return>
</method>
<method name='whenInitializing' fullname='robotlegs.bender.framework.api:ILifecycle/robotlegs.bender.framework.api:ILifecycle:whenInitializing' isStatic='false' isFinal='false' isOverride='false'  param_names='handler' param_types='Function' param_defaults='undefined' result_type='robotlegs.bender.framework.api:ILifecycle'>
<description><![CDATA[
		 A handler to run during initialization
		 		 <p>Note: The handler must be synchronous.</p>
		 ]]></description>
<param><![CDATA[handler Initialization handler
		 ]]></param>
<return><![CDATA[Self
		 ]]></return>
</method>
<method name='whenResuming' fullname='robotlegs.bender.framework.api:ILifecycle/robotlegs.bender.framework.api:ILifecycle:whenResuming' isStatic='false' isFinal='false' isOverride='false'  param_names='handler' param_types='Function' param_defaults='undefined' result_type='robotlegs.bender.framework.api:ILifecycle'>
<description><![CDATA[
		 A handler to run during resumption
		 		 <p>Note: The handler must be synchronous.</p>
		 ]]></description>
<param><![CDATA[handler Resumption handler
		 ]]></param>
<return><![CDATA[Self
		 ]]></return>
</method>
<method name='whenSuspending' fullname='robotlegs.bender.framework.api:ILifecycle/robotlegs.bender.framework.api:ILifecycle:whenSuspending' isStatic='false' isFinal='false' isOverride='false'  param_names='handler' param_types='Function' param_defaults='undefined' result_type='robotlegs.bender.framework.api:ILifecycle'>
<description><![CDATA[
		 A handler to run during suspension
		 		 <p>Note: The handler must be synchronous.</p>
		 ]]></description>
<param><![CDATA[handler Suspension handler
		 ]]></param>
<return><![CDATA[Self
		 ]]></return>
</method>
<method name='active' fullname='robotlegs.bender.framework.api:ILifecycle/robotlegs.bender.framework.api:ILifecycle:active/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 Is this object currently active?
		 ]]></description>
</method>
<method name='destroyed' fullname='robotlegs.bender.framework.api:ILifecycle/robotlegs.bender.framework.api:ILifecycle:destroyed/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 Has this object been fully destroyed?
		 ]]></description>
</method>
<method name='initialized' fullname='robotlegs.bender.framework.api:ILifecycle/robotlegs.bender.framework.api:ILifecycle:initialized/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 Has this object been fully initialized?
		 ]]></description>
</method>
<method name='state' fullname='robotlegs.bender.framework.api:ILifecycle/robotlegs.bender.framework.api:ILifecycle:state/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
		 The current lifecycle state of the target object
		 ]]></description>
</method>
<method name='suspended' fullname='robotlegs.bender.framework.api:ILifecycle/robotlegs.bender.framework.api:ILifecycle:suspended/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 Has this object been fully suspended?
		 ]]></description>
</method>
<method name='target' fullname='robotlegs.bender.framework.api:ILifecycle/robotlegs.bender.framework.api:ILifecycle:target/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Object'>
<description><![CDATA[
		 The target object associated with this lifecycle
		 ]]></description>
</method>
<method name='uninitialized' fullname='robotlegs.bender.framework.api:ILifecycle/robotlegs.bender.framework.api:ILifecycle:uninitialized/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 Is this object uninitialized?
		 ]]></description>
</method>
<classRec name='LifecycleError' fullname='robotlegs.bender.framework.api:LifecycleError' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/framework/api/LifecycleError.as' namespace='robotlegs.bender.framework.api' access='public' baseclass='Error' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Lifecycle Error
	 ]]></description>
</classRec>
<method name='LifecycleError' fullname='robotlegs.bender.framework.api:LifecycleError/LifecycleError' isStatic='false' isFinal='false' isOverride='false'  param_names='message' param_types='String' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 Creates a Lifecycle Error
		 ]]></description>
<param><![CDATA[message The error message
		 ]]></param>
</method>
<field name='LATE_HANDLER_ERROR_MESSAGE' fullname='robotlegs.bender.framework.api:LifecycleError/LATE_HANDLER_ERROR_MESSAGE' type='String' isStatic='true' isConst='true' defaultValue='Handler added late and will never fire' >
</field>
<field name='SYNC_HANDLER_ARG_MISMATCH' fullname='robotlegs.bender.framework.api:LifecycleError/SYNC_HANDLER_ARG_MISMATCH' type='String' isStatic='true' isConst='true' defaultValue='When and After handlers must accept 0 or 1 arguments' >
</field>
<classRec name='LifecycleEvent' fullname='robotlegs.bender.framework.api:LifecycleEvent' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/framework/api/LifecycleEvent.as' namespace='robotlegs.bender.framework.api' access='public' baseclass='flash.events:Event' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Robotlegs object lifecycle event
	 ]]></description>
</classRec>
<method name='LifecycleEvent' fullname='robotlegs.bender.framework.api:LifecycleEvent/robotlegs.bender.framework.api:LifecycleEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='type;error' param_types='String;Error' param_defaults='undefined;null' result_type='*'>
<description><![CDATA[
		 Creates a Lifecycle Event
		 ]]></description>
<param><![CDATA[type The event type
		 ]]></param>
<param><![CDATA[error Optional error
		 ]]></param>
</method>
<method name='clone' fullname='robotlegs.bender.framework.api:LifecycleEvent/clone' isStatic='false' isFinal='false' isOverride='true'  result_type='flash.events:Event'>
<description><![CDATA[
		 ]]></description>
<inheritDoc><![CDATA[]]></inheritDoc>
</method>
<method name='error' fullname='robotlegs.bender.framework.api:LifecycleEvent/error/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Error'>
<description><![CDATA[
		 Associated lifecycle error
		 ]]></description>
</method>
<field name='DESTROY' fullname='robotlegs.bender.framework.api:LifecycleEvent/DESTROY' type='String' isStatic='true' isConst='true' defaultValue='destroy' >
</field>
<field name='ERROR' fullname='robotlegs.bender.framework.api:LifecycleEvent/ERROR' type='String' isStatic='true' isConst='true' defaultValue='_error' >
</field>
<field name='INITIALIZE' fullname='robotlegs.bender.framework.api:LifecycleEvent/INITIALIZE' type='String' isStatic='true' isConst='true' defaultValue='initialize' >
</field>
<field name='POST_DESTROY' fullname='robotlegs.bender.framework.api:LifecycleEvent/POST_DESTROY' type='String' isStatic='true' isConst='true' defaultValue='postDestroy' >
</field>
<field name='POST_INITIALIZE' fullname='robotlegs.bender.framework.api:LifecycleEvent/POST_INITIALIZE' type='String' isStatic='true' isConst='true' defaultValue='postInitialize' >
</field>
<field name='POST_RESUME' fullname='robotlegs.bender.framework.api:LifecycleEvent/POST_RESUME' type='String' isStatic='true' isConst='true' defaultValue='postResume' >
</field>
<field name='POST_SUSPEND' fullname='robotlegs.bender.framework.api:LifecycleEvent/POST_SUSPEND' type='String' isStatic='true' isConst='true' defaultValue='postSuspend' >
</field>
<field name='PRE_DESTROY' fullname='robotlegs.bender.framework.api:LifecycleEvent/PRE_DESTROY' type='String' isStatic='true' isConst='true' defaultValue='preDestroy' >
</field>
<field name='PRE_INITIALIZE' fullname='robotlegs.bender.framework.api:LifecycleEvent/PRE_INITIALIZE' type='String' isStatic='true' isConst='true' defaultValue='preInitialize' >
</field>
<field name='PRE_RESUME' fullname='robotlegs.bender.framework.api:LifecycleEvent/PRE_RESUME' type='String' isStatic='true' isConst='true' defaultValue='preResume' >
</field>
<field name='PRE_SUSPEND' fullname='robotlegs.bender.framework.api:LifecycleEvent/PRE_SUSPEND' type='String' isStatic='true' isConst='true' defaultValue='preSuspend' >
</field>
<field name='RESUME' fullname='robotlegs.bender.framework.api:LifecycleEvent/RESUME' type='String' isStatic='true' isConst='true' defaultValue='resume' >
</field>
<field name='STATE_CHANGE' fullname='robotlegs.bender.framework.api:LifecycleEvent/STATE_CHANGE' type='String' isStatic='true' isConst='true' defaultValue='stateChange' >
</field>
<field name='SUSPEND' fullname='robotlegs.bender.framework.api:LifecycleEvent/SUSPEND' type='String' isStatic='true' isConst='true' defaultValue='suspend' >
</field>
<field name='_error' fullname='robotlegs.bender.framework.api:LifecycleEvent/private:_error' type='Error' isStatic='false' isConst='false' >
</field>
<interfaceRec name='IHook' fullname='robotlegs.bender.framework.api:IHook' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/framework/api/IHook.as' namespace='robotlegs.bender.framework.api' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 A hook is expected to expose a "hook" method
	 	 <p>Note: a hook does not need to implement this interface.
	 Any object that exposes a "hook" method can be used.</p>
	 ]]></description>
</interfaceRec>
<method name='hook' fullname='robotlegs.bender.framework.api:IHook/robotlegs.bender.framework.api:IHook:hook' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<interfaceRec name='IExtension' fullname='robotlegs.bender.framework.api:IExtension' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/framework/api/IExtension.as' namespace='robotlegs.bender.framework.api' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 An extension integrates a library into a Context
	 ]]></description>
</interfaceRec>
<method name='extend' fullname='robotlegs.bender.framework.api:IExtension/robotlegs.bender.framework.api:IExtension:extend' isStatic='false' isFinal='false' isOverride='false'  param_names='context' param_types='robotlegs.bender.framework.api:IContext' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 This method will be called immediately when the extension/bundle is installed.
		 		 <p>Note: the context may not be fully initialized yet. A bundle should do
		 little more than install additional bundles/extensions. An extension
		 can add lifecycle handlers to the context instance to perform synchronized
		 initialization.</p>
		 		 ]]></description>
<param><![CDATA[context The context that this extension/bundle is being installed into.
		 ]]></param>
</method>
<interfaceRec name='IBundle' fullname='robotlegs.bender.framework.api:IBundle' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/framework/api/IBundle.as' namespace='robotlegs.bender.framework.api' access='public' baseClasses='robotlegs.bender.framework.api:IExtension' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 A bundle installs a set of Extensions and Configurations into a Context
	 ]]></description>
</interfaceRec>
<interfaceRec name='IContext' fullname='robotlegs.bender.framework.api:IContext' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/framework/api/IContext.as' namespace='robotlegs.bender.framework.api' access='public' baseClasses='flash.events:IEventDispatcher' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The Robotlegs context contract
	 ]]></description>
<metadata>
	<Event owner='robotlegs.bender.framework.api:IContext' name='suspend' type='robotlegs.bender.framework.api.LifecycleEvent' >
	</Event>
</metadata>
<metadata>
	<Event owner='robotlegs.bender.framework.api:IContext' name='stateChange' type='robotlegs.bender.framework.api.LifecycleEvent' >
	</Event>
</metadata>
<metadata>
	<Event owner='robotlegs.bender.framework.api:IContext' name='resume' type='robotlegs.bender.framework.api.LifecycleEvent' >
	</Event>
</metadata>
<metadata>
	<Event owner='robotlegs.bender.framework.api:IContext' name='release' type='robotlegs.bender.framework.api.PinEvent' >
	</Event>
</metadata>
<metadata>
	<Event owner='robotlegs.bender.framework.api:IContext' name='preSuspend' type='robotlegs.bender.framework.api.LifecycleEvent' >
	</Event>
</metadata>
<metadata>
	<Event owner='robotlegs.bender.framework.api:IContext' name='preResume' type='robotlegs.bender.framework.api.LifecycleEvent' >
	</Event>
</metadata>
<metadata>
	<Event owner='robotlegs.bender.framework.api:IContext' name='preInitialize' type='robotlegs.bender.framework.api.LifecycleEvent' >
	</Event>
</metadata>
<metadata>
	<Event owner='robotlegs.bender.framework.api:IContext' name='preDestroy' type='robotlegs.bender.framework.api.LifecycleEvent' >
	</Event>
</metadata>
<metadata>
	<Event owner='robotlegs.bender.framework.api:IContext' name='postSuspend' type='robotlegs.bender.framework.api.LifecycleEvent' >
	</Event>
</metadata>
<metadata>
	<Event owner='robotlegs.bender.framework.api:IContext' name='postResume' type='robotlegs.bender.framework.api.LifecycleEvent' >
	</Event>
</metadata>
<metadata>
	<Event owner='robotlegs.bender.framework.api:IContext' name='postInitialize' type='robotlegs.bender.framework.api.LifecycleEvent' >
	</Event>
</metadata>
<metadata>
	<Event owner='robotlegs.bender.framework.api:IContext' name='postDestroy' type='robotlegs.bender.framework.api.LifecycleEvent' >
	</Event>
</metadata>
<metadata>
	<Event owner='robotlegs.bender.framework.api:IContext' name='initialize' type='robotlegs.bender.framework.api.LifecycleEvent' >
	</Event>
</metadata>
<metadata>
	<Event owner='robotlegs.bender.framework.api:IContext' name='detain' type='robotlegs.bender.framework.api.PinEvent' >
	</Event>
</metadata>
<metadata>
	<Event owner='robotlegs.bender.framework.api:IContext' name='destroy' type='robotlegs.bender.framework.api.LifecycleEvent' >
	</Event>
</metadata>
</interfaceRec>
<method name='addChild' fullname='robotlegs.bender.framework.api:IContext/robotlegs.bender.framework.api:IContext:addChild' isStatic='false' isFinal='false' isOverride='false'  param_names='child' param_types='robotlegs.bender.framework.api:IContext' param_defaults='undefined' result_type='robotlegs.bender.framework.api:IContext'>
<description><![CDATA[
		 Adds an uninitialized context as a child
		 		 <p>This sets up an injection chain.</p>
		 		 ]]></description>
<param><![CDATA[child The context to add as a child
		 ]]></param>
<return><![CDATA[this
		 ]]></return>
</method>
<method name='addConfigHandler' fullname='robotlegs.bender.framework.api:IContext/robotlegs.bender.framework.api:IContext:addConfigHandler' isStatic='false' isFinal='false' isOverride='false'  param_names='matcher;handler' param_types='robotlegs.bender.framework.api:IMatcher;Function' param_defaults='undefined;undefined' result_type='robotlegs.bender.framework.api:IContext'>
<description><![CDATA[
		 Adds a custom configuration handler
		 ]]></description>
<param><![CDATA[matcher Pattern to match configurations
		 ]]></param>
<param><![CDATA[handler Handler to process matching configurations
		 ]]></param>
<return><![CDATA[this
		 ]]></return>
</method>
<method name='addLogTarget' fullname='robotlegs.bender.framework.api:IContext/robotlegs.bender.framework.api:IContext:addLogTarget' isStatic='false' isFinal='false' isOverride='false'  param_names='target' param_types='robotlegs.bender.framework.api:ILogTarget' param_defaults='undefined' result_type='robotlegs.bender.framework.api:IContext'>
<description><![CDATA[
		 Adds a custom log target
		 ]]></description>
<param><![CDATA[target Log target
		 ]]></param>
<return><![CDATA[this
		 ]]></return>
</method>
<method name='afterDestroying' fullname='robotlegs.bender.framework.api:IContext/robotlegs.bender.framework.api:IContext:afterDestroying' isStatic='false' isFinal='false' isOverride='false'  param_names='handler' param_types='Function' param_defaults='undefined' result_type='robotlegs.bender.framework.api:IContext'>
<description><![CDATA[
		 A handler to run after destruction
		 		 <p>Note: The handler must be synchronous.</p>
		 ]]></description>
<param><![CDATA[handler Post-destroy handler
		 ]]></param>
<return><![CDATA[this
		 ]]></return>
</method>
<method name='afterInitializing' fullname='robotlegs.bender.framework.api:IContext/robotlegs.bender.framework.api:IContext:afterInitializing' isStatic='false' isFinal='false' isOverride='false'  param_names='handler' param_types='Function' param_defaults='undefined' result_type='robotlegs.bender.framework.api:IContext'>
<description><![CDATA[
		 A handler to run after initialization
		 		 <p>Note: The handler must be synchronous.</p>
		 ]]></description>
<param><![CDATA[handler Post-initialize handler
		 ]]></param>
<return><![CDATA[this
		 ]]></return>
</method>
<method name='afterResuming' fullname='robotlegs.bender.framework.api:IContext/robotlegs.bender.framework.api:IContext:afterResuming' isStatic='false' isFinal='false' isOverride='false'  param_names='handler' param_types='Function' param_defaults='undefined' result_type='robotlegs.bender.framework.api:IContext'>
<description><![CDATA[
		 A handler to run after resumption
		 		 <p>Note: The handler must be synchronous.</p>
		 ]]></description>
<param><![CDATA[handler Post-resume handler
		 ]]></param>
<return><![CDATA[Self
		 ]]></return>
</method>
<method name='afterSuspending' fullname='robotlegs.bender.framework.api:IContext/robotlegs.bender.framework.api:IContext:afterSuspending' isStatic='false' isFinal='false' isOverride='false'  param_names='handler' param_types='Function' param_defaults='undefined' result_type='robotlegs.bender.framework.api:IContext'>
<description><![CDATA[
		 A handler to run after suspension
		 		 <p>Note: The handler must be synchronous.</p>
		 ]]></description>
<param><![CDATA[handler Post-suspend handler
		 ]]></param>
<return><![CDATA[this
		 ]]></return>
</method>
<method name='beforeDestroying' fullname='robotlegs.bender.framework.api:IContext/robotlegs.bender.framework.api:IContext:beforeDestroying' isStatic='false' isFinal='false' isOverride='false'  param_names='handler' param_types='Function' param_defaults='undefined' result_type='robotlegs.bender.framework.api:IContext'>
<description><![CDATA[
		 A handler to run before the context is destroyed
		 		 <p>The handler can be asynchronous. See: readme-async</p>
		 		 ]]></description>
<param><![CDATA[handler Pre-destroy handler
		 ]]></param>
<return><![CDATA[this
		 ]]></return>
</method>
<method name='beforeInitializing' fullname='robotlegs.bender.framework.api:IContext/robotlegs.bender.framework.api:IContext:beforeInitializing' isStatic='false' isFinal='false' isOverride='false'  param_names='handler' param_types='Function' param_defaults='undefined' result_type='robotlegs.bender.framework.api:IContext'>
<description><![CDATA[
		 A handler to run before the context is initialized
		 		 <p>The handler can be asynchronous. See: readme-async</p>
		 		 ]]></description>
<param><![CDATA[handler Pre-initialize handler
		 ]]></param>
<return><![CDATA[this
		 ]]></return>
</method>
<method name='beforeResuming' fullname='robotlegs.bender.framework.api:IContext/robotlegs.bender.framework.api:IContext:beforeResuming' isStatic='false' isFinal='false' isOverride='false'  param_names='handler' param_types='Function' param_defaults='undefined' result_type='robotlegs.bender.framework.api:IContext'>
<description><![CDATA[
		 A handler to run before the context is resumed
		 		 <p>The handler can be asynchronous. See: readme-async</p>
		 		 ]]></description>
<param><![CDATA[handler Pre-resume handler
		 ]]></param>
<return><![CDATA[this
		 ]]></return>
</method>
<method name='beforeSuspending' fullname='robotlegs.bender.framework.api:IContext/robotlegs.bender.framework.api:IContext:beforeSuspending' isStatic='false' isFinal='false' isOverride='false'  param_names='handler' param_types='Function' param_defaults='undefined' result_type='robotlegs.bender.framework.api:IContext'>
<description><![CDATA[
		 A handler to run before the target object is suspended
		 		 <p>The handler can be asynchronous. See: readme-async</p>
		 		 ]]></description>
<param><![CDATA[handler Pre-suspend handler
		 ]]></param>
<return><![CDATA[this
		 ]]></return>
</method>
<method name='configure' fullname='robotlegs.bender.framework.api:IContext/robotlegs.bender.framework.api:IContext:configure' isStatic='false' isFinal='false' isOverride='false'  param_names='configs' param_types='restParam' param_defaults='undefined' result_type='robotlegs.bender.framework.api:IContext'>
<description><![CDATA[
		 Configures the context with custom configurations
		 ]]></description>
<param><![CDATA[configs Configuration objects or classes of any type
		 ]]></param>
<return><![CDATA[this
		 ]]></return>
</method>
<method name='destroy' fullname='robotlegs.bender.framework.api:IContext/robotlegs.bender.framework.api:IContext:destroy' isStatic='false' isFinal='false' isOverride='false'  param_names='callback' param_types='Function' param_defaults='null' result_type='void'>
<description><![CDATA[
		 Destroys an active context
		 ]]></description>
<param><![CDATA[callback Destruction callback
		 ]]></param>
</method>
<method name='detain' fullname='robotlegs.bender.framework.api:IContext/robotlegs.bender.framework.api:IContext:detain' isStatic='false' isFinal='false' isOverride='false'  param_names='instances' param_types='restParam' param_defaults='undefined' result_type='robotlegs.bender.framework.api:IContext'>
<description><![CDATA[
		 Pins instances in memory
		 ]]></description>
<param><![CDATA[instances Instances to pin
		 ]]></param>
<return><![CDATA[this
		 ]]></return>
</method>
<method name='getLogger' fullname='robotlegs.bender.framework.api:IContext/robotlegs.bender.framework.api:IContext:getLogger' isStatic='false' isFinal='false' isOverride='false'  param_names='source' param_types='Object' param_defaults='undefined' result_type='robotlegs.bender.framework.api:ILogger'>
<description><![CDATA[
		 Retrieves a logger for a given source
		 ]]></description>
<param><![CDATA[source Logging source
		 ]]></param>
<return><![CDATA[Logger
		 ]]></return>
</method>
<method name='initialize' fullname='robotlegs.bender.framework.api:IContext/robotlegs.bender.framework.api:IContext:initialize' isStatic='false' isFinal='false' isOverride='false'  param_names='callback' param_types='Function' param_defaults='null' result_type='void'>
<description><![CDATA[
		 Initializes this context
		 ]]></description>
<param><![CDATA[callback Initialization callback
		 ]]></param>
</method>
<method name='install' fullname='robotlegs.bender.framework.api:IContext/robotlegs.bender.framework.api:IContext:install' isStatic='false' isFinal='false' isOverride='false'  param_names='extensions' param_types='restParam' param_defaults='undefined' result_type='robotlegs.bender.framework.api:IContext'>
<description><![CDATA[
		 Installs custom extensions or bundles into the context
		 ]]></description>
<param><![CDATA[extensions Objects or classes implementing IExtension or IBundle
		 ]]></param>
<return><![CDATA[this
		 ]]></return>
</method>
<method name='release' fullname='robotlegs.bender.framework.api:IContext/robotlegs.bender.framework.api:IContext:release' isStatic='false' isFinal='false' isOverride='false'  param_names='instances' param_types='restParam' param_defaults='undefined' result_type='robotlegs.bender.framework.api:IContext'>
<description><![CDATA[
		 Unpins instances from memory
		 ]]></description>
<param><![CDATA[instances Instances to unpin
		 ]]></param>
<return><![CDATA[this
		 ]]></return>
</method>
<method name='removeChild' fullname='robotlegs.bender.framework.api:IContext/robotlegs.bender.framework.api:IContext:removeChild' isStatic='false' isFinal='false' isOverride='false'  param_names='child' param_types='robotlegs.bender.framework.api:IContext' param_defaults='undefined' result_type='robotlegs.bender.framework.api:IContext'>
<description><![CDATA[
		 Removes a child context from this context
		 ]]></description>
<param><![CDATA[child The child context to remove
		 ]]></param>
<return><![CDATA[this
		 ]]></return>
</method>
<method name='resume' fullname='robotlegs.bender.framework.api:IContext/robotlegs.bender.framework.api:IContext:resume' isStatic='false' isFinal='false' isOverride='false'  param_names='callback' param_types='Function' param_defaults='null' result_type='void'>
<description><![CDATA[
		 Resumes a suspended context
		 ]]></description>
<param><![CDATA[callback Resumption callback
		 ]]></param>
</method>
<method name='suspend' fullname='robotlegs.bender.framework.api:IContext/robotlegs.bender.framework.api:IContext:suspend' isStatic='false' isFinal='false' isOverride='false'  param_names='callback' param_types='Function' param_defaults='null' result_type='void'>
<description><![CDATA[
		 Suspends this context
		 ]]></description>
<param><![CDATA[callback Suspension callback
		 ]]></param>
</method>
<method name='whenDestroying' fullname='robotlegs.bender.framework.api:IContext/robotlegs.bender.framework.api:IContext:whenDestroying' isStatic='false' isFinal='false' isOverride='false'  param_names='handler' param_types='Function' param_defaults='undefined' result_type='robotlegs.bender.framework.api:IContext'>
<description><![CDATA[
		 A handler to run during destruction
		 		 <p>Note: The handler must be synchronous.</p>
		 ]]></description>
<param><![CDATA[handler Destruction handler
		 ]]></param>
<return><![CDATA[this
		 ]]></return>
</method>
<method name='whenInitializing' fullname='robotlegs.bender.framework.api:IContext/robotlegs.bender.framework.api:IContext:whenInitializing' isStatic='false' isFinal='false' isOverride='false'  param_names='handler' param_types='Function' param_defaults='undefined' result_type='robotlegs.bender.framework.api:IContext'>
<description><![CDATA[
		 A handler to run during initialization
		 		 <p>Note: The handler must be synchronous.</p>
		 ]]></description>
<param><![CDATA[handler Initialization handler
		 ]]></param>
<return><![CDATA[this
		 ]]></return>
</method>
<method name='whenResuming' fullname='robotlegs.bender.framework.api:IContext/robotlegs.bender.framework.api:IContext:whenResuming' isStatic='false' isFinal='false' isOverride='false'  param_names='handler' param_types='Function' param_defaults='undefined' result_type='robotlegs.bender.framework.api:IContext'>
<description><![CDATA[
		 A handler to run during resumption
		 		 <p>Note: The handler must be synchronous.</p>
		 ]]></description>
<param><![CDATA[handler Resumption handler
		 ]]></param>
<return><![CDATA[this
		 ]]></return>
</method>
<method name='whenSuspending' fullname='robotlegs.bender.framework.api:IContext/robotlegs.bender.framework.api:IContext:whenSuspending' isStatic='false' isFinal='false' isOverride='false'  param_names='handler' param_types='Function' param_defaults='undefined' result_type='robotlegs.bender.framework.api:IContext'>
<description><![CDATA[
		 A handler to run during suspension
		 		 <p>Note: The handler must be synchronous.</p>
		 ]]></description>
<param><![CDATA[handler Suspension handler
		 ]]></param>
<return><![CDATA[this
		 ]]></return>
</method>
<method name='active' fullname='robotlegs.bender.framework.api:IContext/robotlegs.bender.framework.api:IContext:active/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 Is this context active?
		 ]]></description>
</method>
<method name='destroyed' fullname='robotlegs.bender.framework.api:IContext/robotlegs.bender.framework.api:IContext:destroyed/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 Has this context been destroyed?
		 ]]></description>
</method>
<method name='initialized' fullname='robotlegs.bender.framework.api:IContext/robotlegs.bender.framework.api:IContext:initialized/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 Is this context initialized?
		 ]]></description>
</method>
<method name='injector' fullname='robotlegs.bender.framework.api:IContext/robotlegs.bender.framework.api:IContext:injector/get' isStatic='false' isFinal='false' isOverride='false'  result_type='robotlegs.bender.framework.api:IInjector'>
<description><![CDATA[
		 The context dependency injector
		 ]]></description>
</method>
<method name='logLevel' fullname='robotlegs.bender.framework.api:IContext/robotlegs.bender.framework.api:IContext:logLevel/get' isStatic='false' isFinal='false' isOverride='false'  result_type='uint'>
<description><![CDATA[
		 The current log level
		 ]]></description>
</method>
<method name='state' fullname='robotlegs.bender.framework.api:IContext/robotlegs.bender.framework.api:IContext:state/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
		 The current lifecycle state
		 ]]></description>
</method>
<method name='suspended' fullname='robotlegs.bender.framework.api:IContext/robotlegs.bender.framework.api:IContext:suspended/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 Is this context suspended?
		 ]]></description>
</method>
<method name='uninitialized' fullname='robotlegs.bender.framework.api:IContext/robotlegs.bender.framework.api:IContext:uninitialized/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 Is this context uninitialized?
		 ]]></description>
</method>
<method name='logLevel' fullname='robotlegs.bender.framework.api:IContext/robotlegs.bender.framework.api:IContext:logLevel/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='uint' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Sets the current log level
		 ]]></description>
<param><![CDATA[value The log level. Use a constant from LogLevel
		 ]]></param>
</method>
<interfaceRec name='IInjector' fullname='robotlegs.bender.framework.api:IInjector' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/framework/api/IInjector.as' namespace='robotlegs.bender.framework.api' access='public' baseClasses='flash.events:IEventDispatcher' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The <code>Injector</code> manages the mappings and acts as the central hub from which all
	 injections are started.
	 ]]></description>
<metadata>
	<Event owner='robotlegs.bender.framework.api:IInjector' name='preMappingCreate' type='org.swiftsuspenders.mapping.MappingEvent' >
<description><![CDATA[
	 This event is dispatched each time the injector creates a new mapping for a type/ name
	 combination, right before the mapping is created
	 	 <p>At the point where the event is dispatched the mapping hasn't yet been created. Thus, the
	 respective field in the event is null.</p>
	 	 <p>This event is only dispatched if there are one or more relevant listeners attached to
	 the dispatching injector.</p>
	 	 ]]></description>
<eventType><![CDATA[org.swiftsuspenders.MappingEvent.PRE_MAPPING_CREATE
	 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='robotlegs.bender.framework.api:IInjector' name='preMappingChange' type='org.swiftsuspenders.mapping.MappingEvent' >
<description><![CDATA[
	 This event is dispatched each time an injector mapping is changed in any way, right before
	 the change is applied.
	 	 <p>At the point where the event is dispatched the changes haven't yet been applied, meaning the
	 mapping stored in the event can be queried for its pre-change state.</p>
	 	 <p>This event is only dispatched if there are one or more relevant listeners attached to
	 the dispatching injector.</p>
	 	 ]]></description>
<eventType><![CDATA[org.swiftsuspenders.MappingEvent.PRE_MAPPING_CHANGE
	 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='robotlegs.bender.framework.api:IInjector' name='preConstruct' type='org.swiftsuspenders.InjectionEvent' >
<description><![CDATA[
	 This event is dispatched each time the injector is about to inject into a class
	 	 <p>At the point where the event is dispatched none of the injection points have been processed.</p>
	 	 <p>The only difference to the <code>POST_INSTANTIATE</code> event is that
	 <code>PRE_CONSTRUCT</code> is only dispatched for instances that are created in the
	 injector, whereas <code>POST_INSTANTIATE</code> is also dispatched for instances the
	 injector only injects into.</p>
	 	 <p>This event is only dispatched if there are one or more relevant listeners attached to
	 the dispatching injector.</p>
	 	 ]]></description>
<eventType><![CDATA[org.swiftsuspenders.InjectionEvent.PRE_CONSTRUCT
	 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='robotlegs.bender.framework.api:IInjector' name='postMappingRemove' type='org.swiftsuspenders.mapping.MappingEvent' >
<description><![CDATA[
	 This event is dispatched each time an injector mapping is removed, right after
	 the mapping is deleted from the configuration.
	 	 <p>At the point where the event is dispatched the changes have already been applied, meaning
	 the mapping is lost to the injector and can't be queried anymore.</p>
	 	 <p>This event is only dispatched if there are one or more relevant listeners attached to
	 the dispatching injector.</p>
	 	 ]]></description>
<eventType><![CDATA[org.swiftsuspenders.MappingEvent.POST_MAPPING_REMOVE
	 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='robotlegs.bender.framework.api:IInjector' name='postMappingCreate' type='org.swiftsuspenders.mapping.MappingEvent' >
<description><![CDATA[
	 This event is dispatched each time the injector creates a new mapping for a type/ name
	 combination, right after the mapping was created
	 	 <p>At the point where the event is dispatched the mapping has already been created and stored
	 in the injector's lookup table.</p>
	 	 <p>This event is only dispatched if there are one or more relevant listeners attached to
	 the dispatching injector.</p>
	 	 ]]></description>
<eventType><![CDATA[org.swiftsuspenders.MappingEvent.POST_MAPPING_CREATE
	 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='robotlegs.bender.framework.api:IInjector' name='postMappingChange' type='org.swiftsuspenders.mapping.MappingEvent' >
<description><![CDATA[
	 This event is dispatched each time an injector mapping is changed in any way, right after
	 the change is applied.
	 	 <p>At the point where the event is dispatched the changes have already been applied, meaning
	 the mapping stored in the event can be queried for its post-change state</p>
	 	 <p>This event is only dispatched if there are one or more relevant listeners attached to
	 the dispatching injector.</p>
	 	 ]]></description>
<eventType><![CDATA[org.swiftsuspenders.MappingEvent.POST_MAPPING_CHANGE
	 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='robotlegs.bender.framework.api:IInjector' name='postInstantiate' type='org.swiftsuspenders.InjectionEvent' >
<description><![CDATA[
	This event is dispatched each time the injector instantiated a class
		<p>At the point where the event is dispatched none of the injection points have been processed.</p>
		<p>The only difference to the <code>PRE_CONSTRUCT</code> event is that
	<code>POST_INSTANTIATE</code> is only dispatched for instances that are created in the
	injector, whereas <code>PRE_CONSTRUCT</code> is also dispatched for instances the injector
	only injects into.</p>
		<p>This event is only dispatched if there are one or more relevant listeners attached to
	the dispatching injector.</p>
		]]></description>
<eventType><![CDATA[org.swiftsuspenders.InjectionEvent.POST_INSTANTIATE
	]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='robotlegs.bender.framework.api:IInjector' name='postConstruct' type='org.swiftsuspenders.InjectionEvent' >
<description><![CDATA[
	 This event is dispatched each time the injector created and fully initialized a new instance
	 	 <p>At the point where the event is dispatched all dependencies for the newly created instance
	 have already been injected. That means that creation-events for leaf nodes of the created
	 object graph will be dispatched before the creation-events for the branches they are
	 injected into.</p>
	 	 <p>The newly created instance's [PostConstruct]-annotated methods will also have run already.</p>
	 	 <p>This event is only dispatched if there are one or more relevant listeners attached to
	 the dispatching injector.</p>
	 	 ]]></description>
<eventType><![CDATA[org.swiftsuspenders.InjectionEvent.POST_CONSTRUCT
	 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='robotlegs.bender.framework.api:IInjector' name='mappingOverride' type='org.swiftsuspenders.mapping.MappingEvent' >
<description><![CDATA[
	 This event is dispatched if an existing mapping is overridden without first unmapping it.
	 	 <p>The reason for dispatching an event (and tracing a warning) is that in most cases,
	 overriding existing mappings is a sign of bugs in the application. Deliberate mapping
	 changes should be done by first removing the existing mapping.</p>
	 	 <p>This event is only dispatched if there are one or more relevant listeners attached to
	 the dispatching injector.</p>
	 	 ]]></description>
<eventType><![CDATA[org.swiftsuspenders.MappingEvent.POST_MAPPING_REMOVE
	 ]]></eventType>
	</Event>
</metadata>
</interfaceRec>
<method name='addTypeDescription' fullname='robotlegs.bender.framework.api:IInjector/robotlegs.bender.framework.api:IInjector:addTypeDescription' isStatic='false' isFinal='false' isOverride='false'  param_names='type;description' param_types='Class;org.swiftsuspenders.typedescriptions:TypeDescription' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 Instructs the injector to use the description for the given type when constructing or
		 destroying instances.
		 		 The description consists details for the constructor, all properties and methods to
		 inject into during construction and all methods to invoke during destruction.
		 		 ]]></description>
<param><![CDATA[type
		 ]]></param>
<param><![CDATA[description
		 ]]></param>
</method>
<method name='createChild' fullname='robotlegs.bender.framework.api:IInjector/robotlegs.bender.framework.api:IInjector:createChild' isStatic='false' isFinal='false' isOverride='false'  param_names='applicationDomain' param_types='flash.system:ApplicationDomain' param_defaults='null' result_type='robotlegs.bender.framework.api:IInjector'>
<description><![CDATA[
		 Creates a new <code>Injector</code> and sets itself as that new <code>Injector</code>'s
		 <code>parentInjector</code>.
		 		 ]]></description>
<param><![CDATA[applicationDomain The optional domain to use in the new Injector.
		 If not given, the creating injector's domain is set on the new Injector as well.
		 ]]></param>
<return><![CDATA[The newly created <code>Injector</code> instance
		 		 ]]></return>
<see><![CDATA[#parent
		 ]]></see>
</method>
<method name='destroyInstance' fullname='robotlegs.bender.framework.api:IInjector/robotlegs.bender.framework.api:IInjector:destroyInstance' isStatic='false' isFinal='false' isOverride='false'  param_names='instance' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Uses the <code>TypeDescription</code> the injector associates with the given instance's
		 type to iterate over all <code>[PreDestroy]</code> methods in the instance, supporting
		 automated destruction.
		 		 ]]></description>
<param><![CDATA[instance The instance to destroy
		 ]]></param>
</method>
<method name='getInstance' fullname='robotlegs.bender.framework.api:IInjector/robotlegs.bender.framework.api:IInjector:getInstance' isStatic='false' isFinal='false' isOverride='false'  param_names='type;name;targetType' param_types='Class;String;Class' param_defaults='undefined;;null' result_type='*'>
<description><![CDATA[
		 Instantiates the class identified by the given <code>type</code> and <code>name</code>.
		 		 <p>The parameter <code>targetType</code> is only useful if the
		 <code>InjectionMapping</code> used to satisfy the request might vary its result based on
		 that <code>targetType</code>. An Example of that would be a provider returning a logger
		 instance pre-configured for the instance it is used in.</p>
		 		 ]]></description>
<param><![CDATA[type The <code>class</code> describing the mapping
		 ]]></param>
<param><![CDATA[name The name, as a case-sensitive string, to use for mapping resolution
		 ]]></param>
<param><![CDATA[targetType The type of the instance that is dependent on the returned value
		 		 ]]></param>
<return><![CDATA[The mapped or created instance
		 		 ]]></return>
<throws><![CDATA[org.swiftsuspenders.errors.InjectorMissingMappingError if no mapping was found
		 for the specified dependency and no <code>fallbackProvider</code> is set.
		 ]]></throws>
</method>
<method name='getMapping' fullname='robotlegs.bender.framework.api:IInjector/robotlegs.bender.framework.api:IInjector:getMapping' isStatic='false' isFinal='false' isOverride='false'  param_names='type;name' param_types='Class;String' param_defaults='undefined;' result_type='org.swiftsuspenders.mapping:InjectionMapping'>
<description><![CDATA[
		 Returns the mapping for the specified dependency class
		 		 <p>Note that getMapping will only return mappings in exactly this injector, not ones
		 mapped in an ancestor injector. To get mappings from ancestor injectors, query them
		 using <code>parentInjector</code>.
		 This restriction is in place to prevent accidential changing of mappings in ancestor
		 injectors where only the child's response is meant to be altered.</p>
		 		 ]]></description>
<param><![CDATA[type The type of the dependency to return the mapping for
		 ]]></param>
<param><![CDATA[name The name of the dependency to return the mapping for
		 		 ]]></param>
<return><![CDATA[The mapping for the specified dependency class
		 		 ]]></return>
<throws><![CDATA[org.swiftsuspenders.errors.InjectorMissingMappingError when no mapping was found
		 for the specified dependency
		 ]]></throws>
</method>
<method name='getOrCreateNewInstance' fullname='robotlegs.bender.framework.api:IInjector/robotlegs.bender.framework.api:IInjector:getOrCreateNewInstance' isStatic='false' isFinal='false' isOverride='false'  param_names='type' param_types='Class' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 Returns an instance of the given type. If the Injector has a mapping for the type, that
		 is used for getting the instance. If not, a new instance of the class is created and
		 injected into.
		 		 ]]></description>
<param><![CDATA[type The type to get an instance of
		 ]]></param>
<return><![CDATA[The instance that was created or retrieved from the mapped provider
		 		 ]]></return>
<throws><![CDATA[org.swiftsuspenders.errors.InjectorMissingMappingError if no mapping is found
		 for one of the type's dependencies and no <code>fallbackProvider</code> is set
		 ]]></throws>
<throws><![CDATA[org.swiftsuspenders.errors.InjectorInterfaceConstructionError if the given type
		 is an interface and no mapping was found
		 ]]></throws>
</method>
<method name='getTypeDescription' fullname='robotlegs.bender.framework.api:IInjector/robotlegs.bender.framework.api:IInjector:getTypeDescription' isStatic='false' isFinal='false' isOverride='false'  param_names='type' param_types='Class' param_defaults='undefined' result_type='org.swiftsuspenders.typedescriptions:TypeDescription'>
<description><![CDATA[
		 Returns a description of the given type containing its constructor, injection points
		 and post construct and pre destroy hooks
		 		 ]]></description>
<param><![CDATA[type The type to describe
		 ]]></param>
<return><![CDATA[The TypeDescription containing all information the injector has about the type
		 ]]></return>
</method>
<method name='hasDirectMapping' fullname='robotlegs.bender.framework.api:IInjector/robotlegs.bender.framework.api:IInjector:hasDirectMapping' isStatic='false' isFinal='false' isOverride='false'  param_names='type;name' param_types='Class;String' param_defaults='undefined;' result_type='Boolean'>
<description><![CDATA[
		 Does this injector have a direct mapping for the given type?
		 ]]></description>
<param><![CDATA[type The type
		 ]]></param>
<param><![CDATA[name Optional name
		 ]]></param>
<return><![CDATA[True if the mapping exists
		 ]]></return>
</method>
<method name='hasMapping' fullname='robotlegs.bender.framework.api:IInjector/robotlegs.bender.framework.api:IInjector:hasMapping' isStatic='false' isFinal='false' isOverride='false'  param_names='type;name' param_types='Class;String' param_defaults='undefined;' result_type='Boolean'>
<description><![CDATA[
		 Does this injector (or any parents) have a mapping for the given type?
		 ]]></description>
<param><![CDATA[type The type
		 ]]></param>
<param><![CDATA[name Optional name
		 ]]></param>
<return><![CDATA[True if the mapping exists
		 ]]></return>
</method>
<method name='injectInto' fullname='robotlegs.bender.framework.api:IInjector/robotlegs.bender.framework.api:IInjector:injectInto' isStatic='false' isFinal='false' isOverride='false'  param_names='target' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Inspects the given object and injects into all injection points configured for its class.
		 		 ]]></description>
<param><![CDATA[target The instance to inject into
		 		 ]]></param>
<see><![CDATA[#map()
		 ]]></see>
<throws><![CDATA[org.swiftsuspenders.errors.InjectorError The <code>Injector</code> must have mappings
		 for all injection points
		 		 ]]></throws>
</method>
<method name='instantiateUnmapped' fullname='robotlegs.bender.framework.api:IInjector/robotlegs.bender.framework.api:IInjector:instantiateUnmapped' isStatic='false' isFinal='false' isOverride='false'  param_names='type' param_types='Class' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 Creates an instance of the given type and injects into it.
		 		 ]]></description>
<param><![CDATA[type The type to instantiate
		 ]]></param>
<return><![CDATA[The new instance, with all of its dependencies fulfilled
		 		 ]]></return>
<throws><![CDATA[org.swiftsuspenders.errors.InjectorMissingMappingError if no mapping is found
		 for one of the type's dependencies and no <code>fallbackProvider</code> is set
		 ]]></throws>
</method>
<method name='map' fullname='robotlegs.bender.framework.api:IInjector/robotlegs.bender.framework.api:IInjector:map' isStatic='false' isFinal='false' isOverride='false'  param_names='type;name' param_types='Class;String' param_defaults='undefined;' result_type='org.swiftsuspenders.mapping:InjectionMapping'>
<description><![CDATA[
		 Maps a request description, consisting of the <code>type</code> and, optionally, the
		 <code>name</code>.
		 		 <p>The returned mapping is created if it didn't exist yet or simply returned otherwise.</p>
		 		 <p>Named mappings should be used as sparingly as possible as they increase the likelyhood
		 of typing errors to cause hard to debug errors at runtime.</p>
		 		 ]]></description>
<param><![CDATA[type The <code>class</code> describing the mapping
		 ]]></param>
<param><![CDATA[name The name, as a case-sensitive string, to further describe the mapping
		 		 ]]></param>
<return><![CDATA[The <code>InjectionMapping</code> for the given request description
		 		 ]]></return>
<see><![CDATA[#unmap()
		 ]]></see>
<see><![CDATA[org.swiftsuspenders.mapping.InjectionMapping
		 ]]></see>
</method>
<method name='satisfiesDirectly' fullname='robotlegs.bender.framework.api:IInjector/robotlegs.bender.framework.api:IInjector:satisfiesDirectly' isStatic='false' isFinal='false' isOverride='false'  param_names='type;name' param_types='Class;String' param_defaults='undefined;' result_type='Boolean'>
<description><![CDATA[
		 Indicates whether the injector can directly supply a response for the specified
		 dependency.
		 		 <p>In contrast to <code>#satisfies()</code>, <code>satisfiesDirectly</code> only informs
		 about mappings on this injector itself, without querying its ancestor injectors.</p>
		 		 ]]></description>
<param><![CDATA[type The type of the dependency under query
		 ]]></param>
<param><![CDATA[name The name of the dependency under query
		 		 ]]></param>
<return><![CDATA[<code>true</code> if the dependency can be satisfied, <code>false</code> if not
		 ]]></return>
</method>
<method name='satisfies' fullname='robotlegs.bender.framework.api:IInjector/robotlegs.bender.framework.api:IInjector:satisfies' isStatic='false' isFinal='false' isOverride='false'  param_names='type;name' param_types='Class;String' param_defaults='undefined;' result_type='Boolean'>
<description><![CDATA[
		 Indicates whether the injector can supply a response for the specified dependency either
		 by using a mapping of its own or by querying one of its ancestor injectors.
		 		 ]]></description>
<param><![CDATA[type The type of the dependency under query
		 ]]></param>
<param><![CDATA[name The name of the dependency under query
		 		 ]]></param>
<return><![CDATA[<code>true</code> if the dependency can be satisfied, <code>false</code> if not
		 ]]></return>
</method>
<method name='teardown' fullname='robotlegs.bender.framework.api:IInjector/robotlegs.bender.framework.api:IInjector:teardown' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 Destroys the injector by cleaning up all instances it manages.
		 		 Cleanup in this context means iterating over all mapped dependency providers and invoking
		 their <code>destroy</code> methods and calling preDestroy methods on all objects the
		 injector created or injected into.
		 		 Of note, the <link>SingletonProvider</link>'s implementation of <code>destroy</code>
		 invokes all preDestroy methods on the managed singleton to guarantee its orderly
		 destruction. Implementers of custom implementations of <link>DependencyProviders</link>
		 are encouraged to do likewise.
		 ]]></description>
</method>
<method name='unmap' fullname='robotlegs.bender.framework.api:IInjector/robotlegs.bender.framework.api:IInjector:unmap' isStatic='false' isFinal='false' isOverride='false'  param_names='type;name' param_types='Class;String' param_defaults='undefined;' result_type='void'>
<description><![CDATA[
		  Removes the mapping described by the given <code>type</code> and <code>name</code>.
		 		 ]]></description>
<param><![CDATA[type The <code>class</code> describing the mapping
		 ]]></param>
<param><![CDATA[name The name, as a case-sensitive string, to further describe the mapping
		 		 ]]></param>
<see><![CDATA[#map()
		 ]]></see>
<see><![CDATA[org.swiftsuspenders.mapping.InjectionMapping
		 ]]></see>
<see><![CDATA[org.swiftsuspenders.mapping.InjectionMapping#unseal()
		 ]]></see>
<throws><![CDATA[org.swiftsuspenders.errors.InjectorError Descriptions that are not mapped can't be unmapped
		 ]]></throws>
<throws><![CDATA[org.swiftsuspenders.errors.InjectorError Sealed mappings have to be unsealed before unmapping them
		 		 ]]></throws>
</method>
<method name='applicationDomain' fullname='robotlegs.bender.framework.api:IInjector/robotlegs.bender.framework.api:IInjector:applicationDomain/get' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.system:ApplicationDomain'>
<description><![CDATA[
		 The ApplicationDomain used for type reflection
		 ]]></description>
</method>
<method name='blockParentFallbackProvider' fullname='robotlegs.bender.framework.api:IInjector/robotlegs.bender.framework.api:IInjector:blockParentFallbackProvider/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 Is the parent FallbackProvider blocked?
		 ]]></description>
</method>
<method name='fallbackProvider' fullname='robotlegs.bender.framework.api:IInjector/robotlegs.bender.framework.api:IInjector:fallbackProvider/get' isStatic='false' isFinal='false' isOverride='false'  result_type='org.swiftsuspenders.dependencyproviders:FallbackDependencyProvider'>
<description><![CDATA[
		 The current FallbackDependencyProvider
		 ]]></description>
</method>
<method name='parent' fullname='robotlegs.bender.framework.api:IInjector/robotlegs.bender.framework.api:IInjector:parent/get' isStatic='false' isFinal='false' isOverride='false'  result_type='robotlegs.bender.framework.api:IInjector'>
<description><![CDATA[
		 Returns the <code>IInjector</code> used for dependencies the current
		 <code>Injector</code> can't supply
		 ]]></description>
</method>
<method name='applicationDomain' fullname='robotlegs.bender.framework.api:IInjector/robotlegs.bender.framework.api:IInjector:applicationDomain/set' isStatic='false' isFinal='false' isOverride='false'  param_names='applicationDomain' param_types='flash.system:ApplicationDomain' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Sets the ApplicationDomain to use for type reflection
		 ]]></description>
<param><![CDATA[applicationDomain The ApplicationDomain
		 ]]></param>
</method>
<method name='blockParentFallbackProvider' fullname='robotlegs.bender.framework.api:IInjector/robotlegs.bender.framework.api:IInjector:blockParentFallbackProvider/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='Boolean' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Disables parent FallbackProvider
		 ]]></description>
<param><![CDATA[value True/false
		 ]]></param>
</method>
<method name='fallbackProvider' fullname='robotlegs.bender.framework.api:IInjector/robotlegs.bender.framework.api:IInjector:fallbackProvider/set' isStatic='false' isFinal='false' isOverride='false'  param_names='provider' param_types='org.swiftsuspenders.dependencyproviders:FallbackDependencyProvider' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Sets the Fallback Provider
		 ]]></description>
<param><![CDATA[provider FallbackDependencyProvider
		 ]]></param>
</method>
<method name='parent' fullname='robotlegs.bender.framework.api:IInjector/robotlegs.bender.framework.api:IInjector:parent/set' isStatic='false' isFinal='false' isOverride='false'  param_names='parentInjector' param_types='robotlegs.bender.framework.api:IInjector' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Sets the parent <code>IInjector</code>
		 ]]></description>
<param><![CDATA[parentInjector The parent IInjector
		 ]]></param>
</method>
<interfaceRec name='IViewProcessorFactory' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:IViewProcessorFactory' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/viewProcessorMap/impl/IViewProcessorFactory.as' namespace='robotlegs.bender.extensions.viewProcessorMap.impl' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 ]]></description>
<private><![CDATA[]]></private>
</interfaceRec>
<method name='runAllUnprocessors' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:IViewProcessorFactory/robotlegs.bender.extensions.viewProcessorMap.impl:IViewProcessorFactory:runAllUnprocessors' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='runProcessors' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:IViewProcessorFactory/robotlegs.bender.extensions.viewProcessorMap.impl:IViewProcessorFactory:runProcessors' isStatic='false' isFinal='false' isOverride='false'  param_names='view;type;processorMappings' param_types='Object;Class;Array' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='runUnprocessors' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:IViewProcessorFactory/robotlegs.bender.extensions.viewProcessorMap.impl:IViewProcessorFactory:runUnprocessors' isStatic='false' isFinal='false' isOverride='false'  param_names='view;type;processorMappings' param_types='Object;Class;Array' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<classRec name='NullProcessor' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:NullProcessor' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/viewProcessorMap/impl/NullProcessor.as' namespace='robotlegs.bender.extensions.viewProcessorMap.impl' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 ]]></description>
<private><![CDATA[]]></private>
</classRec>
<method name='process' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:NullProcessor/process' isStatic='false' isFinal='false' isOverride='false'  param_names='view;type;injector' param_types='Object;Class;*' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='unprocess' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:NullProcessor/unprocess' isStatic='false' isFinal='false' isOverride='false'  param_names='view;type;injector' param_types='Object;Class;*' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<classRec name='NullViewProcessorUnmapper' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:NullViewProcessorUnmapper' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/viewProcessorMap/impl/NullViewProcessorUnmapper.as' namespace='robotlegs.bender.extensions.viewProcessorMap.impl' access='public' baseclass='Object' interfaces='robotlegs.bender.extensions.viewProcessorMap.dsl:IViewProcessorUnmapper' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 ]]></description>
<private><![CDATA[]]></private>
</classRec>
<method name='fromAll' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:NullViewProcessorUnmapper/fromAll' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='fromInjection' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:NullViewProcessorUnmapper/fromInjection' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='fromNoProcess' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:NullViewProcessorUnmapper/fromNoProcess' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='fromProcess' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:NullViewProcessorUnmapper/fromProcess' isStatic='false' isFinal='false' isOverride='false'  param_names='processorClassOrInstance' param_types='*' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<interfaceRec name='IViewProcessorViewHandler' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:IViewProcessorViewHandler' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/viewProcessorMap/impl/IViewProcessorViewHandler.as' namespace='robotlegs.bender.extensions.viewProcessorMap.impl' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 ]]></description>
<private><![CDATA[]]></private>
</interfaceRec>
<method name='addMapping' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:IViewProcessorViewHandler/robotlegs.bender.extensions.viewProcessorMap.impl:IViewProcessorViewHandler:addMapping' isStatic='false' isFinal='false' isOverride='false'  param_names='mapping' param_types='robotlegs.bender.extensions.viewProcessorMap.dsl:IViewProcessorMapping' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='processItem' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:IViewProcessorViewHandler/robotlegs.bender.extensions.viewProcessorMap.impl:IViewProcessorViewHandler:processItem' isStatic='false' isFinal='false' isOverride='false'  param_names='item;type' param_types='Object;Class' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='removeMapping' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:IViewProcessorViewHandler/robotlegs.bender.extensions.viewProcessorMap.impl:IViewProcessorViewHandler:removeMapping' isStatic='false' isFinal='false' isOverride='false'  param_names='mapping' param_types='robotlegs.bender.extensions.viewProcessorMap.dsl:IViewProcessorMapping' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='unprocessItem' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:IViewProcessorViewHandler/robotlegs.bender.extensions.viewProcessorMap.impl:IViewProcessorViewHandler:unprocessItem' isStatic='false' isFinal='false' isOverride='false'  param_names='item;type' param_types='Object;Class' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<classRec name='ViewProcessorMapping' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:ViewProcessorMapping' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/viewProcessorMap/impl/ViewProcessorMapping.as' namespace='robotlegs.bender.extensions.viewProcessorMap.impl' access='public' baseclass='Object' interfaces='robotlegs.bender.extensions.viewProcessorMap.dsl:IViewProcessorMapping;robotlegs.bender.extensions.viewProcessorMap.dsl:IViewProcessorMappingConfig' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 ]]></description>
<private><![CDATA[]]></private>
</classRec>
<method name='ViewProcessorMapping' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:ViewProcessorMapping/ViewProcessorMapping' isStatic='false' isFinal='false' isOverride='false'  param_names='matcher;processor' param_types='robotlegs.bender.extensions.matching:ITypeFilter;Object' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='setProcessor' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:ViewProcessorMapping/private:setProcessor' isStatic='false' isFinal='false' isOverride='false'  param_names='processor' param_types='Object' param_defaults='undefined' result_type='void'>
</method>
<method name='toString' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:ViewProcessorMapping/toString' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
</method>
<method name='withGuards' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:ViewProcessorMapping/withGuards' isStatic='false' isFinal='false' isOverride='false'  param_names='guards' param_types='restParam' param_defaults='undefined' result_type='robotlegs.bender.extensions.viewProcessorMap.dsl:IViewProcessorMappingConfig'>
<description><![CDATA[
		 
		 A list of guards to consult before allowing a view to be processed
		 ]]></description>
<param><![CDATA[guards A list of guards
		 ]]></param>
<return><![CDATA[Self
		 ]]></return>
</method>
<method name='withHooks' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:ViewProcessorMapping/withHooks' isStatic='false' isFinal='false' isOverride='false'  param_names='hooks' param_types='restParam' param_defaults='undefined' result_type='robotlegs.bender.extensions.viewProcessorMap.dsl:IViewProcessorMappingConfig'>
<description><![CDATA[
		 
		 A list of hooks to run before processing a view
		 ]]></description>
<param><![CDATA[hooks A list of hooks
		 ]]></param>
<return><![CDATA[Self
		 ]]></return>
</method>
<method name='guards' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:ViewProcessorMapping/guards/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
		 
		 A list of guards to consult before allowing a view to be processed
		 ]]></description>
</method>
<method name='hooks' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:ViewProcessorMapping/hooks/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
		 
		 A list of hooks to run before processing a view
		 ]]></description>
</method>
<method name='matcher' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:ViewProcessorMapping/matcher/get' isStatic='false' isFinal='false' isOverride='false'  result_type='robotlegs.bender.extensions.matching:ITypeFilter'>
<description><![CDATA[
		 
		 The matcher for this mapping
		 ]]></description>
</method>
<method name='processorClass' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:ViewProcessorMapping/processorClass/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Class'>
<description><![CDATA[
		 
		 The processor class for this mapping
		 ]]></description>
</method>
<method name='processor' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:ViewProcessorMapping/processor/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Object'>
<description><![CDATA[
		 
		 The processor for this mapping
		 ]]></description>
</method>
<method name='processor' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:ViewProcessorMapping/processor/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 
		 Sets the processor for this mapping
		 ]]></description>
</method>
<field name='_guards' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:ViewProcessorMapping/private:_guards' type='Array' isStatic='false' isConst='false' defaultValue='unknown' >
</field>
<field name='_hooks' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:ViewProcessorMapping/private:_hooks' type='Array' isStatic='false' isConst='false' defaultValue='unknown' >
</field>
<field name='_matcher' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:ViewProcessorMapping/private:_matcher' type='robotlegs.bender.extensions.matching:ITypeFilter' isStatic='false' isConst='false' >
</field>
<field name='_processorClass' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:ViewProcessorMapping/private:_processorClass' type='Class' isStatic='false' isConst='false' >
</field>
<field name='_processor' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:ViewProcessorMapping/private:_processor' type='Object' isStatic='false' isConst='false' >
</field>
<classRec name='ViewProcessorViewHandler' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:ViewProcessorViewHandler' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/viewProcessorMap/impl/ViewProcessorViewHandler.as' namespace='robotlegs.bender.extensions.viewProcessorMap.impl' access='public' baseclass='Object' interfaces='robotlegs.bender.extensions.viewProcessorMap.impl:IViewProcessorViewHandler' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 ]]></description>
<private><![CDATA[]]></private>
</classRec>
<method name='ViewProcessorViewHandler' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:ViewProcessorViewHandler/ViewProcessorViewHandler' isStatic='false' isFinal='false' isOverride='false'  param_names='factory' param_types='robotlegs.bender.extensions.viewProcessorMap.impl:IViewProcessorFactory' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='addMapping' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:ViewProcessorViewHandler/addMapping' isStatic='false' isFinal='false' isOverride='false'  param_names='mapping' param_types='robotlegs.bender.extensions.viewProcessorMap.dsl:IViewProcessorMapping' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<inheritDoc><![CDATA[]]></inheritDoc>
</method>
<method name='flushCache' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:ViewProcessorViewHandler/private:flushCache' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='getInterestedMappingsFor' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:ViewProcessorViewHandler/private:getInterestedMappingsFor' isStatic='false' isFinal='false' isOverride='false'  param_names='view;type' param_types='Object;Class' param_defaults='undefined;undefined' result_type='Array'>
</method>
<method name='processItem' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:ViewProcessorViewHandler/processItem' isStatic='false' isFinal='false' isOverride='false'  param_names='item;type' param_types='Object;Class' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<inheritDoc><![CDATA[]]></inheritDoc>
</method>
<method name='removeMapping' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:ViewProcessorViewHandler/removeMapping' isStatic='false' isFinal='false' isOverride='false'  param_names='mapping' param_types='robotlegs.bender.extensions.viewProcessorMap.dsl:IViewProcessorMapping' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<inheritDoc><![CDATA[]]></inheritDoc>
</method>
<method name='unprocessItem' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:ViewProcessorViewHandler/unprocessItem' isStatic='false' isFinal='false' isOverride='false'  param_names='item;type' param_types='Object;Class' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<inheritDoc><![CDATA[]]></inheritDoc>
</method>
<field name='_factory' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:ViewProcessorViewHandler/private:_factory' type='robotlegs.bender.extensions.viewProcessorMap.impl:IViewProcessorFactory' isStatic='false' isConst='false' >
</field>
<field name='_knownMappings' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:ViewProcessorViewHandler/private:_knownMappings' type='flash.utils:Dictionary' isStatic='false' isConst='false' defaultValue='unknown' >
</field>
<field name='_mappings' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:ViewProcessorViewHandler/private:_mappings' type='Array' isStatic='false' isConst='true' defaultValue='unknown' >
</field>
<classRec name='ViewProcessorMapper' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:ViewProcessorMapper' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/viewProcessorMap/impl/ViewProcessorMapper.as' namespace='robotlegs.bender.extensions.viewProcessorMap.impl' access='public' baseclass='Object' interfaces='robotlegs.bender.extensions.viewProcessorMap.dsl:IViewProcessorMapper;robotlegs.bender.extensions.viewProcessorMap.dsl:IViewProcessorUnmapper' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 ]]></description>
<private><![CDATA[]]></private>
</classRec>
<method name='ViewProcessorMapper' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:ViewProcessorMapper/ViewProcessorMapper' isStatic='false' isFinal='false' isOverride='false'  param_names='matcher;handler;logger' param_types='robotlegs.bender.extensions.matching:ITypeFilter;robotlegs.bender.extensions.viewProcessorMap.impl:IViewProcessorViewHandler;robotlegs.bender.framework.api:ILogger' param_defaults='undefined;undefined;null' result_type='*'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='createMapping' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:ViewProcessorMapper/private:createMapping' isStatic='false' isFinal='false' isOverride='false'  param_names='processor' param_types='Object' param_defaults='undefined' result_type='robotlegs.bender.extensions.viewProcessorMap.impl:ViewProcessorMapping'>
</method>
<method name='deleteMapping' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:ViewProcessorMapper/private:deleteMapping' isStatic='false' isFinal='false' isOverride='false'  param_names='mapping' param_types='robotlegs.bender.extensions.viewProcessorMap.dsl:IViewProcessorMapping' param_defaults='undefined' result_type='void'>
</method>
<method name='fromAll' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:ViewProcessorMapper/fromAll' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 
		 Unmaps all processors from this matcher
		 ]]></description>
</method>
<method name='fromInjection' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:ViewProcessorMapper/fromInjection' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 
		 Unmaps an injection processor
		 ]]></description>
</method>
<method name='fromNoProcess' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:ViewProcessorMapper/fromNoProcess' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 
		 Unmaps a matcher
		 ]]></description>
</method>
<method name='fromProcess' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:ViewProcessorMapper/fromProcess' isStatic='false' isFinal='false' isOverride='false'  param_names='processorClassOrInstance' param_types='*' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 
		 Unmaps a processor from a matcher
		 ]]></description>
<param><![CDATA[processorClassOrInstance
		 ]]></param>
</method>
<method name='overwriteMapping' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:ViewProcessorMapper/private:overwriteMapping' isStatic='false' isFinal='false' isOverride='false'  param_names='mapping;processClassOrInstance' param_types='robotlegs.bender.extensions.viewProcessorMap.dsl:IViewProcessorMapping;*' param_defaults='undefined;undefined' result_type='robotlegs.bender.extensions.viewProcessorMap.dsl:IViewProcessorMappingConfig'>
</method>
<method name='toInjection' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:ViewProcessorMapper/toInjection' isStatic='false' isFinal='false' isOverride='false'  result_type='robotlegs.bender.extensions.viewProcessorMap.dsl:IViewProcessorMappingConfig'>
<description><![CDATA[
		 
		 Maps the type or matcher for injection.
		 ]]></description>
<return><![CDATA[the mapping config so that you can specify further details.
		 ]]></return>
</method>
<method name='toNoProcess' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:ViewProcessorMapper/toNoProcess' isStatic='false' isFinal='false' isOverride='false'  result_type='robotlegs.bender.extensions.viewProcessorMap.dsl:IViewProcessorMappingConfig'>
<description><![CDATA[
		 
		 Maps the type or matcher to a nothing-happens process, so that you can make use of guards and hooks.
		 ]]></description>
<return><![CDATA[the mapping config so that you can specify further details.
		 ]]></return>
</method>
<method name='toProcess' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:ViewProcessorMapper/toProcess' isStatic='false' isFinal='false' isOverride='false'  param_names='processClassOrInstance' param_types='*' param_defaults='undefined' result_type='robotlegs.bender.extensions.viewProcessorMap.dsl:IViewProcessorMappingConfig'>
<description><![CDATA[
		 
		 Specifies the process to be mapped against the type or matcher.
		 ]]></description>
<param><![CDATA[processClassOrInstance An instance of a class, or a class implementing the following methods:
		 process(view:ISkinnable, class:Class, injector:Injector):void;
		 unprocess(view:ISkinnable, class:Class, injector:Injector):void;
		 ]]></param>
<return><![CDATA[the mapping config so that you can specify further details.
		 ]]></return>
</method>
<field name='_handler' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:ViewProcessorMapper/private:_handler' type='robotlegs.bender.extensions.viewProcessorMap.impl:IViewProcessorViewHandler' isStatic='false' isConst='false' >
</field>
<field name='_logger' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:ViewProcessorMapper/private:_logger' type='robotlegs.bender.framework.api:ILogger' isStatic='false' isConst='false' >
</field>
<field name='_mappings' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:ViewProcessorMapper/private:_mappings' type='flash.utils:Dictionary' isStatic='false' isConst='true' defaultValue='unknown' >
</field>
<field name='_matcher' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:ViewProcessorMapper/private:_matcher' type='robotlegs.bender.extensions.matching:ITypeFilter' isStatic='false' isConst='false' >
</field>
<classRec name='ViewInjectionProcessor' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:ViewInjectionProcessor' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/viewProcessorMap/impl/ViewInjectionProcessor.as' namespace='robotlegs.bender.extensions.viewProcessorMap.impl' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Default View Injection Processor implementation
	 ]]></description>
<private><![CDATA[]]></private>
</classRec>
<method name='injectAndRemember' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:ViewInjectionProcessor/private:injectAndRemember' isStatic='false' isFinal='false' isOverride='false'  param_names='view;injector' param_types='Object;robotlegs.bender.framework.api:IInjector' param_defaults='undefined;undefined' result_type='void'>
</method>
<method name='process' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:ViewInjectionProcessor/process' isStatic='false' isFinal='false' isOverride='false'  param_names='view;type;injector' param_types='Object;Class;robotlegs.bender.framework.api:IInjector' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='unprocess' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:ViewInjectionProcessor/unprocess' isStatic='false' isFinal='false' isOverride='false'  param_names='view;type;injector' param_types='Object;Class;robotlegs.bender.framework.api:IInjector' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='_injectedObjects' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:ViewInjectionProcessor/private:_injectedObjects' type='flash.utils:Dictionary' isStatic='false' isConst='true' defaultValue='unknown' >
</field>
<classRec name='ViewProcessorFactory' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:ViewProcessorFactory' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/viewProcessorMap/impl/ViewProcessorFactory.as' namespace='robotlegs.bender.extensions.viewProcessorMap.impl' access='public' baseclass='Object' interfaces='robotlegs.bender.extensions.viewProcessorMap.impl:IViewProcessorFactory' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 ]]></description>
<private><![CDATA[]]></private>
</classRec>
<method name='ViewProcessorFactory' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:ViewProcessorFactory/ViewProcessorFactory' isStatic='false' isFinal='false' isOverride='false'  param_names='injector' param_types='robotlegs.bender.framework.api:IInjector' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='createProcessor' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:ViewProcessorFactory/private:createProcessor' isStatic='false' isFinal='false' isOverride='false'  param_names='processorClass' param_types='Class' param_defaults='undefined' result_type='Object'>
</method>
<method name='createRemovedListener' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:ViewProcessorFactory/private:createRemovedListener' isStatic='false' isFinal='false' isOverride='false'  param_names='view;type;processorMappings' param_types='Object;Class;Array' param_defaults='undefined;undefined;undefined' result_type='void'>
</method>
<method name='mapTypeForFilterBinding' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:ViewProcessorFactory/private:mapTypeForFilterBinding' isStatic='false' isFinal='false' isOverride='false'  param_names='filter;type;view' param_types='robotlegs.bender.extensions.matching:ITypeFilter;Class;Object' param_defaults='undefined;undefined;undefined' result_type='void'>
</method>
<method name='removeHandlerFromView' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:ViewProcessorFactory/private:removeHandlerFromView' isStatic='false' isFinal='false' isOverride='false'  param_names='view;handler' param_types='Object;Function' param_defaults='undefined;undefined' result_type='void'>
</method>
<method name='requiredTypesFor' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:ViewProcessorFactory/private:requiredTypesFor' isStatic='false' isFinal='false' isOverride='false'  param_names='filter;type' param_types='robotlegs.bender.extensions.matching:ITypeFilter;Class' param_defaults='undefined;undefined' result_type='Vector$Class'>
</method>
<method name='runAllUnprocessors' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:ViewProcessorFactory/runAllUnprocessors' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 ]]></description>
<inheritDoc><![CDATA[]]></inheritDoc>
</method>
<method name='runProcess' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:ViewProcessorFactory/private:runProcess' isStatic='false' isFinal='false' isOverride='false'  param_names='view;type;mapping' param_types='Object;Class;robotlegs.bender.extensions.viewProcessorMap.dsl:IViewProcessorMapping' param_defaults='undefined;undefined;undefined' result_type='void'>
</method>
<method name='runProcessors' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:ViewProcessorFactory/runProcessors' isStatic='false' isFinal='false' isOverride='false'  param_names='view;type;processorMappings' param_types='Object;Class;Array' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<inheritDoc><![CDATA[]]></inheritDoc>
</method>
<method name='runUnprocessors' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:ViewProcessorFactory/runUnprocessors' isStatic='false' isFinal='false' isOverride='false'  param_names='view;type;processorMappings' param_types='Object;Class;Array' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<inheritDoc><![CDATA[]]></inheritDoc>
</method>
<method name='unmapTypeForFilterBinding' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:ViewProcessorFactory/private:unmapTypeForFilterBinding' isStatic='false' isFinal='false' isOverride='false'  param_names='filter;type;view' param_types='robotlegs.bender.extensions.matching:ITypeFilter;Class;Object' param_defaults='undefined;undefined;undefined' result_type='void'>
</method>
<field name='_injector' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:ViewProcessorFactory/private:_injector' type='robotlegs.bender.framework.api:IInjector' isStatic='false' isConst='false' >
</field>
<field name='_listenersByView' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:ViewProcessorFactory/private:_listenersByView' type='flash.utils:Dictionary' isStatic='false' isConst='false' defaultValue='unknown' >
</field>
<classRec name='ViewProcessorMap' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:ViewProcessorMap' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/viewProcessorMap/impl/ViewProcessorMap.as' namespace='robotlegs.bender.extensions.viewProcessorMap.impl' access='public' baseclass='Object' interfaces='robotlegs.bender.extensions.viewProcessorMap.api:IViewProcessorMap;robotlegs.bender.extensions.viewManager.api:IViewHandler' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 View Processor Map implementation
	 ]]></description>
<private><![CDATA[]]></private>
</classRec>
<method name='ViewProcessorMap' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:ViewProcessorMap/ViewProcessorMap' isStatic='false' isFinal='false' isOverride='false'  param_names='factory;handler' param_types='robotlegs.bender.extensions.viewProcessorMap.impl:IViewProcessorFactory;robotlegs.bender.extensions.viewProcessorMap.impl:IViewProcessorViewHandler' param_defaults='undefined;null' result_type='*'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='createMapper' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:ViewProcessorMap/private:createMapper' isStatic='false' isFinal='false' isOverride='false'  param_names='matcher' param_types='robotlegs.bender.extensions.matching:ITypeMatcher' param_defaults='undefined' result_type='robotlegs.bender.extensions.viewProcessorMap.dsl:IViewProcessorMapper'>
</method>
<method name='handleView' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:ViewProcessorMap/handleView' isStatic='false' isFinal='false' isOverride='false'  param_names='view;type' param_types='flash.display:DisplayObject;Class' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 
		 View handler method
		 ]]></description>
<param><![CDATA[view The view instance to handle
		 ]]></param>
<param><![CDATA[type The class of the view instance
		 ]]></param>
</method>
<method name='mapMatcher' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:ViewProcessorMap/mapMatcher' isStatic='false' isFinal='false' isOverride='false'  param_names='matcher' param_types='robotlegs.bender.extensions.matching:ITypeMatcher' param_defaults='undefined' result_type='robotlegs.bender.extensions.viewProcessorMap.dsl:IViewProcessorMapper'>
<description><![CDATA[
		 
		 Maps a matcher that will be tested against incoming items to be handled.
		 ]]></description>
<param><![CDATA[matcher The type or package matcher specifying the rules for matching.
		 ]]></param>
<return><![CDATA[the mapper so that you can continue the mapping.
		 ]]></return>
</method>
<method name='map' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:ViewProcessorMap/map' isStatic='false' isFinal='false' isOverride='false'  param_names='type' param_types='Class' param_defaults='undefined' result_type='robotlegs.bender.extensions.viewProcessorMap.dsl:IViewProcessorMapper'>
<description><![CDATA[
		 
		 Maps a type that will be tested against incoming items to be handled.
		 Under the hood this will create a TypeMatcher for this type.
		 ]]></description>
<param><![CDATA[type The class or interface to be matched against.
		 ]]></param>
<return><![CDATA[the mapper so that you can continue the mapping.
		 ]]></return>
</method>
<method name='process' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:ViewProcessorMap/process' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 
		 Processes an item directly. If the item matches any mapped matchers or types then it will be processed according to those mappings.
		 ]]></description>
<param><![CDATA[item The item to process.
		 ]]></param>
</method>
<method name='unmapMatcher' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:ViewProcessorMap/unmapMatcher' isStatic='false' isFinal='false' isOverride='false'  param_names='matcher' param_types='robotlegs.bender.extensions.matching:ITypeMatcher' param_defaults='undefined' result_type='robotlegs.bender.extensions.viewProcessorMap.dsl:IViewProcessorUnmapper'>
<description><![CDATA[
		 
		 Removes a mapping that was made against a matcher.
		 No error will be thrown if there isn't a mapping to remove.
		 ]]></description>
<param><![CDATA[matcher The type or package matcher specifying the rules for matching.
		 ]]></param>
<return><![CDATA[the unmapper so that you can continue the unmapping.
		 ]]></return>
</method>
<method name='unmap' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:ViewProcessorMap/unmap' isStatic='false' isFinal='false' isOverride='false'  param_names='type' param_types='Class' param_defaults='undefined' result_type='robotlegs.bender.extensions.viewProcessorMap.dsl:IViewProcessorUnmapper'>
<description><![CDATA[
		 
		 Removes a mapping that was made against a type.
		 No error will be thrown if there isn't a mapping to remove.
		 ]]></description>
<param><![CDATA[type The class or interface to be matched against.
		 ]]></param>
<return><![CDATA[the unmapper so that you can continue the unmapping.
		 ]]></return>
</method>
<method name='unprocess' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:ViewProcessorMap/unprocess' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 
		 Runs unprocess on relevant processors for an item if there are any.
		 ]]></description>
<param><![CDATA[item The item to unprocess.
		 ]]></param>
</method>
<field name='NULL_UNMAPPER' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:ViewProcessorMap/private:NULL_UNMAPPER' type='robotlegs.bender.extensions.viewProcessorMap.dsl:IViewProcessorUnmapper' isStatic='false' isConst='true' defaultValue='unknown' >
</field>
<field name='_handler' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:ViewProcessorMap/private:_handler' type='robotlegs.bender.extensions.viewProcessorMap.impl:IViewProcessorViewHandler' isStatic='false' isConst='false' >
</field>
<field name='_mappers' fullname='robotlegs.bender.extensions.viewProcessorMap.impl:ViewProcessorMap/private:_mappers' type='flash.utils:Dictionary' isStatic='false' isConst='true' defaultValue='unknown' >
</field>
<interfaceRec name='IViewProcessorMapper' fullname='robotlegs.bender.extensions.viewProcessorMap.dsl:IViewProcessorMapper' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/viewProcessorMap/dsl/IViewProcessorMapper.as' namespace='robotlegs.bender.extensions.viewProcessorMap.dsl' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Maps a matcher to a process
	 ]]></description>
</interfaceRec>
<method name='toInjection' fullname='robotlegs.bender.extensions.viewProcessorMap.dsl:IViewProcessorMapper/robotlegs.bender.extensions.viewProcessorMap.dsl:IViewProcessorMapper:toInjection' isStatic='false' isFinal='false' isOverride='false'  result_type='robotlegs.bender.extensions.viewProcessorMap.dsl:IViewProcessorMappingConfig'>
<description><![CDATA[
		 Maps the type or matcher for injection.
		 ]]></description>
<return><![CDATA[the mapping config so that you can specify further details.
		 ]]></return>
</method>
<method name='toNoProcess' fullname='robotlegs.bender.extensions.viewProcessorMap.dsl:IViewProcessorMapper/robotlegs.bender.extensions.viewProcessorMap.dsl:IViewProcessorMapper:toNoProcess' isStatic='false' isFinal='false' isOverride='false'  result_type='robotlegs.bender.extensions.viewProcessorMap.dsl:IViewProcessorMappingConfig'>
<description><![CDATA[
		 Maps the type or matcher to a nothing-happens process, so that you can make use of guards and hooks.
		 ]]></description>
<return><![CDATA[the mapping config so that you can specify further details.
		 ]]></return>
</method>
<method name='toProcess' fullname='robotlegs.bender.extensions.viewProcessorMap.dsl:IViewProcessorMapper/robotlegs.bender.extensions.viewProcessorMap.dsl:IViewProcessorMapper:toProcess' isStatic='false' isFinal='false' isOverride='false'  param_names='processClassOrInstance' param_types='*' param_defaults='undefined' result_type='robotlegs.bender.extensions.viewProcessorMap.dsl:IViewProcessorMappingConfig'>
<description><![CDATA[
		 Specifies the process to be mapped against the type or matcher.
		 ]]></description>
<param><![CDATA[processClassOrInstance An instance of a class, or a class implementing the following methods:
		 process(view:ISkinnable, class:Class, injector:Injector):void;
		 unprocess(view:ISkinnable, class:Class, injector:Injector):void;
		 ]]></param>
<return><![CDATA[the mapping config so that you can specify further details.
		 ]]></return>
</method>
<interfaceRec name='IViewProcessorMappingConfig' fullname='robotlegs.bender.extensions.viewProcessorMap.dsl:IViewProcessorMappingConfig' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/viewProcessorMap/dsl/IViewProcessorMappingConfig.as' namespace='robotlegs.bender.extensions.viewProcessorMap.dsl' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 View Processor Mapping Configuration
	 ]]></description>
</interfaceRec>
<method name='withGuards' fullname='robotlegs.bender.extensions.viewProcessorMap.dsl:IViewProcessorMappingConfig/robotlegs.bender.extensions.viewProcessorMap.dsl:IViewProcessorMappingConfig:withGuards' isStatic='false' isFinal='false' isOverride='false'  param_names='guards' param_types='restParam' param_defaults='undefined' result_type='robotlegs.bender.extensions.viewProcessorMap.dsl:IViewProcessorMappingConfig'>
<description><![CDATA[
		 A list of guards to consult before allowing a view to be processed
		 ]]></description>
<param><![CDATA[guards A list of guards
		 ]]></param>
<return><![CDATA[Self
		 ]]></return>
</method>
<method name='withHooks' fullname='robotlegs.bender.extensions.viewProcessorMap.dsl:IViewProcessorMappingConfig/robotlegs.bender.extensions.viewProcessorMap.dsl:IViewProcessorMappingConfig:withHooks' isStatic='false' isFinal='false' isOverride='false'  param_names='hooks' param_types='restParam' param_defaults='undefined' result_type='robotlegs.bender.extensions.viewProcessorMap.dsl:IViewProcessorMappingConfig'>
<description><![CDATA[
		 A list of hooks to run before processing a view
		 ]]></description>
<param><![CDATA[hooks A list of hooks
		 ]]></param>
<return><![CDATA[Self
		 ]]></return>
</method>
<interfaceRec name='IViewProcessorUnmapper' fullname='robotlegs.bender.extensions.viewProcessorMap.dsl:IViewProcessorUnmapper' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/viewProcessorMap/dsl/IViewProcessorUnmapper.as' namespace='robotlegs.bender.extensions.viewProcessorMap.dsl' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Unmaps a view processor
	 ]]></description>
</interfaceRec>
<method name='fromAll' fullname='robotlegs.bender.extensions.viewProcessorMap.dsl:IViewProcessorUnmapper/robotlegs.bender.extensions.viewProcessorMap.dsl:IViewProcessorUnmapper:fromAll' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 Unmaps all processors from this matcher
		 ]]></description>
</method>
<method name='fromInjection' fullname='robotlegs.bender.extensions.viewProcessorMap.dsl:IViewProcessorUnmapper/robotlegs.bender.extensions.viewProcessorMap.dsl:IViewProcessorUnmapper:fromInjection' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 Unmaps an injection processor
		 ]]></description>
</method>
<method name='fromNoProcess' fullname='robotlegs.bender.extensions.viewProcessorMap.dsl:IViewProcessorUnmapper/robotlegs.bender.extensions.viewProcessorMap.dsl:IViewProcessorUnmapper:fromNoProcess' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 Unmaps a matcher
		 ]]></description>
</method>
<method name='fromProcess' fullname='robotlegs.bender.extensions.viewProcessorMap.dsl:IViewProcessorUnmapper/robotlegs.bender.extensions.viewProcessorMap.dsl:IViewProcessorUnmapper:fromProcess' isStatic='false' isFinal='false' isOverride='false'  param_names='processorClassOrInstance' param_types='*' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Unmaps a processor from a matcher
		 ]]></description>
<param><![CDATA[processorClassOrInstance
		 ]]></param>
</method>
<interfaceRec name='IViewProcessorMapping' fullname='robotlegs.bender.extensions.viewProcessorMap.dsl:IViewProcessorMapping' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/viewProcessorMap/dsl/IViewProcessorMapping.as' namespace='robotlegs.bender.extensions.viewProcessorMap.dsl' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 View Processor Mapping
	 ]]></description>
</interfaceRec>
<method name='guards' fullname='robotlegs.bender.extensions.viewProcessorMap.dsl:IViewProcessorMapping/robotlegs.bender.extensions.viewProcessorMap.dsl:IViewProcessorMapping:guards/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
		 A list of guards to consult before allowing a view to be processed
		 ]]></description>
</method>
<method name='hooks' fullname='robotlegs.bender.extensions.viewProcessorMap.dsl:IViewProcessorMapping/robotlegs.bender.extensions.viewProcessorMap.dsl:IViewProcessorMapping:hooks/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
		 A list of hooks to run before processing a view
		 ]]></description>
</method>
<method name='matcher' fullname='robotlegs.bender.extensions.viewProcessorMap.dsl:IViewProcessorMapping/robotlegs.bender.extensions.viewProcessorMap.dsl:IViewProcessorMapping:matcher/get' isStatic='false' isFinal='false' isOverride='false'  result_type='robotlegs.bender.extensions.matching:ITypeFilter'>
<description><![CDATA[
		 The matcher for this mapping
		 ]]></description>
</method>
<method name='processorClass' fullname='robotlegs.bender.extensions.viewProcessorMap.dsl:IViewProcessorMapping/robotlegs.bender.extensions.viewProcessorMap.dsl:IViewProcessorMapping:processorClass/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Class'>
<description><![CDATA[
		 The processor class for this mapping
		 ]]></description>
</method>
<method name='processor' fullname='robotlegs.bender.extensions.viewProcessorMap.dsl:IViewProcessorMapping/robotlegs.bender.extensions.viewProcessorMap.dsl:IViewProcessorMapping:processor/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Object'>
<description><![CDATA[
		 The processor for this mapping
		 ]]></description>
</method>
<method name='processor' fullname='robotlegs.bender.extensions.viewProcessorMap.dsl:IViewProcessorMapping/robotlegs.bender.extensions.viewProcessorMap.dsl:IViewProcessorMapping:processor/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Sets the processor for this mapping
		 ]]></description>
</method>
<interfaceRec name='IEventMap' fullname='robotlegs.bender.extensions.localEventMap.api:IEventMap' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/localEventMap/api/IEventMap.as' namespace='robotlegs.bender.extensions.localEventMap.api' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The Event Map keeps track of listeners and provides the ability
	 to unregister all listeners with a single method call.
	 ]]></description>
</interfaceRec>
<method name='mapListener' fullname='robotlegs.bender.extensions.localEventMap.api:IEventMap/robotlegs.bender.extensions.localEventMap.api:IEventMap:mapListener' isStatic='false' isFinal='false' isOverride='false'  param_names='dispatcher;type;listener;eventClass;useCapture;priority;useWeakReference' param_types='flash.events:IEventDispatcher;String;Function;Class;Boolean;int;Boolean' param_defaults='undefined;undefined;undefined;null;false;0;true' result_type='void'>
<description><![CDATA[
		 The same as calling <code>addEventListener</code> directly on the <code>IEventDispatcher</code>,
		 but keeps a list of listeners for easy (usually automatic) removal.
		 		 ]]></description>
<param><![CDATA[dispatcher The <code>IEventDispatcher</code> to listen to
		 ]]></param>
<param><![CDATA[type The <code>Event</code> type to listen for
		 ]]></param>
<param><![CDATA[listener The <code>Event</code> handler
		 ]]></param>
<param><![CDATA[eventClass Optional Event class for a stronger mapping. Defaults to <code>flash.events.Event</code>.
		 ]]></param>
<param><![CDATA[useCapture
		 ]]></param>
<param><![CDATA[priority
		 ]]></param>
<param><![CDATA[useWeakReference
		 ]]></param>
</method>
<method name='resume' fullname='robotlegs.bender.extensions.localEventMap.api:IEventMap/robotlegs.bender.extensions.localEventMap.api:IEventMap:resume' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 Resumes all listeners registered through <code>mapListener</code>
		 ]]></description>
</method>
<method name='suspend' fullname='robotlegs.bender.extensions.localEventMap.api:IEventMap/robotlegs.bender.extensions.localEventMap.api:IEventMap:suspend' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 Suspends all listeners registered through <code>mapListener</code>
		 ]]></description>
</method>
<method name='unmapListener' fullname='robotlegs.bender.extensions.localEventMap.api:IEventMap/robotlegs.bender.extensions.localEventMap.api:IEventMap:unmapListener' isStatic='false' isFinal='false' isOverride='false'  param_names='dispatcher;type;listener;eventClass;useCapture' param_types='flash.events:IEventDispatcher;String;Function;Class;Boolean' param_defaults='undefined;undefined;undefined;null;false' result_type='void'>
<description><![CDATA[
		 The same as calling <code>removeEventListener</code> directly on the <code>IEventDispatcher</code>,
		 but updates our local list of listeners.
		 		 ]]></description>
<param><![CDATA[dispatcher The <code>IEventDispatcher</code>
		 ]]></param>
<param><![CDATA[type The <code>Event</code> type
		 ]]></param>
<param><![CDATA[listener The <code>Event</code> handler
		 ]]></param>
<param><![CDATA[eventClass Optional Event class for a stronger mapping. Defaults to <code>flash.events.Event</code>.
		 ]]></param>
<param><![CDATA[useCapture
		 ]]></param>
</method>
<method name='unmapListeners' fullname='robotlegs.bender.extensions.localEventMap.api:IEventMap/robotlegs.bender.extensions.localEventMap.api:IEventMap:unmapListeners' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 Removes all listeners registered through <code>mapListener</code>
		 ]]></description>
</method>
<interfaceRec name='IMediatorMapper' fullname='robotlegs.bender.extensions.mediatorMap.dsl:IMediatorMapper' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/mediatorMap/dsl/IMediatorMapper.as' namespace='robotlegs.bender.extensions.mediatorMap.dsl' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Maps a matcher to a concrete Mediator class
	 ]]></description>
</interfaceRec>
<method name='toMediator' fullname='robotlegs.bender.extensions.mediatorMap.dsl:IMediatorMapper/robotlegs.bender.extensions.mediatorMap.dsl:IMediatorMapper:toMediator' isStatic='false' isFinal='false' isOverride='false'  param_names='mediatorClass' param_types='Class' param_defaults='undefined' result_type='robotlegs.bender.extensions.mediatorMap.dsl:IMediatorConfigurator'>
<description><![CDATA[
		 Maps a matcher to a concrete Mediator class
		 ]]></description>
<param><![CDATA[mediatorClass The concrete mediator class
		 ]]></param>
<return><![CDATA[Mapping configurator
		 ]]></return>
</method>
<interfaceRec name='IMediatorConfigurator' fullname='robotlegs.bender.extensions.mediatorMap.dsl:IMediatorConfigurator' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/mediatorMap/dsl/IMediatorConfigurator.as' namespace='robotlegs.bender.extensions.mediatorMap.dsl' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Configures a mediator mapping
	 ]]></description>
</interfaceRec>
<method name='autoRemove' fullname='robotlegs.bender.extensions.mediatorMap.dsl:IMediatorConfigurator/robotlegs.bender.extensions.mediatorMap.dsl:IMediatorConfigurator:autoRemove' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='Boolean' param_defaults='true' result_type='robotlegs.bender.extensions.mediatorMap.dsl:IMediatorConfigurator'>
<description><![CDATA[
		 Should the mediator be removed when the mediated item looses scope?
		 		 <p>Usually this would be when the mediated item is a Display Object
		 and it leaves the stage.</p>
		 		 ]]></description>
<param><![CDATA[value Boolean
		 ]]></param>
<return><![CDATA[Self
		 ]]></return>
</method>
<method name='withGuards' fullname='robotlegs.bender.extensions.mediatorMap.dsl:IMediatorConfigurator/robotlegs.bender.extensions.mediatorMap.dsl:IMediatorConfigurator:withGuards' isStatic='false' isFinal='false' isOverride='false'  param_names='guards' param_types='restParam' param_defaults='undefined' result_type='robotlegs.bender.extensions.mediatorMap.dsl:IMediatorConfigurator'>
<description><![CDATA[
		 Guards to check before allowing a mediator to be created
		 ]]></description>
<param><![CDATA[guards Guards
		 ]]></param>
<return><![CDATA[Self
		 ]]></return>
</method>
<method name='withHooks' fullname='robotlegs.bender.extensions.mediatorMap.dsl:IMediatorConfigurator/robotlegs.bender.extensions.mediatorMap.dsl:IMediatorConfigurator:withHooks' isStatic='false' isFinal='false' isOverride='false'  param_names='hooks' param_types='restParam' param_defaults='undefined' result_type='robotlegs.bender.extensions.mediatorMap.dsl:IMediatorConfigurator'>
<description><![CDATA[
		 Hooks to run before a mediator is created
		 ]]></description>
<param><![CDATA[hooks Hooks
		 ]]></param>
<return><![CDATA[Self
		 ]]></return>
</method>
<interfaceRec name='IMediatorUnmapper' fullname='robotlegs.bender.extensions.mediatorMap.dsl:IMediatorUnmapper' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/mediatorMap/dsl/IMediatorUnmapper.as' namespace='robotlegs.bender.extensions.mediatorMap.dsl' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Unmaps a Mediator
	 ]]></description>
</interfaceRec>
<method name='fromAll' fullname='robotlegs.bender.extensions.mediatorMap.dsl:IMediatorUnmapper/robotlegs.bender.extensions.mediatorMap.dsl:IMediatorUnmapper:fromAll' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 Unmaps all mediator mappings for this matcher
		 ]]></description>
</method>
<method name='fromMediator' fullname='robotlegs.bender.extensions.mediatorMap.dsl:IMediatorUnmapper/robotlegs.bender.extensions.mediatorMap.dsl:IMediatorUnmapper:fromMediator' isStatic='false' isFinal='false' isOverride='false'  param_names='mediatorClass' param_types='Class' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Unmaps a mediator from this matcher
		 ]]></description>
<param><![CDATA[mediatorClass Mediator to unmap
		 ]]></param>
</method>
<interfaceRec name='ICommandMapper' fullname='robotlegs.bender.extensions.commandCenter.dsl:ICommandMapper' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/commandCenter/dsl/ICommandMapper.as' namespace='robotlegs.bender.extensions.commandCenter.dsl' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 ]]></description>
<private><![CDATA[]]></private>
</interfaceRec>
<method name='toCommand' fullname='robotlegs.bender.extensions.commandCenter.dsl:ICommandMapper/robotlegs.bender.extensions.commandCenter.dsl:ICommandMapper:toCommand' isStatic='false' isFinal='false' isOverride='false'  param_names='commandClass' param_types='Class' param_defaults='undefined' result_type='robotlegs.bender.extensions.commandCenter.dsl:ICommandConfigurator'>
<description><![CDATA[
		 Creates a command mapping
		 ]]></description>
<param><![CDATA[commandClass The Command Class to map
		 ]]></param>
<return><![CDATA[Mapping configurator
		 ]]></return>
</method>
<interfaceRec name='ICommandUnmapper' fullname='robotlegs.bender.extensions.commandCenter.dsl:ICommandUnmapper' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/commandCenter/dsl/ICommandUnmapper.as' namespace='robotlegs.bender.extensions.commandCenter.dsl' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 ]]></description>
<private><![CDATA[]]></private>
</interfaceRec>
<method name='fromAll' fullname='robotlegs.bender.extensions.commandCenter.dsl:ICommandUnmapper/robotlegs.bender.extensions.commandCenter.dsl:ICommandUnmapper:fromAll' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 Unmaps all commands from this trigger
		 ]]></description>
</method>
<method name='fromCommand' fullname='robotlegs.bender.extensions.commandCenter.dsl:ICommandUnmapper/robotlegs.bender.extensions.commandCenter.dsl:ICommandUnmapper:fromCommand' isStatic='false' isFinal='false' isOverride='false'  param_names='commandClass' param_types='Class' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Unmaps a Command
		 ]]></description>
<param><![CDATA[commandClass Command to unmap
		 ]]></param>
</method>
<interfaceRec name='ICommandConfigurator' fullname='robotlegs.bender.extensions.commandCenter.dsl:ICommandConfigurator' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/commandCenter/dsl/ICommandConfigurator.as' namespace='robotlegs.bender.extensions.commandCenter.dsl' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 ]]></description>
<private><![CDATA[]]></private>
</interfaceRec>
<method name='once' fullname='robotlegs.bender.extensions.commandCenter.dsl:ICommandConfigurator/robotlegs.bender.extensions.commandCenter.dsl:ICommandConfigurator:once' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='Boolean' param_defaults='true' result_type='robotlegs.bender.extensions.commandCenter.dsl:ICommandConfigurator'>
<description><![CDATA[
		 Should this command only run once?
		 ]]></description>
<param><![CDATA[value Toggle
		 ]]></param>
<return><![CDATA[Self
		 ]]></return>
</method>
<method name='withExecuteMethod' fullname='robotlegs.bender.extensions.commandCenter.dsl:ICommandConfigurator/robotlegs.bender.extensions.commandCenter.dsl:ICommandConfigurator:withExecuteMethod' isStatic='false' isFinal='false' isOverride='false'  param_names='name' param_types='String' param_defaults='undefined' result_type='robotlegs.bender.extensions.commandCenter.dsl:ICommandConfigurator'>
<description><![CDATA[
		 The "execute" method to invoke on the Command instance
		 ]]></description>
<param><![CDATA[name Method name
		 ]]></param>
<return><![CDATA[Self
		 ]]></return>
</method>
<method name='withGuards' fullname='robotlegs.bender.extensions.commandCenter.dsl:ICommandConfigurator/robotlegs.bender.extensions.commandCenter.dsl:ICommandConfigurator:withGuards' isStatic='false' isFinal='false' isOverride='false'  param_names='guards' param_types='restParam' param_defaults='undefined' result_type='robotlegs.bender.extensions.commandCenter.dsl:ICommandConfigurator'>
<description><![CDATA[
		 Guards to check before allowing a command to execute
		 ]]></description>
<param><![CDATA[guards Guards
		 ]]></param>
<return><![CDATA[Self
		 ]]></return>
</method>
<method name='withHooks' fullname='robotlegs.bender.extensions.commandCenter.dsl:ICommandConfigurator/robotlegs.bender.extensions.commandCenter.dsl:ICommandConfigurator:withHooks' isStatic='false' isFinal='false' isOverride='false'  param_names='hooks' param_types='restParam' param_defaults='undefined' result_type='robotlegs.bender.extensions.commandCenter.dsl:ICommandConfigurator'>
<description><![CDATA[
		 Hooks to run before command execution
		 ]]></description>
<param><![CDATA[hooks Hooks
		 ]]></param>
<return><![CDATA[Self
		 ]]></return>
</method>
<method name='withPayloadInjection' fullname='robotlegs.bender.extensions.commandCenter.dsl:ICommandConfigurator/robotlegs.bender.extensions.commandCenter.dsl:ICommandConfigurator:withPayloadInjection' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='Boolean' param_defaults='true' result_type='robotlegs.bender.extensions.commandCenter.dsl:ICommandConfigurator'>
<description><![CDATA[
		 Should the payload values be injected into the command instance?
		 ]]></description>
<param><![CDATA[value Toggle
		 ]]></param>
<return><![CDATA[Self
		 ]]></return>
</method>
<classRec name='EventRelay' fullname='robotlegs.bender.extensions.eventDispatcher.impl:EventRelay' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/eventDispatcher/impl/EventRelay.as' namespace='robotlegs.bender.extensions.eventDispatcher.impl' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Relays events from a source to a destination
	 ]]></description>
</classRec>
<method name='EventRelay' fullname='robotlegs.bender.extensions.eventDispatcher.impl:EventRelay/EventRelay' isStatic='false' isFinal='false' isOverride='false'  param_names='source;destination;types' param_types='flash.events:IEventDispatcher;flash.events:IEventDispatcher;Array' param_defaults='undefined;undefined;null' result_type='*'>
<description><![CDATA[
		 Relays events from the source to the destination
		 ]]></description>
<param><![CDATA[source Event Dispatcher
		 ]]></param>
<param><![CDATA[destination Event Dispatcher
		 ]]></param>
<param><![CDATA[types The list of event types to relay
		 ]]></param>
</method>
<method name='addListener' fullname='robotlegs.bender.extensions.eventDispatcher.impl:EventRelay/private:addListener' isStatic='false' isFinal='false' isOverride='false'  param_names='type' param_types='String' param_defaults='undefined' result_type='void'>
</method>
<method name='addListeners' fullname='robotlegs.bender.extensions.eventDispatcher.impl:EventRelay/private:addListeners' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='addType' fullname='robotlegs.bender.extensions.eventDispatcher.impl:EventRelay/addType' isStatic='false' isFinal='false' isOverride='false'  param_names='eventType' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Add a new event type to relay
		 ]]></description>
<param><![CDATA[eventType
		 ]]></param>
</method>
<method name='removeListener' fullname='robotlegs.bender.extensions.eventDispatcher.impl:EventRelay/private:removeListener' isStatic='false' isFinal='false' isOverride='false'  param_names='type' param_types='String' param_defaults='undefined' result_type='void'>
</method>
<method name='removeListeners' fullname='robotlegs.bender.extensions.eventDispatcher.impl:EventRelay/private:removeListeners' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='removeType' fullname='robotlegs.bender.extensions.eventDispatcher.impl:EventRelay/removeType' isStatic='false' isFinal='false' isOverride='false'  param_names='eventType' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Remove a relay event type
		 ]]></description>
<param><![CDATA[eventType
		 ]]></param>
</method>
<method name='start' fullname='robotlegs.bender.extensions.eventDispatcher.impl:EventRelay/start' isStatic='false' isFinal='false' isOverride='false'  result_type='robotlegs.bender.extensions.eventDispatcher.impl:EventRelay'>
<description><![CDATA[
		 Start relaying events
		 ]]></description>
<return><![CDATA[Self
		 ]]></return>
</method>
<method name='stop' fullname='robotlegs.bender.extensions.eventDispatcher.impl:EventRelay/stop' isStatic='false' isFinal='false' isOverride='false'  result_type='robotlegs.bender.extensions.eventDispatcher.impl:EventRelay'>
<description><![CDATA[
		 Stop relaying events
		 ]]></description>
<return><![CDATA[Self
		 ]]></return>
</method>
<field name='_active' fullname='robotlegs.bender.extensions.eventDispatcher.impl:EventRelay/private:_active' type='Boolean' isStatic='false' isConst='false' >
</field>
<field name='_destination' fullname='robotlegs.bender.extensions.eventDispatcher.impl:EventRelay/private:_destination' type='flash.events:IEventDispatcher' isStatic='false' isConst='false' >
</field>
<field name='_source' fullname='robotlegs.bender.extensions.eventDispatcher.impl:EventRelay/private:_source' type='flash.events:IEventDispatcher' isStatic='false' isConst='false' >
</field>
<field name='_types' fullname='robotlegs.bender.extensions.eventDispatcher.impl:EventRelay/private:_types' type='Array' isStatic='false' isConst='false' >
</field>
<classRec name='LifecycleEventRelay' fullname='robotlegs.bender.extensions.eventDispatcher.impl:LifecycleEventRelay' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/eventDispatcher/impl/LifecycleEventRelay.as' namespace='robotlegs.bender.extensions.eventDispatcher.impl' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 ]]></description>
<private><![CDATA[]]></private>
</classRec>
<method name='LifecycleEventRelay' fullname='robotlegs.bender.extensions.eventDispatcher.impl:LifecycleEventRelay/LifecycleEventRelay' isStatic='false' isFinal='false' isOverride='false'  param_names='source;destination' param_types='flash.events:IEventDispatcher;flash.events:IEventDispatcher' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='destroy' fullname='robotlegs.bender.extensions.eventDispatcher.impl:LifecycleEventRelay/destroy' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='TYPES' fullname='robotlegs.bender.extensions.eventDispatcher.impl:LifecycleEventRelay/private:TYPES' type='Array' isStatic='true' isConst='true' defaultValue='unknown' >
</field>
<field name='_relay' fullname='robotlegs.bender.extensions.eventDispatcher.impl:LifecycleEventRelay/private:_relay' type='robotlegs.bender.extensions.eventDispatcher.impl:EventRelay' isStatic='false' isConst='false' >
</field>
<method name='applyHooks' fullname='robotlegs.bender.framework.impl:applyHooks' isStatic='false' isFinal='false' isOverride='false'  param_names='hooks;injector' param_types='Array;robotlegs.bender.framework.api:IInjector' param_defaults='undefined;null' result_type='void'>
<description><![CDATA[
	 <p>A hook can be a function, object or class.</p>
	 	 <p>When an object is passed it is expected to expose a "hook" method.</p>
	 	 <p>When a class is passed, an instance of that class will be instantiated and called.
	 If an injector is provided the instance will be created using that injector,
	 otherwise the instance will be created manually.</p>
	 	 ]]></description>
<param><![CDATA[hooks An array of hooks
	 ]]></param>
<param><![CDATA[injector An optional Injector
	 ]]></param>
</method>
<method name='guardsApprove' fullname='robotlegs.bender.framework.impl:guardsApprove' isStatic='false' isFinal='false' isOverride='false'  param_names='guards;injector' param_types='Array;robotlegs.bender.framework.api:IInjector' param_defaults='undefined;null' result_type='Boolean'>
<description><![CDATA[
	 <p>A guard can be a function, object or class.</p>
	 	 <p>When a function is provided it is expected to return a Boolean when called.</p>
	 	 <p>When an object is provided it is expected to expose an "approve" method
	 that returns a Boolean.</p>
	 	 <p>When a class is provided, an instance of that class will be instantiated and tested.
	 If an injector is provided the instance will be created using that injector,
	 otherwise the instance will be created manually.</p>
	 	 ]]></description>
<param><![CDATA[guards An array of guards
	 ]]></param>
<param><![CDATA[injector An optional Injector
	 	 ]]></param>
<return><![CDATA[A Boolean value of false if any guard returns false
	 ]]></return>
</method>
<method name='safelyCallBack' fullname='robotlegs.bender.framework.impl:safelyCallBack' isStatic='false' isFinal='false' isOverride='false'  param_names='callback;error;message' param_types='Function;Object;Object' param_defaults='undefined;null;null' result_type='void'>
<description><![CDATA[
	 <p>Helper function to call any of the 3 forms of eventual callback:</p>
	 	 <code>(), (error) and (error, message)</code>
	 	 <p>NOTE: This helper will not handle null callbacks. You should check
	 if the callback is null from the calling location:</p>
	 	 <code>callback &amp;&amp; safelyCallBack(callback, error, message);</code>
	 	 <p>This prevents the overhead of calling safelyCallBack()
	 when there is no callback to call. Likewise it reduces the overhead
	 of a null check in safelyCallBack().</p>
	 	 <p>QUESTION: Is this too harsh? Should we protect from null?</p>
	 	 ]]></description>
<param><![CDATA[callback The actual callback
	 ]]></param>
<param><![CDATA[error An optional error
	 ]]></param>
<param><![CDATA[message An optional message
	 ]]></param>
</method>
<classRec name='ObjectProcessor' fullname='robotlegs.bender.framework.impl:ObjectProcessor' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/framework/impl/ObjectProcessor.as' namespace='robotlegs.bender.framework.impl' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Robotlegs object processor
	 	 ]]></description>
<private><![CDATA[]]></private>
</classRec>
<method name='addObjectHandler' fullname='robotlegs.bender.framework.impl:ObjectProcessor/addObjectHandler' isStatic='false' isFinal='false' isOverride='false'  param_names='matcher;handler' param_types='robotlegs.bender.framework.api:IMatcher;Function' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 Add a handler to process objects that match a given matcher.
		 ]]></description>
<param><![CDATA[matcher The matcher
		 ]]></param>
<param><![CDATA[handler The handler function
		 ]]></param>
</method>
<method name='processObject' fullname='robotlegs.bender.framework.impl:ObjectProcessor/processObject' isStatic='false' isFinal='false' isOverride='false'  param_names='object' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Process an object by running it through all registered handlers
		 ]]></description>
<param><![CDATA[object The object instance to process.
		 ]]></param>
</method>
<field name='_handlers' fullname='robotlegs.bender.framework.impl:ObjectProcessor/private:_handlers' type='Array' isStatic='false' isConst='true' defaultValue='unknown' >
</field>
<classRec name='UID' fullname='robotlegs.bender.framework.impl:UID' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/framework/impl/UID.as' namespace='robotlegs.bender.framework.impl' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Utility for generating unique object IDs
	 ]]></description>
</classRec>
<method name='create' fullname='robotlegs.bender.framework.impl:UID/create' isStatic='true' isFinal='false' isOverride='false'  param_names='source' param_types='*' param_defaults='null' result_type='String'>
<description><![CDATA[
		 Generates a UID for a given source object or class
		 ]]></description>
<param><![CDATA[source The source object or class
		 ]]></param>
<return><![CDATA[Generated UID
		 ]]></return>
</method>
<field name='_i' fullname='robotlegs.bender.framework.impl:UID/private:_i' type='uint' isStatic='true' isConst='false' >
</field>
<classRec name='Logger' fullname='robotlegs.bender.framework.impl:Logger' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/framework/impl/Logger.as' namespace='robotlegs.bender.framework.impl' access='public' baseclass='Object' interfaces='robotlegs.bender.framework.api:ILogger' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Default Robotlegs logger
	 	 ]]></description>
<private><![CDATA[]]></private>
</classRec>
<method name='Logger' fullname='robotlegs.bender.framework.impl:Logger/Logger' isStatic='false' isFinal='false' isOverride='false'  param_names='source;target' param_types='Object;robotlegs.bender.framework.api:ILogTarget' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[
		 Creates a new logger
		 ]]></description>
<param><![CDATA[source The log source object
		 ]]></param>
<param><![CDATA[target The log target
		 ]]></param>
</method>
<method name='debug' fullname='robotlegs.bender.framework.impl:Logger/debug' isStatic='false' isFinal='false' isOverride='false'  param_names='message;params' param_types='*;Array' param_defaults='undefined;null' result_type='void'>
<description><![CDATA[
		 
		 Logs a message for debug purposes
		 ]]></description>
<param><![CDATA[message Message to log
		 ]]></param>
<param><![CDATA[params Message parameters
		 ]]></param>
</method>
<method name='error' fullname='robotlegs.bender.framework.impl:Logger/error' isStatic='false' isFinal='false' isOverride='false'  param_names='message;params' param_types='*;Array' param_defaults='undefined;null' result_type='void'>
<description><![CDATA[
		 
		 Logs an error message
		 ]]></description>
<param><![CDATA[message Message to log
		 ]]></param>
<param><![CDATA[params Message parameters
		 ]]></param>
</method>
<method name='fatal' fullname='robotlegs.bender.framework.impl:Logger/fatal' isStatic='false' isFinal='false' isOverride='false'  param_names='message;params' param_types='*;Array' param_defaults='undefined;null' result_type='void'>
<description><![CDATA[
		 
		 Logs a fatal error message
		 ]]></description>
<param><![CDATA[message Message to log
		 ]]></param>
<param><![CDATA[params Message parameters
		 ]]></param>
</method>
<method name='info' fullname='robotlegs.bender.framework.impl:Logger/info' isStatic='false' isFinal='false' isOverride='false'  param_names='message;params' param_types='*;Array' param_defaults='undefined;null' result_type='void'>
<description><![CDATA[
		 
		 Logs a message for notification purposes
		 ]]></description>
<param><![CDATA[message Message to log
		 ]]></param>
<param><![CDATA[params Message parameters
		 ]]></param>
</method>
<method name='warn' fullname='robotlegs.bender.framework.impl:Logger/warn' isStatic='false' isFinal='false' isOverride='false'  param_names='message;params' param_types='*;Array' param_defaults='undefined;null' result_type='void'>
<description><![CDATA[
		 
		 Logs a warning message
		 ]]></description>
<param><![CDATA[message Message to log
		 ]]></param>
<param><![CDATA[params Message parameters
		 ]]></param>
</method>
<field name='_source' fullname='robotlegs.bender.framework.impl:Logger/private:_source' type='Object' isStatic='false' isConst='false' >
</field>
<field name='_target' fullname='robotlegs.bender.framework.impl:Logger/private:_target' type='robotlegs.bender.framework.api:ILogTarget' isStatic='false' isConst='false' >
</field>
<classRec name='Pin' fullname='robotlegs.bender.framework.impl:Pin' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/framework/impl/Pin.as' namespace='robotlegs.bender.framework.impl' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Pins objects in memory
	 	 ]]></description>
<private><![CDATA[]]></private>
</classRec>
<method name='Pin' fullname='robotlegs.bender.framework.impl:Pin/Pin' isStatic='false' isFinal='false' isOverride='false'  param_names='dispatcher' param_types='flash.events:IEventDispatcher' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='detain' fullname='robotlegs.bender.framework.impl:Pin/detain' isStatic='false' isFinal='false' isOverride='false'  param_names='instance' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Pin an object in memory
		 ]]></description>
<param><![CDATA[instance Instance to pin
		 ]]></param>
</method>
<method name='releaseAll' fullname='robotlegs.bender.framework.impl:Pin/releaseAll' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 Removes all pins
		 ]]></description>
</method>
<method name='release' fullname='robotlegs.bender.framework.impl:Pin/release' isStatic='false' isFinal='false' isOverride='false'  param_names='instance' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Unpins an object
		 ]]></description>
<param><![CDATA[instance Instance to unpin
		 ]]></param>
</method>
<field name='_dispatcher' fullname='robotlegs.bender.framework.impl:Pin/private:_dispatcher' type='flash.events:IEventDispatcher' isStatic='false' isConst='false' >
</field>
<field name='_instances' fullname='robotlegs.bender.framework.impl:Pin/private:_instances' type='flash.utils:Dictionary' isStatic='false' isConst='true' defaultValue='unknown' >
</field>
<classRec name='LogManager' fullname='robotlegs.bender.framework.impl:LogManager' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/framework/impl/LogManager.as' namespace='robotlegs.bender.framework.impl' access='public' baseclass='Object' interfaces='robotlegs.bender.framework.api:ILogTarget' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The log manager creates loggers and is itself a log target
	 	 ]]></description>
<private><![CDATA[]]></private>
</classRec>
<method name='addLogTarget' fullname='robotlegs.bender.framework.impl:LogManager/addLogTarget' isStatic='false' isFinal='false' isOverride='false'  param_names='target' param_types='robotlegs.bender.framework.api:ILogTarget' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Adds a custom log target
		 ]]></description>
<param><![CDATA[target Log target
		 ]]></param>
<return><![CDATA[this
		 ]]></return>
</method>
<method name='getLogger' fullname='robotlegs.bender.framework.impl:LogManager/getLogger' isStatic='false' isFinal='false' isOverride='false'  param_names='source' param_types='Object' param_defaults='undefined' result_type='robotlegs.bender.framework.api:ILogger'>
<description><![CDATA[
		 Retrieves a logger for a given source
		 ]]></description>
<param><![CDATA[source Logging source
		 ]]></param>
<return><![CDATA[Logger
		 ]]></return>
</method>
<method name='log' fullname='robotlegs.bender.framework.impl:LogManager/log' isStatic='false' isFinal='false' isOverride='false'  param_names='source;level;timestamp;message;params' param_types='Object;uint;int;String;Array' param_defaults='undefined;undefined;undefined;undefined;null' result_type='void'>
<description><![CDATA[
		 
		 Captures a log message
		 		 ]]></description>
<param><![CDATA[source The source of the log message
		 ]]></param>
<param><![CDATA[level The log level of the message
		 ]]></param>
<param><![CDATA[timestamp getTimer() timestamp
		 ]]></param>
<param><![CDATA[message The log message
		 ]]></param>
<param><![CDATA[params Message parameters
		 ]]></param>
</method>
<method name='logLevel' fullname='robotlegs.bender.framework.impl:LogManager/logLevel/get' isStatic='false' isFinal='false' isOverride='false'  result_type='uint'>
<description><![CDATA[
		 The current log level
		 ]]></description>
</method>
<method name='logLevel' fullname='robotlegs.bender.framework.impl:LogManager/logLevel/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='uint' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Sets the current log level
		 ]]></description>
</method>
<field name='_logLevel' fullname='robotlegs.bender.framework.impl:LogManager/private:_logLevel' type='uint' isStatic='false' isConst='false' defaultValue='16' >
</field>
<field name='_targets' fullname='robotlegs.bender.framework.impl:LogManager/private:_targets' type='Vector$robotlegs.bender.framework.api:ILogTarget' isStatic='false' isConst='true' defaultValue='unknown' >
</field>
<classRec name='MessageDispatcher' fullname='robotlegs.bender.framework.impl:MessageDispatcher' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/framework/impl/MessageDispatcher.as' namespace='robotlegs.bender.framework.impl' access='public' baseclass='Object' isFinal='true' isDynamic='false' >
<description><![CDATA[
	 Message Dispatcher implementation.
	 ]]></description>
</classRec>
<method name='addMessageHandler' fullname='robotlegs.bender.framework.impl:MessageDispatcher/addMessageHandler' isStatic='false' isFinal='false' isOverride='false'  param_names='message;handler' param_types='Object;Function' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 Registers a message handler with a MessageDispatcher.
		 ]]></description>
<param><![CDATA[message The interesting message
		 ]]></param>
<param><![CDATA[handler The handler function
		 ]]></param>
</method>
<method name='dispatchMessage' fullname='robotlegs.bender.framework.impl:MessageDispatcher/dispatchMessage' isStatic='false' isFinal='false' isOverride='false'  param_names='message;callback;reverse' param_types='Object;Function;Boolean' param_defaults='undefined;null;false' result_type='void'>
<description><![CDATA[
		 Dispatches a message into the message flow.
		 ]]></description>
<param><![CDATA[message The interesting message
		 ]]></param>
<param><![CDATA[callback The completion callback function
		 ]]></param>
<param><![CDATA[reverse Should handlers be called in reverse order
		 ]]></param>
</method>
<method name='hasMessageHandler' fullname='robotlegs.bender.framework.impl:MessageDispatcher/hasMessageHandler' isStatic='false' isFinal='false' isOverride='false'  param_names='message' param_types='Object' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 Checks whether the MessageDispatcher has any handlers registered for a specific message.
		 ]]></description>
<param><![CDATA[message The interesting message
		 ]]></param>
<return><![CDATA[A value of true if a handler of the specified message is registered; false otherwise.
		 ]]></return>
</method>
<method name='removeMessageHandler' fullname='robotlegs.bender.framework.impl:MessageDispatcher/removeMessageHandler' isStatic='false' isFinal='false' isOverride='false'  param_names='message;handler' param_types='Object;Function' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 Removes a message handler from a MessageDispatcher
		 ]]></description>
<param><![CDATA[message The interesting message
		 ]]></param>
<param><![CDATA[handler The handler function
		 ]]></param>
</method>
<field name='_handlers' fullname='robotlegs.bender.framework.impl:MessageDispatcher/private:_handlers' type='flash.utils:Dictionary' isStatic='false' isConst='true' defaultValue='unknown' >
</field>
<classRec name='LifecycleTransition' fullname='robotlegs.bender.framework.impl:LifecycleTransition' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/framework/impl/LifecycleTransition.as' namespace='robotlegs.bender.framework.impl' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Handles a lifecycle transition
	 	 ]]></description>
<private><![CDATA[]]></private>
</classRec>
<method name='LifecycleTransition' fullname='robotlegs.bender.framework.impl:LifecycleTransition/LifecycleTransition' isStatic='false' isFinal='false' isOverride='false'  param_names='name;lifecycle' param_types='String;robotlegs.bender.framework.impl:Lifecycle' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[
		 Creates a lifecycle transition
		 ]]></description>
<param><![CDATA[name The name of the transition
		 ]]></param>
<param><![CDATA[lifecycle The associated lifecycle instance
		 ]]></param>
</method>
<method name='addBeforeHandler' fullname='robotlegs.bender.framework.impl:LifecycleTransition/addBeforeHandler' isStatic='false' isFinal='false' isOverride='false'  param_names='handler' param_types='Function' param_defaults='undefined' result_type='robotlegs.bender.framework.impl:LifecycleTransition'>
<description><![CDATA[
		 A handler to run before the transition runs
		 ]]></description>
<param><![CDATA[handler Possibly asynchronous before handler
		 ]]></param>
<return><![CDATA[Self
		 ]]></return>
</method>
<method name='dispatch' fullname='robotlegs.bender.framework.impl:LifecycleTransition/private:dispatch' isStatic='false' isFinal='false' isOverride='false'  param_names='type' param_types='String' param_defaults='undefined' result_type='void'>
</method>
<method name='enter' fullname='robotlegs.bender.framework.impl:LifecycleTransition/enter' isStatic='false' isFinal='false' isOverride='false'  param_names='callback' param_types='Function' param_defaults='null' result_type='void'>
<description><![CDATA[
		 Attempts to enter the transition
		 ]]></description>
<param><![CDATA[callback Completion callback
		 ]]></param>
</method>
<method name='fromStates' fullname='robotlegs.bender.framework.impl:LifecycleTransition/fromStates' isStatic='false' isFinal='false' isOverride='false'  param_names='states' param_types='restParam' param_defaults='undefined' result_type='robotlegs.bender.framework.impl:LifecycleTransition'>
<description><![CDATA[
		 States that this transition is allowed to enter from
		 ]]></description>
<param><![CDATA[states Allowed states
		 ]]></param>
<return><![CDATA[Self
		 ]]></return>
</method>
<method name='inReverse' fullname='robotlegs.bender.framework.impl:LifecycleTransition/inReverse' isStatic='false' isFinal='false' isOverride='false'  result_type='robotlegs.bender.framework.impl:LifecycleTransition'>
<description><![CDATA[
		 Reverse the dispatch order of this transition
		 ]]></description>
<return><![CDATA[Self
		 ]]></return>
</method>
<method name='invalidTransition' fullname='robotlegs.bender.framework.impl:LifecycleTransition/private:invalidTransition' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
</method>
<method name='reportError' fullname='robotlegs.bender.framework.impl:LifecycleTransition/private:reportError' isStatic='false' isFinal='false' isOverride='false'  param_names='message;callbacks' param_types='Object;Array' param_defaults='undefined;null' result_type='void'>
</method>
<method name='setState' fullname='robotlegs.bender.framework.impl:LifecycleTransition/private:setState' isStatic='false' isFinal='false' isOverride='false'  param_names='state' param_types='String' param_defaults='undefined' result_type='void'>
</method>
<method name='toStates' fullname='robotlegs.bender.framework.impl:LifecycleTransition/toStates' isStatic='false' isFinal='false' isOverride='false'  param_names='transitionState;finalState' param_types='String;String' param_defaults='undefined;undefined' result_type='robotlegs.bender.framework.impl:LifecycleTransition'>
<description><![CDATA[
		 The states that this transition applies
		 ]]></description>
<param><![CDATA[transitionState The state that the target is put into during the transition
		 ]]></param>
<param><![CDATA[finalState The state that the target is put into after the transition
		 ]]></param>
<return><![CDATA[]]></return>
</method>
<method name='withEvents' fullname='robotlegs.bender.framework.impl:LifecycleTransition/withEvents' isStatic='false' isFinal='false' isOverride='false'  param_names='preTransitionEvent;transitionEvent;postTransitionEvent' param_types='String;String;String' param_defaults='undefined;undefined;undefined' result_type='robotlegs.bender.framework.impl:LifecycleTransition'>
<description><![CDATA[
		 The events that the lifecycle will dispatch
		 ]]></description>
<param><![CDATA[preTransitionEvent
		 ]]></param>
<param><![CDATA[transitionEvent
		 ]]></param>
<param><![CDATA[postTransitionEvent
		 ]]></param>
<return><![CDATA[Self
		 ]]></return>
</method>
<field name='_callbacks' fullname='robotlegs.bender.framework.impl:LifecycleTransition/private:_callbacks' type='Array' isStatic='false' isConst='true' defaultValue='unknown' >
</field>
<field name='_dispatcher' fullname='robotlegs.bender.framework.impl:LifecycleTransition/private:_dispatcher' type='robotlegs.bender.framework.impl:MessageDispatcher' isStatic='false' isConst='true' defaultValue='unknown' >
</field>
<field name='_finalState' fullname='robotlegs.bender.framework.impl:LifecycleTransition/private:_finalState' type='String' isStatic='false' isConst='false' >
</field>
<field name='_fromStates' fullname='robotlegs.bender.framework.impl:LifecycleTransition/private:_fromStates' type='Vector$String' isStatic='false' isConst='true' defaultValue='unknown' >
</field>
<field name='_lifecycle' fullname='robotlegs.bender.framework.impl:LifecycleTransition/private:_lifecycle' type='robotlegs.bender.framework.impl:Lifecycle' isStatic='false' isConst='false' >
</field>
<field name='_name' fullname='robotlegs.bender.framework.impl:LifecycleTransition/private:_name' type='String' isStatic='false' isConst='false' >
</field>
<field name='_postTransitionEvent' fullname='robotlegs.bender.framework.impl:LifecycleTransition/private:_postTransitionEvent' type='String' isStatic='false' isConst='false' >
</field>
<field name='_preTransitionEvent' fullname='robotlegs.bender.framework.impl:LifecycleTransition/private:_preTransitionEvent' type='String' isStatic='false' isConst='false' >
</field>
<field name='_reverse' fullname='robotlegs.bender.framework.impl:LifecycleTransition/private:_reverse' type='Boolean' isStatic='false' isConst='false' >
</field>
<field name='_transitionEvent' fullname='robotlegs.bender.framework.impl:LifecycleTransition/private:_transitionEvent' type='String' isStatic='false' isConst='false' >
</field>
<field name='_transitionState' fullname='robotlegs.bender.framework.impl:LifecycleTransition/private:_transitionState' type='String' isStatic='false' isConst='false' >
</field>
<classRec name='Lifecycle' fullname='robotlegs.bender.framework.impl:Lifecycle' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/framework/impl/Lifecycle.as' namespace='robotlegs.bender.framework.impl' access='public' baseclass='Object' interfaces='robotlegs.bender.framework.api:ILifecycle' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Default object lifecycle
	 	 ]]></description>
<private><![CDATA[]]></private>
<metadata>
	<Event owner='robotlegs.bender.framework.impl:Lifecycle' name='suspend' type='robotlegs.bender.framework.api.LifecycleEvent' >
	</Event>
</metadata>
<metadata>
	<Event owner='robotlegs.bender.framework.impl:Lifecycle' name='stateChange' type='robotlegs.bender.framework.api.LifecycleEvent' >
	</Event>
</metadata>
<metadata>
	<Event owner='robotlegs.bender.framework.impl:Lifecycle' name='resume' type='robotlegs.bender.framework.api.LifecycleEvent' >
	</Event>
</metadata>
<metadata>
	<Event owner='robotlegs.bender.framework.impl:Lifecycle' name='preSuspend' type='robotlegs.bender.framework.api.LifecycleEvent' >
	</Event>
</metadata>
<metadata>
	<Event owner='robotlegs.bender.framework.impl:Lifecycle' name='preResume' type='robotlegs.bender.framework.api.LifecycleEvent' >
	</Event>
</metadata>
<metadata>
	<Event owner='robotlegs.bender.framework.impl:Lifecycle' name='preInitialize' type='robotlegs.bender.framework.api.LifecycleEvent' >
	</Event>
</metadata>
<metadata>
	<Event owner='robotlegs.bender.framework.impl:Lifecycle' name='preDestroy' type='robotlegs.bender.framework.api.LifecycleEvent' >
	</Event>
</metadata>
<metadata>
	<Event owner='robotlegs.bender.framework.impl:Lifecycle' name='postSuspend' type='robotlegs.bender.framework.api.LifecycleEvent' >
	</Event>
</metadata>
<metadata>
	<Event owner='robotlegs.bender.framework.impl:Lifecycle' name='postResume' type='robotlegs.bender.framework.api.LifecycleEvent' >
	</Event>
</metadata>
<metadata>
	<Event owner='robotlegs.bender.framework.impl:Lifecycle' name='postInitialize' type='robotlegs.bender.framework.api.LifecycleEvent' >
	</Event>
</metadata>
<metadata>
	<Event owner='robotlegs.bender.framework.impl:Lifecycle' name='postDestroy' type='robotlegs.bender.framework.api.LifecycleEvent' >
	</Event>
</metadata>
<metadata>
	<Event owner='robotlegs.bender.framework.impl:Lifecycle' name='initialize' type='robotlegs.bender.framework.api.LifecycleEvent' >
	</Event>
</metadata>
<metadata>
	<Event owner='robotlegs.bender.framework.impl:Lifecycle' name='error' type='robotlegs.bender.framework.api.LifecycleEvent' >
	</Event>
</metadata>
<metadata>
	<Event owner='robotlegs.bender.framework.impl:Lifecycle' name='destroy' type='robotlegs.bender.framework.api.LifecycleEvent' >
	</Event>
</metadata>
</classRec>
<method name='Lifecycle' fullname='robotlegs.bender.framework.impl:Lifecycle/Lifecycle' isStatic='false' isFinal='false' isOverride='false'  param_names='target' param_types='Object' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 Creates a lifecycle for a given target object
		 ]]></description>
<param><![CDATA[target The target object
		 ]]></param>
</method>
<method name='addEventListener' fullname='robotlegs.bender.framework.impl:Lifecycle/addEventListener' isStatic='false' isFinal='false' isOverride='false'  param_names='type;listener;useCapture;priority;useWeakReference' param_types='String;Function;Boolean;int;Boolean' param_defaults='undefined;undefined;false;0;false' result_type='void'>
<description><![CDATA[
		 ]]></description>
<inheritDoc><![CDATA[]]></inheritDoc>
</method>
<method name='addReversedEventTypes' fullname='robotlegs.bender.framework.impl:Lifecycle/robotlegs.bender.framework.impl:addReversedEventTypes' isStatic='false' isFinal='false' isOverride='false'  param_names='types' param_types='restParam' param_defaults='undefined' result_type='void'>
</method>
<method name='afterDestroying' fullname='robotlegs.bender.framework.impl:Lifecycle/afterDestroying' isStatic='false' isFinal='false' isOverride='false'  param_names='handler' param_types='Function' param_defaults='undefined' result_type='robotlegs.bender.framework.api:ILifecycle'>
<description><![CDATA[
		 
		 A handler to run after destruction
		 		 <p>Note: The handler must be synchronous.</p>
		 ]]></description>
<param><![CDATA[handler Post-destroy handler
		 ]]></param>
<return><![CDATA[Self
		 ]]></return>
</method>
<method name='afterInitializing' fullname='robotlegs.bender.framework.impl:Lifecycle/afterInitializing' isStatic='false' isFinal='false' isOverride='false'  param_names='handler' param_types='Function' param_defaults='undefined' result_type='robotlegs.bender.framework.api:ILifecycle'>
<description><![CDATA[
		 
		 A handler to run after initialization
		 		 <p>Note: The handler must be synchronous.</p>
		 ]]></description>
<param><![CDATA[handler Post-initialize handler
		 ]]></param>
<return><![CDATA[Self
		 ]]></return>
</method>
<method name='afterResuming' fullname='robotlegs.bender.framework.impl:Lifecycle/afterResuming' isStatic='false' isFinal='false' isOverride='false'  param_names='handler' param_types='Function' param_defaults='undefined' result_type='robotlegs.bender.framework.api:ILifecycle'>
<description><![CDATA[
		 
		 A handler to run after resumption
		 		 <p>Note: The handler must be synchronous.</p>
		 ]]></description>
<param><![CDATA[handler Post-resume handler
		 ]]></param>
<return><![CDATA[Self
		 ]]></return>
</method>
<method name='afterSuspending' fullname='robotlegs.bender.framework.impl:Lifecycle/afterSuspending' isStatic='false' isFinal='false' isOverride='false'  param_names='handler' param_types='Function' param_defaults='undefined' result_type='robotlegs.bender.framework.api:ILifecycle'>
<description><![CDATA[
		 
		 A handler to run after suspension
		 		 <p>Note: The handler must be synchronous.</p>
		 ]]></description>
<param><![CDATA[handler Post-suspend handler
		 ]]></param>
<return><![CDATA[Self
		 ]]></return>
</method>
<method name='beforeDestroying' fullname='robotlegs.bender.framework.impl:Lifecycle/beforeDestroying' isStatic='false' isFinal='false' isOverride='false'  param_names='handler' param_types='Function' param_defaults='undefined' result_type='robotlegs.bender.framework.api:ILifecycle'>
<description><![CDATA[
		 
		 A handler to run before the target object is destroyed
		 		 <p>The handler can be asynchronous. See: readme-async</p>
		 		 ]]></description>
<param><![CDATA[handler Pre-destroy handler
		 ]]></param>
<return><![CDATA[Self
		 ]]></return>
</method>
<method name='beforeInitializing' fullname='robotlegs.bender.framework.impl:Lifecycle/beforeInitializing' isStatic='false' isFinal='false' isOverride='false'  param_names='handler' param_types='Function' param_defaults='undefined' result_type='robotlegs.bender.framework.api:ILifecycle'>
<description><![CDATA[
		 
		 A handler to run before the target object is initialized
		 		 <p>The handler can be asynchronous. See: readme-async</p>
		 		 ]]></description>
<param><![CDATA[handler Pre-initialize handler
		 ]]></param>
<return><![CDATA[Self
		 ]]></return>
</method>
<method name='beforeResuming' fullname='robotlegs.bender.framework.impl:Lifecycle/beforeResuming' isStatic='false' isFinal='false' isOverride='false'  param_names='handler' param_types='Function' param_defaults='undefined' result_type='robotlegs.bender.framework.api:ILifecycle'>
<description><![CDATA[
		 
		 A handler to run before the target object is resumed
		 		 <p>The handler can be asynchronous. See: readme-async</p>
		 		 ]]></description>
<param><![CDATA[handler Pre-resume handler
		 ]]></param>
<return><![CDATA[Self
		 ]]></return>
</method>
<method name='beforeSuspending' fullname='robotlegs.bender.framework.impl:Lifecycle/beforeSuspending' isStatic='false' isFinal='false' isOverride='false'  param_names='handler' param_types='Function' param_defaults='undefined' result_type='robotlegs.bender.framework.api:ILifecycle'>
<description><![CDATA[
		 
		 A handler to run before the target object is suspended
		 		 <p>The handler can be asynchronous. See: readme-async</p>
		 		 ]]></description>
<param><![CDATA[handler Pre-suspend handler
		 ]]></param>
<return><![CDATA[Self
		 ]]></return>
</method>
<method name='configureTransitions' fullname='robotlegs.bender.framework.impl:Lifecycle/private:configureTransitions' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='createSyncLifecycleListener' fullname='robotlegs.bender.framework.impl:Lifecycle/private:createSyncLifecycleListener' isStatic='false' isFinal='false' isOverride='false'  param_names='handler;once' param_types='Function;Boolean' param_defaults='undefined;false' result_type='Function'>
</method>
<method name='destroy' fullname='robotlegs.bender.framework.impl:Lifecycle/destroy' isStatic='false' isFinal='false' isOverride='false'  param_names='callback' param_types='Function' param_defaults='null' result_type='void'>
<description><![CDATA[
		 
		 Destroys an active lifecycle
		 ]]></description>
<param><![CDATA[callback Destruction callback
		 ]]></param>
</method>
<method name='dispatchEvent' fullname='robotlegs.bender.framework.impl:Lifecycle/dispatchEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 ]]></description>
<inheritDoc><![CDATA[]]></inheritDoc>
</method>
<method name='flipPriority' fullname='robotlegs.bender.framework.impl:Lifecycle/private:flipPriority' isStatic='false' isFinal='false' isOverride='false'  param_names='type;priority' param_types='String;int' param_defaults='undefined;undefined' result_type='int'>
</method>
<method name='hasEventListener' fullname='robotlegs.bender.framework.impl:Lifecycle/hasEventListener' isStatic='false' isFinal='false' isOverride='false'  param_names='type' param_types='String' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 ]]></description>
<inheritDoc><![CDATA[]]></inheritDoc>
</method>
<method name='initialize' fullname='robotlegs.bender.framework.impl:Lifecycle/initialize' isStatic='false' isFinal='false' isOverride='false'  param_names='callback' param_types='Function' param_defaults='null' result_type='void'>
<description><![CDATA[
		 
		 Initializes the lifecycle
		 ]]></description>
<param><![CDATA[callback Initialization callback
		 ]]></param>
</method>
<method name='removeEventListener' fullname='robotlegs.bender.framework.impl:Lifecycle/removeEventListener' isStatic='false' isFinal='false' isOverride='false'  param_names='type;listener;useCapture' param_types='String;Function;Boolean' param_defaults='undefined;undefined;false' result_type='void'>
<description><![CDATA[
		 ]]></description>
<inheritDoc><![CDATA[]]></inheritDoc>
</method>
<method name='reportError' fullname='robotlegs.bender.framework.impl:Lifecycle/private:reportError' isStatic='false' isFinal='false' isOverride='false'  param_names='message' param_types='String' param_defaults='undefined' result_type='void'>
</method>
<method name='resume' fullname='robotlegs.bender.framework.impl:Lifecycle/resume' isStatic='false' isFinal='false' isOverride='false'  param_names='callback' param_types='Function' param_defaults='null' result_type='void'>
<description><![CDATA[
		 
		 Resumes a suspended lifecycle
		 ]]></description>
<param><![CDATA[callback Resumption callback
		 ]]></param>
</method>
<method name='setCurrentState' fullname='robotlegs.bender.framework.impl:Lifecycle/robotlegs.bender.framework.impl:setCurrentState' isStatic='false' isFinal='false' isOverride='false'  param_names='state' param_types='String' param_defaults='undefined' result_type='void'>
</method>
<method name='suspend' fullname='robotlegs.bender.framework.impl:Lifecycle/suspend' isStatic='false' isFinal='false' isOverride='false'  param_names='callback' param_types='Function' param_defaults='null' result_type='void'>
<description><![CDATA[
		 
		 Suspends the lifecycle
		 ]]></description>
<param><![CDATA[callback Suspension callback
		 ]]></param>
</method>
<method name='whenDestroying' fullname='robotlegs.bender.framework.impl:Lifecycle/whenDestroying' isStatic='false' isFinal='false' isOverride='false'  param_names='handler' param_types='Function' param_defaults='undefined' result_type='robotlegs.bender.framework.api:ILifecycle'>
<description><![CDATA[
		 
		 A handler to run during destruction
		 		 <p>Note: The handler must be synchronous.</p>
		 ]]></description>
<param><![CDATA[handler Destruction handler
		 ]]></param>
<return><![CDATA[Self
		 ]]></return>
</method>
<method name='whenInitializing' fullname='robotlegs.bender.framework.impl:Lifecycle/whenInitializing' isStatic='false' isFinal='false' isOverride='false'  param_names='handler' param_types='Function' param_defaults='undefined' result_type='robotlegs.bender.framework.api:ILifecycle'>
<description><![CDATA[
		 
		 A handler to run during initialization
		 		 <p>Note: The handler must be synchronous.</p>
		 ]]></description>
<param><![CDATA[handler Initialization handler
		 ]]></param>
<return><![CDATA[Self
		 ]]></return>
</method>
<method name='whenResuming' fullname='robotlegs.bender.framework.impl:Lifecycle/whenResuming' isStatic='false' isFinal='false' isOverride='false'  param_names='handler' param_types='Function' param_defaults='undefined' result_type='robotlegs.bender.framework.api:ILifecycle'>
<description><![CDATA[
		 
		 A handler to run during resumption
		 		 <p>Note: The handler must be synchronous.</p>
		 ]]></description>
<param><![CDATA[handler Resumption handler
		 ]]></param>
<return><![CDATA[Self
		 ]]></return>
</method>
<method name='whenSuspending' fullname='robotlegs.bender.framework.impl:Lifecycle/whenSuspending' isStatic='false' isFinal='false' isOverride='false'  param_names='handler' param_types='Function' param_defaults='undefined' result_type='robotlegs.bender.framework.api:ILifecycle'>
<description><![CDATA[
		 
		 A handler to run during suspension
		 		 <p>Note: The handler must be synchronous.</p>
		 ]]></description>
<param><![CDATA[handler Suspension handler
		 ]]></param>
<return><![CDATA[Self
		 ]]></return>
</method>
<method name='willTrigger' fullname='robotlegs.bender.framework.impl:Lifecycle/willTrigger' isStatic='false' isFinal='false' isOverride='false'  param_names='type' param_types='String' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 ]]></description>
<inheritDoc><![CDATA[]]></inheritDoc>
</method>
<method name='active' fullname='robotlegs.bender.framework.impl:Lifecycle/active/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 
		 Is this object currently active?
		 ]]></description>
</method>
<method name='destroyed' fullname='robotlegs.bender.framework.impl:Lifecycle/destroyed/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 
		 Has this object been fully destroyed?
		 ]]></description>
</method>
<method name='initialized' fullname='robotlegs.bender.framework.impl:Lifecycle/initialized/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 
		 Has this object been fully initialized?
		 ]]></description>
</method>
<method name='state' fullname='robotlegs.bender.framework.impl:Lifecycle/state/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
		 
		 The current lifecycle state of the target object
		 ]]></description>
<metadata>
	<Bindable owner='robotlegs.bender.framework.impl:Lifecycle/state/get' name='stateChange' >
	</Bindable>
</metadata>
</method>
<method name='suspended' fullname='robotlegs.bender.framework.impl:Lifecycle/suspended/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 
		 Has this object been fully suspended?
		 ]]></description>
</method>
<method name='target' fullname='robotlegs.bender.framework.impl:Lifecycle/target/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Object'>
<description><![CDATA[
		 
		 The target object associated with this lifecycle
		 ]]></description>
</method>
<method name='uninitialized' fullname='robotlegs.bender.framework.impl:Lifecycle/uninitialized/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 
		 Is this object uninitialized?
		 ]]></description>
</method>
<field name='_destroy' fullname='robotlegs.bender.framework.impl:Lifecycle/private:_destroy' type='robotlegs.bender.framework.impl:LifecycleTransition' isStatic='false' isConst='false' >
</field>
<field name='_dispatcher' fullname='robotlegs.bender.framework.impl:Lifecycle/private:_dispatcher' type='flash.events:IEventDispatcher' isStatic='false' isConst='false' >
</field>
<field name='_initialize' fullname='robotlegs.bender.framework.impl:Lifecycle/private:_initialize' type='robotlegs.bender.framework.impl:LifecycleTransition' isStatic='false' isConst='false' >
</field>
<field name='_resume' fullname='robotlegs.bender.framework.impl:Lifecycle/private:_resume' type='robotlegs.bender.framework.impl:LifecycleTransition' isStatic='false' isConst='false' >
</field>
<field name='_reversePriority' fullname='robotlegs.bender.framework.impl:Lifecycle/private:_reversePriority' type='int' isStatic='false' isConst='false' >
</field>
<field name='_reversedEventTypes' fullname='robotlegs.bender.framework.impl:Lifecycle/private:_reversedEventTypes' type='flash.utils:Dictionary' isStatic='false' isConst='true' defaultValue='unknown' >
</field>
<field name='_state' fullname='robotlegs.bender.framework.impl:Lifecycle/private:_state' type='String' isStatic='false' isConst='false' defaultValue='uninitialized' >
</field>
<field name='_suspend' fullname='robotlegs.bender.framework.impl:Lifecycle/private:_suspend' type='robotlegs.bender.framework.impl:LifecycleTransition' isStatic='false' isConst='false' >
</field>
<field name='_target' fullname='robotlegs.bender.framework.impl:Lifecycle/private:_target' type='Object' isStatic='false' isConst='false' >
</field>
<classRec name='ConfigManager' fullname='robotlegs.bender.framework.impl:ConfigManager' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/framework/impl/ConfigManager.as' namespace='robotlegs.bender.framework.impl' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The config manager handles configuration files and
	 allows the installation of custom configuration handlers.
	 	 <p>It is pre-configured to handle plain objects and classes</p>
	 	 ]]></description>
<private><![CDATA[]]></private>
</classRec>
<method name='ConfigManager' fullname='robotlegs.bender.framework.impl:ConfigManager/ConfigManager' isStatic='false' isFinal='false' isOverride='false'  param_names='context' param_types='robotlegs.bender.framework.api:IContext' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='addConfigHandler' fullname='robotlegs.bender.framework.impl:ConfigManager/addConfigHandler' isStatic='false' isFinal='false' isOverride='false'  param_names='matcher;handler' param_types='robotlegs.bender.framework.api:IMatcher;Function' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 Adds a custom configuration handlers
		 ]]></description>
<param><![CDATA[matcher Pattern to match configuration objects
		 ]]></param>
<param><![CDATA[handler Handler to process matching configurations
		 ]]></param>
</method>
<method name='addConfig' fullname='robotlegs.bender.framework.impl:ConfigManager/addConfig' isStatic='false' isFinal='false' isOverride='false'  param_names='config' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Process a given configuration object by running it through registered handlers.
		 <p>If the manager is not initialized the configuration will be queued.</p>
		 ]]></description>
<param><![CDATA[config The configuration object or class
		 ]]></param>
</method>
<method name='handleClass' fullname='robotlegs.bender.framework.impl:ConfigManager/private:handleClass' isStatic='false' isFinal='false' isOverride='false'  param_names='type' param_types='Class' param_defaults='undefined' result_type='void'>
</method>
<method name='handleObject' fullname='robotlegs.bender.framework.impl:ConfigManager/private:handleObject' isStatic='false' isFinal='false' isOverride='false'  param_names='object' param_types='Object' param_defaults='undefined' result_type='void'>
</method>
<method name='initialize' fullname='robotlegs.bender.framework.impl:ConfigManager/private:initialize' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='robotlegs.bender.framework.api:LifecycleEvent' param_defaults='undefined' result_type='void'>
</method>
<method name='processClass' fullname='robotlegs.bender.framework.impl:ConfigManager/private:processClass' isStatic='false' isFinal='false' isOverride='false'  param_names='type' param_types='Class' param_defaults='undefined' result_type='void'>
</method>
<method name='processObject' fullname='robotlegs.bender.framework.impl:ConfigManager/private:processObject' isStatic='false' isFinal='false' isOverride='false'  param_names='object' param_types='Object' param_defaults='undefined' result_type='void'>
</method>
<method name='processQueue' fullname='robotlegs.bender.framework.impl:ConfigManager/private:processQueue' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<field name='_configs' fullname='robotlegs.bender.framework.impl:ConfigManager/private:_configs' type='flash.utils:Dictionary' isStatic='false' isConst='true' defaultValue='unknown' >
</field>
<field name='_initialized' fullname='robotlegs.bender.framework.impl:ConfigManager/private:_initialized' type='Boolean' isStatic='false' isConst='false' >
</field>
<field name='_injector' fullname='robotlegs.bender.framework.impl:ConfigManager/private:_injector' type='robotlegs.bender.framework.api:IInjector' isStatic='false' isConst='false' >
</field>
<field name='_logger' fullname='robotlegs.bender.framework.impl:ConfigManager/private:_logger' type='robotlegs.bender.framework.api:ILogger' isStatic='false' isConst='false' >
</field>
<field name='_objectProcessor' fullname='robotlegs.bender.framework.impl:ConfigManager/private:_objectProcessor' type='robotlegs.bender.framework.impl:ObjectProcessor' isStatic='false' isConst='true' defaultValue='unknown' >
</field>
<field name='_queue' fullname='robotlegs.bender.framework.impl:ConfigManager/private:_queue' type='Array' isStatic='false' isConst='true' defaultValue='unknown' >
</field>
<classRec name='ExtensionInstaller' fullname='robotlegs.bender.framework.impl:ExtensionInstaller' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/framework/impl/ExtensionInstaller.as' namespace='robotlegs.bender.framework.impl' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Installs custom extensions into a given context
	 	 ]]></description>
<private><![CDATA[]]></private>
</classRec>
<method name='ExtensionInstaller' fullname='robotlegs.bender.framework.impl:ExtensionInstaller/ExtensionInstaller' isStatic='false' isFinal='false' isOverride='false'  param_names='context' param_types='robotlegs.bender.framework.api:IContext' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='install' fullname='robotlegs.bender.framework.impl:ExtensionInstaller/install' isStatic='false' isFinal='false' isOverride='false'  param_names='extension' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Installs the supplied extension
		 ]]></description>
<param><![CDATA[extension An object or class implementing IExtension
		 ]]></param>
</method>
<field name='_classes' fullname='robotlegs.bender.framework.impl:ExtensionInstaller/private:_classes' type='flash.utils:Dictionary' isStatic='false' isConst='true' defaultValue='unknown' >
</field>
<field name='_context' fullname='robotlegs.bender.framework.impl:ExtensionInstaller/private:_context' type='robotlegs.bender.framework.api:IContext' isStatic='false' isConst='false' >
</field>
<field name='_logger' fullname='robotlegs.bender.framework.impl:ExtensionInstaller/private:_logger' type='robotlegs.bender.framework.api:ILogger' isStatic='false' isConst='false' >
</field>
<field name='_reflector' fullname='robotlegs.bender.framework.impl:ExtensionInstaller/private:_reflector' type='org.swiftsuspenders.reflection:Reflector' isStatic='false' isConst='true' defaultValue='unknown' >
</field>
<classRec name='Context' fullname='robotlegs.bender.framework.impl:Context' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/framework/impl/Context.as' namespace='robotlegs.bender.framework.impl' access='public' baseclass='flash.events:EventDispatcher' interfaces='robotlegs.bender.framework.api:IContext' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The core Robotlegs Context implementation
	 ]]></description>
<metadata>
	<Event owner='robotlegs.bender.framework.impl:Context' name='suspend' type='robotlegs.bender.framework.api.LifecycleEvent' >
	</Event>
</metadata>
<metadata>
	<Event owner='robotlegs.bender.framework.impl:Context' name='stateChange' type='robotlegs.bender.framework.api.LifecycleEvent' >
	</Event>
</metadata>
<metadata>
	<Event owner='robotlegs.bender.framework.impl:Context' name='resume' type='robotlegs.bender.framework.api.LifecycleEvent' >
	</Event>
</metadata>
<metadata>
	<Event owner='robotlegs.bender.framework.impl:Context' name='release' type='robotlegs.bender.framework.api.PinEvent' >
	</Event>
</metadata>
<metadata>
	<Event owner='robotlegs.bender.framework.impl:Context' name='preSuspend' type='robotlegs.bender.framework.api.LifecycleEvent' >
	</Event>
</metadata>
<metadata>
	<Event owner='robotlegs.bender.framework.impl:Context' name='preResume' type='robotlegs.bender.framework.api.LifecycleEvent' >
	</Event>
</metadata>
<metadata>
	<Event owner='robotlegs.bender.framework.impl:Context' name='preInitialize' type='robotlegs.bender.framework.api.LifecycleEvent' >
	</Event>
</metadata>
<metadata>
	<Event owner='robotlegs.bender.framework.impl:Context' name='preDestroy' type='robotlegs.bender.framework.api.LifecycleEvent' >
	</Event>
</metadata>
<metadata>
	<Event owner='robotlegs.bender.framework.impl:Context' name='postSuspend' type='robotlegs.bender.framework.api.LifecycleEvent' >
	</Event>
</metadata>
<metadata>
	<Event owner='robotlegs.bender.framework.impl:Context' name='postResume' type='robotlegs.bender.framework.api.LifecycleEvent' >
	</Event>
</metadata>
<metadata>
	<Event owner='robotlegs.bender.framework.impl:Context' name='postInitialize' type='robotlegs.bender.framework.api.LifecycleEvent' >
	</Event>
</metadata>
<metadata>
	<Event owner='robotlegs.bender.framework.impl:Context' name='postDestroy' type='robotlegs.bender.framework.api.LifecycleEvent' >
	</Event>
</metadata>
<metadata>
	<Event owner='robotlegs.bender.framework.impl:Context' name='initialize' type='robotlegs.bender.framework.api.LifecycleEvent' >
	</Event>
</metadata>
<metadata>
	<Event owner='robotlegs.bender.framework.impl:Context' name='detain' type='robotlegs.bender.framework.api.PinEvent' >
	</Event>
</metadata>
<metadata>
	<Event owner='robotlegs.bender.framework.impl:Context' name='destroy' type='robotlegs.bender.framework.api.LifecycleEvent' >
	</Event>
</metadata>
</classRec>
<method name='Context' fullname='robotlegs.bender.framework.impl:Context/Context' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Creates a new Context
		 ]]></description>
</method>
<method name='addChild' fullname='robotlegs.bender.framework.impl:Context/addChild' isStatic='false' isFinal='false' isOverride='false'  param_names='child' param_types='robotlegs.bender.framework.api:IContext' param_defaults='undefined' result_type='robotlegs.bender.framework.api:IContext'>
<description><![CDATA[
		 
		 Adds an uninitialized context as a child
		 		 <p>This sets up an injection chain.</p>
		 		 ]]></description>
<param><![CDATA[child The context to add as a child
		 ]]></param>
<return><![CDATA[this
		 ]]></return>
</method>
<method name='addConfigHandler' fullname='robotlegs.bender.framework.impl:Context/addConfigHandler' isStatic='false' isFinal='false' isOverride='false'  param_names='matcher;handler' param_types='robotlegs.bender.framework.api:IMatcher;Function' param_defaults='undefined;undefined' result_type='robotlegs.bender.framework.api:IContext'>
<description><![CDATA[
		 
		 Adds a custom configuration handler
		 ]]></description>
<param><![CDATA[matcher Pattern to match configurations
		 ]]></param>
<param><![CDATA[handler Handler to process matching configurations
		 ]]></param>
<return><![CDATA[this
		 ]]></return>
</method>
<method name='addLogTarget' fullname='robotlegs.bender.framework.impl:Context/addLogTarget' isStatic='false' isFinal='false' isOverride='false'  param_names='target' param_types='robotlegs.bender.framework.api:ILogTarget' param_defaults='undefined' result_type='robotlegs.bender.framework.api:IContext'>
<description><![CDATA[
		 
		 Adds a custom log target
		 ]]></description>
<param><![CDATA[target Log target
		 ]]></param>
<return><![CDATA[this
		 ]]></return>
</method>
<method name='afterDestroyingCallback' fullname='robotlegs.bender.framework.impl:Context/private:afterDestroyingCallback' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='afterDestroying' fullname='robotlegs.bender.framework.impl:Context/afterDestroying' isStatic='false' isFinal='false' isOverride='false'  param_names='handler' param_types='Function' param_defaults='undefined' result_type='robotlegs.bender.framework.api:IContext'>
<description><![CDATA[
		 
		 A handler to run after destruction
		 		 <p>Note: The handler must be synchronous.</p>
		 ]]></description>
<param><![CDATA[handler Post-destroy handler
		 ]]></param>
<return><![CDATA[this
		 ]]></return>
</method>
<method name='afterInitializingCallback' fullname='robotlegs.bender.framework.impl:Context/private:afterInitializingCallback' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='afterInitializing' fullname='robotlegs.bender.framework.impl:Context/afterInitializing' isStatic='false' isFinal='false' isOverride='false'  param_names='handler' param_types='Function' param_defaults='undefined' result_type='robotlegs.bender.framework.api:IContext'>
<description><![CDATA[
		 
		 A handler to run after initialization
		 		 <p>Note: The handler must be synchronous.</p>
		 ]]></description>
<param><![CDATA[handler Post-initialize handler
		 ]]></param>
<return><![CDATA[this
		 ]]></return>
</method>
<method name='afterResuming' fullname='robotlegs.bender.framework.impl:Context/afterResuming' isStatic='false' isFinal='false' isOverride='false'  param_names='handler' param_types='Function' param_defaults='undefined' result_type='robotlegs.bender.framework.api:IContext'>
<description><![CDATA[
		 
		 A handler to run after resumption
		 		 <p>Note: The handler must be synchronous.</p>
		 ]]></description>
<param><![CDATA[handler Post-resume handler
		 ]]></param>
<return><![CDATA[Self
		 ]]></return>
</method>
<method name='afterSuspending' fullname='robotlegs.bender.framework.impl:Context/afterSuspending' isStatic='false' isFinal='false' isOverride='false'  param_names='handler' param_types='Function' param_defaults='undefined' result_type='robotlegs.bender.framework.api:IContext'>
<description><![CDATA[
		 
		 A handler to run after suspension
		 		 <p>Note: The handler must be synchronous.</p>
		 ]]></description>
<param><![CDATA[handler Post-suspend handler
		 ]]></param>
<return><![CDATA[this
		 ]]></return>
</method>
<method name='beforeDestroyingCallback' fullname='robotlegs.bender.framework.impl:Context/private:beforeDestroyingCallback' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='beforeDestroying' fullname='robotlegs.bender.framework.impl:Context/beforeDestroying' isStatic='false' isFinal='false' isOverride='false'  param_names='handler' param_types='Function' param_defaults='undefined' result_type='robotlegs.bender.framework.api:IContext'>
<description><![CDATA[
		 
		 A handler to run before the context is destroyed
		 		 <p>The handler can be asynchronous. See: readme-async</p>
		 		 ]]></description>
<param><![CDATA[handler Pre-destroy handler
		 ]]></param>
<return><![CDATA[this
		 ]]></return>
</method>
<method name='beforeInitializingCallback' fullname='robotlegs.bender.framework.impl:Context/private:beforeInitializingCallback' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='beforeInitializing' fullname='robotlegs.bender.framework.impl:Context/beforeInitializing' isStatic='false' isFinal='false' isOverride='false'  param_names='handler' param_types='Function' param_defaults='undefined' result_type='robotlegs.bender.framework.api:IContext'>
<description><![CDATA[
		 
		 A handler to run before the context is initialized
		 		 <p>The handler can be asynchronous. See: readme-async</p>
		 		 ]]></description>
<param><![CDATA[handler Pre-initialize handler
		 ]]></param>
<return><![CDATA[this
		 ]]></return>
</method>
<method name='beforeResuming' fullname='robotlegs.bender.framework.impl:Context/beforeResuming' isStatic='false' isFinal='false' isOverride='false'  param_names='handler' param_types='Function' param_defaults='undefined' result_type='robotlegs.bender.framework.api:IContext'>
<description><![CDATA[
		 
		 A handler to run before the context is resumed
		 		 <p>The handler can be asynchronous. See: readme-async</p>
		 		 ]]></description>
<param><![CDATA[handler Pre-resume handler
		 ]]></param>
<return><![CDATA[this
		 ]]></return>
</method>
<method name='beforeSuspending' fullname='robotlegs.bender.framework.impl:Context/beforeSuspending' isStatic='false' isFinal='false' isOverride='false'  param_names='handler' param_types='Function' param_defaults='undefined' result_type='robotlegs.bender.framework.api:IContext'>
<description><![CDATA[
		 
		 A handler to run before the target object is suspended
		 		 <p>The handler can be asynchronous. See: readme-async</p>
		 		 ]]></description>
<param><![CDATA[handler Pre-suspend handler
		 ]]></param>
<return><![CDATA[this
		 ]]></return>
</method>
<method name='configure' fullname='robotlegs.bender.framework.impl:Context/configure' isStatic='false' isFinal='false' isOverride='false'  param_names='configs' param_types='restParam' param_defaults='undefined' result_type='robotlegs.bender.framework.api:IContext'>
<description><![CDATA[
		 
		 Configures the context with custom configurations
		 ]]></description>
<param><![CDATA[configs Configuration objects or classes of any type
		 ]]></param>
<return><![CDATA[this
		 ]]></return>
</method>
<method name='destroy' fullname='robotlegs.bender.framework.impl:Context/destroy' isStatic='false' isFinal='false' isOverride='false'  param_names='callback' param_types='Function' param_defaults='null' result_type='void'>
<description><![CDATA[
		 
		 Destroys an active context
		 ]]></description>
<param><![CDATA[callback Destruction callback
		 ]]></param>
</method>
<method name='detain' fullname='robotlegs.bender.framework.impl:Context/detain' isStatic='false' isFinal='false' isOverride='false'  param_names='instances' param_types='restParam' param_defaults='undefined' result_type='robotlegs.bender.framework.api:IContext'>
<description><![CDATA[
		 
		 Pins instances in memory
		 ]]></description>
<param><![CDATA[instances Instances to pin
		 ]]></param>
<return><![CDATA[this
		 ]]></return>
</method>
<method name='getLogger' fullname='robotlegs.bender.framework.impl:Context/getLogger' isStatic='false' isFinal='false' isOverride='false'  param_names='source' param_types='Object' param_defaults='undefined' result_type='robotlegs.bender.framework.api:ILogger'>
<description><![CDATA[
		 
		 Retrieves a logger for a given source
		 ]]></description>
<param><![CDATA[source Logging source
		 ]]></param>
<return><![CDATA[Logger
		 ]]></return>
</method>
<method name='initialize' fullname='robotlegs.bender.framework.impl:Context/initialize' isStatic='false' isFinal='false' isOverride='false'  param_names='callback' param_types='Function' param_defaults='null' result_type='void'>
<description><![CDATA[
		 
		 Initializes this context
		 ]]></description>
<param><![CDATA[callback Initialization callback
		 ]]></param>
</method>
<method name='install' fullname='robotlegs.bender.framework.impl:Context/install' isStatic='false' isFinal='false' isOverride='false'  param_names='extensions' param_types='restParam' param_defaults='undefined' result_type='robotlegs.bender.framework.api:IContext'>
<description><![CDATA[
		 
		 Installs custom extensions or bundles into the context
		 ]]></description>
<param><![CDATA[extensions Objects or classes implementing IExtension or IBundle
		 ]]></param>
<return><![CDATA[this
		 ]]></return>
</method>
<method name='onChildDestroy' fullname='robotlegs.bender.framework.impl:Context/private:onChildDestroy' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='robotlegs.bender.framework.api:LifecycleEvent' param_defaults='undefined' result_type='void'>
</method>
<method name='release' fullname='robotlegs.bender.framework.impl:Context/release' isStatic='false' isFinal='false' isOverride='false'  param_names='instances' param_types='restParam' param_defaults='undefined' result_type='robotlegs.bender.framework.api:IContext'>
<description><![CDATA[
		 
		 Unpins instances from memory
		 ]]></description>
<param><![CDATA[instances Instances to unpin
		 ]]></param>
<return><![CDATA[this
		 ]]></return>
</method>
<method name='removeChild' fullname='robotlegs.bender.framework.impl:Context/removeChild' isStatic='false' isFinal='false' isOverride='false'  param_names='child' param_types='robotlegs.bender.framework.api:IContext' param_defaults='undefined' result_type='robotlegs.bender.framework.api:IContext'>
<description><![CDATA[
		 
		 Removes a child context from this context
		 ]]></description>
<param><![CDATA[child The child context to remove
		 ]]></param>
<return><![CDATA[this
		 ]]></return>
</method>
<method name='removeChildren' fullname='robotlegs.bender.framework.impl:Context/private:removeChildren' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='resume' fullname='robotlegs.bender.framework.impl:Context/resume' isStatic='false' isFinal='false' isOverride='false'  param_names='callback' param_types='Function' param_defaults='null' result_type='void'>
<description><![CDATA[
		 
		 Resumes a suspended context
		 ]]></description>
<param><![CDATA[callback Resumption callback
		 ]]></param>
</method>
<method name='setup' fullname='robotlegs.bender.framework.impl:Context/private:setup' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 Configures mandatory context dependencies
		 ]]></description>
</method>
<method name='suspend' fullname='robotlegs.bender.framework.impl:Context/suspend' isStatic='false' isFinal='false' isOverride='false'  param_names='callback' param_types='Function' param_defaults='null' result_type='void'>
<description><![CDATA[
		 
		 Suspends this context
		 ]]></description>
<param><![CDATA[callback Suspension callback
		 ]]></param>
</method>
<method name='toString' fullname='robotlegs.bender.framework.impl:Context/toString' isStatic='false' isFinal='false' isOverride='true'  result_type='String'>
<description><![CDATA[
		 ]]></description>
<inheritDoc><![CDATA[]]></inheritDoc>
</method>
<method name='whenDestroying' fullname='robotlegs.bender.framework.impl:Context/whenDestroying' isStatic='false' isFinal='false' isOverride='false'  param_names='handler' param_types='Function' param_defaults='undefined' result_type='robotlegs.bender.framework.api:IContext'>
<description><![CDATA[
		 
		 A handler to run during destruction
		 		 <p>Note: The handler must be synchronous.</p>
		 ]]></description>
<param><![CDATA[handler Destruction handler
		 ]]></param>
<return><![CDATA[this
		 ]]></return>
</method>
<method name='whenInitializing' fullname='robotlegs.bender.framework.impl:Context/whenInitializing' isStatic='false' isFinal='false' isOverride='false'  param_names='handler' param_types='Function' param_defaults='undefined' result_type='robotlegs.bender.framework.api:IContext'>
<description><![CDATA[
		 
		 A handler to run during initialization
		 		 <p>Note: The handler must be synchronous.</p>
		 ]]></description>
<param><![CDATA[handler Initialization handler
		 ]]></param>
<return><![CDATA[this
		 ]]></return>
</method>
<method name='whenResuming' fullname='robotlegs.bender.framework.impl:Context/whenResuming' isStatic='false' isFinal='false' isOverride='false'  param_names='handler' param_types='Function' param_defaults='undefined' result_type='robotlegs.bender.framework.api:IContext'>
<description><![CDATA[
		 
		 A handler to run during resumption
		 		 <p>Note: The handler must be synchronous.</p>
		 ]]></description>
<param><![CDATA[handler Resumption handler
		 ]]></param>
<return><![CDATA[this
		 ]]></return>
</method>
<method name='whenSuspending' fullname='robotlegs.bender.framework.impl:Context/whenSuspending' isStatic='false' isFinal='false' isOverride='false'  param_names='handler' param_types='Function' param_defaults='undefined' result_type='robotlegs.bender.framework.api:IContext'>
<description><![CDATA[
		 
		 A handler to run during suspension
		 		 <p>Note: The handler must be synchronous.</p>
		 ]]></description>
<param><![CDATA[handler Suspension handler
		 ]]></param>
<return><![CDATA[this
		 ]]></return>
</method>
<method name='active' fullname='robotlegs.bender.framework.impl:Context/active/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 
		 Is this context active?
		 ]]></description>
</method>
<method name='destroyed' fullname='robotlegs.bender.framework.impl:Context/destroyed/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 
		 Has this context been destroyed?
		 ]]></description>
</method>
<method name='initialized' fullname='robotlegs.bender.framework.impl:Context/initialized/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 
		 Is this context initialized?
		 ]]></description>
</method>
<method name='injector' fullname='robotlegs.bender.framework.impl:Context/injector/get' isStatic='false' isFinal='false' isOverride='false'  result_type='robotlegs.bender.framework.api:IInjector'>
<description><![CDATA[
		 
		 The context dependency injector
		 ]]></description>
</method>
<method name='logLevel' fullname='robotlegs.bender.framework.impl:Context/logLevel/get' isStatic='false' isFinal='false' isOverride='false'  result_type='uint'>
<description><![CDATA[
		 
		 The current log level
		 ]]></description>
</method>
<method name='state' fullname='robotlegs.bender.framework.impl:Context/state/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
		 
		 The current lifecycle state
		 ]]></description>
<metadata>
	<Bindable owner='robotlegs.bender.framework.impl:Context/state/get' name='stateChange' >
	</Bindable>
</metadata>
</method>
<method name='suspended' fullname='robotlegs.bender.framework.impl:Context/suspended/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 
		 Is this context suspended?
		 ]]></description>
</method>
<method name='uninitialized' fullname='robotlegs.bender.framework.impl:Context/uninitialized/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 
		 Is this context uninitialized?
		 ]]></description>
</method>
<method name='logLevel' fullname='robotlegs.bender.framework.impl:Context/logLevel/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='uint' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 
		 Sets the current log level
		 ]]></description>
<param><![CDATA[value The log level. Use a constant from LogLevel
		 ]]></param>
</method>
<field name='_children' fullname='robotlegs.bender.framework.impl:Context/private:_children' type='Array' isStatic='false' isConst='true' defaultValue='unknown' >
</field>
<field name='_configManager' fullname='robotlegs.bender.framework.impl:Context/private:_configManager' type='robotlegs.bender.framework.impl:ConfigManager' isStatic='false' isConst='false' >
</field>
<field name='_extensionInstaller' fullname='robotlegs.bender.framework.impl:Context/private:_extensionInstaller' type='robotlegs.bender.framework.impl:ExtensionInstaller' isStatic='false' isConst='false' >
</field>
<field name='_injector' fullname='robotlegs.bender.framework.impl:Context/private:_injector' type='robotlegs.bender.framework.api:IInjector' isStatic='false' isConst='true' defaultValue='unknown' >
</field>
<field name='_lifecycle' fullname='robotlegs.bender.framework.impl:Context/private:_lifecycle' type='robotlegs.bender.framework.impl:Lifecycle' isStatic='false' isConst='false' >
</field>
<field name='_logManager' fullname='robotlegs.bender.framework.impl:Context/private:_logManager' type='robotlegs.bender.framework.impl:LogManager' isStatic='false' isConst='true' defaultValue='unknown' >
</field>
<field name='_logger' fullname='robotlegs.bender.framework.impl:Context/private:_logger' type='robotlegs.bender.framework.api:ILogger' isStatic='false' isConst='false' >
</field>
<field name='_pin' fullname='robotlegs.bender.framework.impl:Context/private:_pin' type='robotlegs.bender.framework.impl:Pin' isStatic='false' isConst='false' >
</field>
<field name='_uid' fullname='robotlegs.bender.framework.impl:Context/private:_uid' type='String' isStatic='false' isConst='true' defaultValue='unknown' >
</field>
<classRec name='RobotlegsInjector' fullname='robotlegs.bender.framework.impl:RobotlegsInjector' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/framework/impl/RobotlegsInjector.as' namespace='robotlegs.bender.framework.impl' access='public' baseclass='org.swiftsuspenders:Injector' interfaces='robotlegs.bender.framework.api:IInjector' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Robotlegs IInjector Adapter
	 ]]></description>
</classRec>
<method name='createChild' fullname='robotlegs.bender.framework.impl:RobotlegsInjector/createChild' isStatic='false' isFinal='false' isOverride='false'  param_names='applicationDomain' param_types='flash.system:ApplicationDomain' param_defaults='null' result_type='robotlegs.bender.framework.api:IInjector'>
<description><![CDATA[
		
		 Creates a new <code>Injector</code> and sets itself as that new <code>Injector</code>'s
		 <code>parentInjector</code>.
		 		 ]]></description>
<param><![CDATA[applicationDomain The optional domain to use in the new Injector.
		 If not given, the creating injector's domain is set on the new Injector as well.
		 ]]></param>
<return><![CDATA[The newly created <code>Injector</code> instance
		 		 ]]></return>
</method>
<method name='parent' fullname='robotlegs.bender.framework.impl:RobotlegsInjector/parent/get' isStatic='false' isFinal='false' isOverride='false'  result_type='robotlegs.bender.framework.api:IInjector'>
<description><![CDATA[
		 
		 Returns the <code>IInjector</code> used for dependencies the current
		 <code>Injector</code> can't supply
		 ]]></description>
</method>
<method name='parent' fullname='robotlegs.bender.framework.impl:RobotlegsInjector/parent/set' isStatic='false' isFinal='false' isOverride='false'  param_names='parentInjector' param_types='robotlegs.bender.framework.api:IInjector' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 
		 Sets the parent <code>IInjector</code>
		 ]]></description>
<param><![CDATA[parentInjector The parent IInjector
		 ]]></param>
</method>
<classRec name='EventMapConfig' fullname='robotlegs.bender.extensions.localEventMap.impl:EventMapConfig' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/localEventMap/impl/EventMapConfig.as' namespace='robotlegs.bender.extensions.localEventMap.impl' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 ]]></description>
<private><![CDATA[]]></private>
</classRec>
<method name='EventMapConfig' fullname='robotlegs.bender.extensions.localEventMap.impl:EventMapConfig/EventMapConfig' isStatic='false' isFinal='false' isOverride='false'  param_names='dispatcher;eventString;listener;eventClass;callback;useCapture' param_types='flash.events:IEventDispatcher;String;Function;Class;Function;Boolean' param_defaults='undefined;undefined;undefined;undefined;undefined;undefined' result_type='*'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='equalTo' fullname='robotlegs.bender.extensions.localEventMap.impl:EventMapConfig/equalTo' isStatic='false' isFinal='false' isOverride='false'  param_names='dispatcher;eventString;listener;eventClass;useCapture' param_types='flash.events:IEventDispatcher;String;Function;Class;Boolean' param_defaults='undefined;undefined;undefined;undefined;undefined' result_type='Boolean'>
</method>
<method name='callback' fullname='robotlegs.bender.extensions.localEventMap.impl:EventMapConfig/callback/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Function'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='dispatcher' fullname='robotlegs.bender.extensions.localEventMap.impl:EventMapConfig/dispatcher/get' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.events:IEventDispatcher'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='eventClass' fullname='robotlegs.bender.extensions.localEventMap.impl:EventMapConfig/eventClass/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Class'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='eventString' fullname='robotlegs.bender.extensions.localEventMap.impl:EventMapConfig/eventString/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='listener' fullname='robotlegs.bender.extensions.localEventMap.impl:EventMapConfig/listener/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Function'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='useCapture' fullname='robotlegs.bender.extensions.localEventMap.impl:EventMapConfig/useCapture/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='_callback' fullname='robotlegs.bender.extensions.localEventMap.impl:EventMapConfig/private:_callback' type='Function' isStatic='false' isConst='false' >
</field>
<field name='_dispatcher' fullname='robotlegs.bender.extensions.localEventMap.impl:EventMapConfig/private:_dispatcher' type='flash.events:IEventDispatcher' isStatic='false' isConst='false' >
</field>
<field name='_eventClass' fullname='robotlegs.bender.extensions.localEventMap.impl:EventMapConfig/private:_eventClass' type='Class' isStatic='false' isConst='false' >
</field>
<field name='_eventString' fullname='robotlegs.bender.extensions.localEventMap.impl:EventMapConfig/private:_eventString' type='String' isStatic='false' isConst='false' >
</field>
<field name='_listener' fullname='robotlegs.bender.extensions.localEventMap.impl:EventMapConfig/private:_listener' type='Function' isStatic='false' isConst='false' >
</field>
<field name='_useCapture' fullname='robotlegs.bender.extensions.localEventMap.impl:EventMapConfig/private:_useCapture' type='Boolean' isStatic='false' isConst='false' >
</field>
<classRec name='EventMap' fullname='robotlegs.bender.extensions.localEventMap.impl:EventMap' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/localEventMap/impl/EventMap.as' namespace='robotlegs.bender.extensions.localEventMap.impl' access='public' baseclass='Object' interfaces='robotlegs.bender.extensions.localEventMap.api:IEventMap' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 ]]></description>
<private><![CDATA[]]></private>
</classRec>
<method name='mapListener' fullname='robotlegs.bender.extensions.localEventMap.impl:EventMap/mapListener' isStatic='false' isFinal='false' isOverride='false'  param_names='dispatcher;eventString;listener;eventClass;useCapture;priority;useWeakReference' param_types='flash.events:IEventDispatcher;String;Function;Class;Boolean;int;Boolean' param_defaults='undefined;undefined;undefined;null;false;0;true' result_type='void'>
<description><![CDATA[
		 
		 The same as calling <code>addEventListener</code> directly on the <code>IEventDispatcher</code>,
		 but keeps a list of listeners for easy (usually automatic) removal.
		 		 ]]></description>
<param><![CDATA[dispatcher The <code>IEventDispatcher</code> to listen to
		 ]]></param>
<param><![CDATA[type The <code>Event</code> type to listen for
		 ]]></param>
<param><![CDATA[listener The <code>Event</code> handler
		 ]]></param>
<param><![CDATA[eventClass Optional Event class for a stronger mapping. Defaults to <code>flash.events.Event</code>.
		 ]]></param>
<param><![CDATA[useCapture
		 ]]></param>
<param><![CDATA[priority
		 ]]></param>
<param><![CDATA[useWeakReference
		 ]]></param>
</method>
<method name='resume' fullname='robotlegs.bender.extensions.localEventMap.impl:EventMap/resume' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 
		 Resumes all listeners registered through <code>mapListener</code>
		 ]]></description>
</method>
<method name='routeEventToListener' fullname='robotlegs.bender.extensions.localEventMap.impl:EventMap/protected:routeEventToListener' isStatic='false' isFinal='false' isOverride='false'  param_names='event;listener;originalEventClass' param_types='flash.events:Event;Function;Class' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
		 Event Handler
		 		 ]]></description>
<param><![CDATA[event The <code>Event</code>
		 ]]></param>
<param><![CDATA[listener
		 ]]></param>
<param><![CDATA[originalEventClass
		 ]]></param>
</method>
<method name='suspend' fullname='robotlegs.bender.extensions.localEventMap.impl:EventMap/suspend' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 
		 Suspends all listeners registered through <code>mapListener</code>
		 ]]></description>
</method>
<method name='unmapListener' fullname='robotlegs.bender.extensions.localEventMap.impl:EventMap/unmapListener' isStatic='false' isFinal='false' isOverride='false'  param_names='dispatcher;eventString;listener;eventClass;useCapture' param_types='flash.events:IEventDispatcher;String;Function;Class;Boolean' param_defaults='undefined;undefined;undefined;null;false' result_type='void'>
<description><![CDATA[
		 
		 The same as calling <code>removeEventListener</code> directly on the <code>IEventDispatcher</code>,
		 but updates our local list of listeners.
		 		 ]]></description>
<param><![CDATA[dispatcher The <code>IEventDispatcher</code>
		 ]]></param>
<param><![CDATA[type The <code>Event</code> type
		 ]]></param>
<param><![CDATA[listener The <code>Event</code> handler
		 ]]></param>
<param><![CDATA[eventClass Optional Event class for a stronger mapping. Defaults to <code>flash.events.Event</code>.
		 ]]></param>
<param><![CDATA[useCapture
		 ]]></param>
</method>
<method name='unmapListeners' fullname='robotlegs.bender.extensions.localEventMap.impl:EventMap/unmapListeners' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 
		 Removes all listeners registered through <code>mapListener</code>
		 ]]></description>
</method>
<field name='_listeners' fullname='robotlegs.bender.extensions.localEventMap.impl:EventMap/private:_listeners' type='Vector$robotlegs.bender.extensions.localEventMap.impl:EventMapConfig' isStatic='false' isConst='true' defaultValue='unknown' >
</field>
<field name='_suspendedListeners' fullname='robotlegs.bender.extensions.localEventMap.impl:EventMap/private:_suspendedListeners' type='Vector$robotlegs.bender.extensions.localEventMap.impl:EventMapConfig' isStatic='false' isConst='true' defaultValue='unknown' >
</field>
<field name='_suspended' fullname='robotlegs.bender.extensions.localEventMap.impl:EventMap/private:_suspended' type='Boolean' isStatic='false' isConst='false' defaultValue='false' >
</field>
<interfaceRec name='IEventCommandMap' fullname='robotlegs.bender.extensions.eventCommandMap.api:IEventCommandMap' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/eventCommandMap/api/IEventCommandMap.as' namespace='robotlegs.bender.extensions.eventCommandMap.api' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The Event Command Map allows you to bind Events to Commands
	 ]]></description>
</interfaceRec>
<method name='addMappingProcessor' fullname='robotlegs.bender.extensions.eventCommandMap.api:IEventCommandMap/robotlegs.bender.extensions.eventCommandMap.api:IEventCommandMap:addMappingProcessor' isStatic='false' isFinal='false' isOverride='false'  param_names='handler' param_types='Function' param_defaults='undefined' result_type='robotlegs.bender.extensions.eventCommandMap.api:IEventCommandMap'>
<description><![CDATA[
		 Adds a handler to process mappings
		 ]]></description>
<param><![CDATA[handler Function that accepts a mapping
		 ]]></param>
<return><![CDATA[Self
		 ]]></return>
</method>
<method name='map' fullname='robotlegs.bender.extensions.eventCommandMap.api:IEventCommandMap/robotlegs.bender.extensions.eventCommandMap.api:IEventCommandMap:map' isStatic='false' isFinal='false' isOverride='false'  param_names='type;eventClass' param_types='String;Class' param_defaults='undefined;null' result_type='robotlegs.bender.extensions.commandCenter.dsl:ICommandMapper'>
<description><![CDATA[
		 Creates a mapping for an Event based trigger
		 ]]></description>
<param><![CDATA[type The Event type
		 ]]></param>
<param><![CDATA[eventClass The concrete Event class
		 ]]></param>
<return><![CDATA[Command Mapper
		 ]]></return>
</method>
<method name='unmap' fullname='robotlegs.bender.extensions.eventCommandMap.api:IEventCommandMap/robotlegs.bender.extensions.eventCommandMap.api:IEventCommandMap:unmap' isStatic='false' isFinal='false' isOverride='false'  param_names='type;eventClass' param_types='String;Class' param_defaults='undefined;null' result_type='robotlegs.bender.extensions.commandCenter.dsl:ICommandUnmapper'>
<description><![CDATA[
		 Unmaps an Event based trigger from a Command
		 ]]></description>
<param><![CDATA[type The Event type
		 ]]></param>
<param><![CDATA[eventClass The concrete Event class
		 ]]></param>
<return><![CDATA[Command Unmapper
		 ]]></return>
</method>
<classRec name='LogMessageParser' fullname='robotlegs.bender.extensions.enhancedLogging.impl:LogMessageParser' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/enhancedLogging/impl/LogMessageParser.as' namespace='robotlegs.bender.extensions.enhancedLogging.impl' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 ]]></description>
<private><![CDATA[]]></private>
</classRec>
<method name='parseMessage' fullname='robotlegs.bender.extensions.enhancedLogging.impl:LogMessageParser/parseMessage' isStatic='false' isFinal='false' isOverride='false'  param_names='message;params' param_types='String;Array' param_defaults='undefined;undefined' result_type='String'>
<description><![CDATA[
		 Parse a parametrized message
		 ]]></description>
<param><![CDATA[message The message string
		 ]]></param>
<param><![CDATA[params The parameter values
		 ]]></param>
<return><![CDATA[The parsed message
		 ]]></return>
</method>
<classRec name='TraceLogTarget' fullname='robotlegs.bender.extensions.enhancedLogging.impl:TraceLogTarget' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/enhancedLogging/impl/TraceLogTarget.as' namespace='robotlegs.bender.extensions.enhancedLogging.impl' access='public' baseclass='Object' interfaces='robotlegs.bender.framework.api:ILogTarget' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 A simple trace logger
	 ]]></description>
<private><![CDATA[]]></private>
</classRec>
<method name='TraceLogTarget' fullname='robotlegs.bender.extensions.enhancedLogging.impl:TraceLogTarget/TraceLogTarget' isStatic='false' isFinal='false' isOverride='false'  param_names='context' param_types='robotlegs.bender.framework.api:IContext' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 Creates a Trace Log Target
		 ]]></description>
<param><![CDATA[context Context
		 ]]></param>
</method>
<method name='log' fullname='robotlegs.bender.extensions.enhancedLogging.impl:TraceLogTarget/log' isStatic='false' isFinal='false' isOverride='false'  param_names='source;level;timestamp;message;params' param_types='Object;uint;int;String;Array' param_defaults='undefined;undefined;undefined;undefined;null' result_type='void'>
<description><![CDATA[
		 
		 Captures a log message
		 		 ]]></description>
<param><![CDATA[source The source of the log message
		 ]]></param>
<param><![CDATA[level The log level of the message
		 ]]></param>
<param><![CDATA[timestamp getTimer() timestamp
		 ]]></param>
<param><![CDATA[message The log message
		 ]]></param>
<param><![CDATA[params Message parameters
		 ]]></param>
</method>
<field name='_context' fullname='robotlegs.bender.extensions.enhancedLogging.impl:TraceLogTarget/private:_context' type='robotlegs.bender.framework.api:IContext' isStatic='false' isConst='false' >
</field>
<field name='_messageParser' fullname='robotlegs.bender.extensions.enhancedLogging.impl:TraceLogTarget/private:_messageParser' type='robotlegs.bender.extensions.enhancedLogging.impl:LogMessageParser' isStatic='false' isConst='true' defaultValue='unknown' >
</field>
<classRec name='InjectorListener' fullname='robotlegs.bender.extensions.enhancedLogging.impl:InjectorListener' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/enhancedLogging/impl/InjectorListener.as' namespace='robotlegs.bender.extensions.enhancedLogging.impl' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 ]]></description>
<private><![CDATA[]]></private>
</classRec>
<method name='InjectorListener' fullname='robotlegs.bender.extensions.enhancedLogging.impl:InjectorListener/InjectorListener' isStatic='false' isFinal='false' isOverride='false'  param_names='injector;logger' param_types='robotlegs.bender.framework.api:IInjector;robotlegs.bender.framework.api:ILogger' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[
		 Creates an Injector Listener
		 ]]></description>
<param><![CDATA[injector Injector
		 ]]></param>
<param><![CDATA[logger Logger
		 ]]></param>
</method>
<method name='addListeners' fullname='robotlegs.bender.extensions.enhancedLogging.impl:InjectorListener/private:addListeners' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='destroy' fullname='robotlegs.bender.extensions.enhancedLogging.impl:InjectorListener/destroy' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 Destroys this listener
		 ]]></description>
</method>
<method name='onInjectionEvent' fullname='robotlegs.bender.extensions.enhancedLogging.impl:InjectorListener/private:onInjectionEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='org.swiftsuspenders:InjectionEvent' param_defaults='undefined' result_type='void'>
</method>
<method name='onMappingEvent' fullname='robotlegs.bender.extensions.enhancedLogging.impl:InjectorListener/private:onMappingEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='org.swiftsuspenders.mapping:MappingEvent' param_defaults='undefined' result_type='void'>
</method>
<field name='INJECTION_TYPES' fullname='robotlegs.bender.extensions.enhancedLogging.impl:InjectorListener/private:INJECTION_TYPES' type='Array' isStatic='true' isConst='true' defaultValue='unknown' >
</field>
<field name='MAPPING_TYPES' fullname='robotlegs.bender.extensions.enhancedLogging.impl:InjectorListener/private:MAPPING_TYPES' type='Array' isStatic='true' isConst='true' defaultValue='unknown' >
</field>
<field name='_injector' fullname='robotlegs.bender.extensions.enhancedLogging.impl:InjectorListener/private:_injector' type='robotlegs.bender.framework.api:IInjector' isStatic='false' isConst='false' >
</field>
<field name='_logger' fullname='robotlegs.bender.extensions.enhancedLogging.impl:InjectorListener/private:_logger' type='robotlegs.bender.framework.api:ILogger' isStatic='false' isConst='false' >
</field>
<classRec name='LoggerProvider' fullname='robotlegs.bender.extensions.enhancedLogging.impl:LoggerProvider' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/enhancedLogging/impl/LoggerProvider.as' namespace='robotlegs.bender.extensions.enhancedLogging.impl' access='public' baseclass='Object' interfaces='org.swiftsuspenders.dependencyproviders:DependencyProvider' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 ]]></description>
<private><![CDATA[]]></private>
</classRec>
<method name='LoggerProvider' fullname='robotlegs.bender.extensions.enhancedLogging.impl:LoggerProvider/LoggerProvider' isStatic='false' isFinal='false' isOverride='false'  param_names='context' param_types='robotlegs.bender.framework.api:IContext' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='apply' fullname='robotlegs.bender.extensions.enhancedLogging.impl:LoggerProvider/apply' isStatic='false' isFinal='false' isOverride='false'  param_names='targetType;activeInjector;injectParameters' param_types='Class;org.swiftsuspenders:Injector;flash.utils:Dictionary' param_defaults='undefined;undefined;undefined' result_type='Object'>
<description><![CDATA[
		 ]]></description>
<inheritDoc><![CDATA[]]></inheritDoc>
</method>
<method name='destroy' fullname='robotlegs.bender.extensions.enhancedLogging.impl:LoggerProvider/destroy' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 ]]></description>
<inheritDoc><![CDATA[]]></inheritDoc>
</method>
<field name='_context' fullname='robotlegs.bender.extensions.enhancedLogging.impl:LoggerProvider/private:_context' type='robotlegs.bender.framework.api:IContext' isStatic='false' isConst='false' >
</field>
<interfaceRec name='IModuleConnector' fullname='robotlegs.bender.extensions.modularity.api:IModuleConnector' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/modularity/api/IModuleConnector.as' namespace='robotlegs.bender.extensions.modularity.api' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Creates event relays between modules
	 ]]></description>
</interfaceRec>
<method name='onChannel' fullname='robotlegs.bender.extensions.modularity.api:IModuleConnector/robotlegs.bender.extensions.modularity.api:IModuleConnector:onChannel' isStatic='false' isFinal='false' isOverride='false'  param_names='channelId' param_types='String' param_defaults='undefined' result_type='robotlegs.bender.extensions.modularity.dsl:IModuleConnectionAction'>
<description><![CDATA[
		 Connects to a specified channel
		 ]]></description>
<param><![CDATA[channelId The channel Id
		 ]]></param>
<return><![CDATA[Configurator
		 ]]></return>
</method>
<method name='onDefaultChannel' fullname='robotlegs.bender.extensions.modularity.api:IModuleConnector/robotlegs.bender.extensions.modularity.api:IModuleConnector:onDefaultChannel' isStatic='false' isFinal='false' isOverride='false'  result_type='robotlegs.bender.extensions.modularity.dsl:IModuleConnectionAction'>
<description><![CDATA[
		 Connects to the default channel
		 ]]></description>
<return><![CDATA[Configurator
		 ]]></return>
</method>
<interfaceRec name='IModuleConnectionAction' fullname='robotlegs.bender.extensions.modularity.dsl:IModuleConnectionAction' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/modularity/dsl/IModuleConnectionAction.as' namespace='robotlegs.bender.extensions.modularity.dsl' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 ]]></description>
<private><![CDATA[]]></private>
</interfaceRec>
<method name='receiveEvent' fullname='robotlegs.bender.extensions.modularity.dsl:IModuleConnectionAction/robotlegs.bender.extensions.modularity.dsl:IModuleConnectionAction:receiveEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='eventType' param_types='String' param_defaults='undefined' result_type='robotlegs.bender.extensions.modularity.dsl:IModuleConnectionAction'>
</method>
<method name='relayEvent' fullname='robotlegs.bender.extensions.modularity.dsl:IModuleConnectionAction/robotlegs.bender.extensions.modularity.dsl:IModuleConnectionAction:relayEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='eventType' param_types='String' param_defaults='undefined' result_type='robotlegs.bender.extensions.modularity.dsl:IModuleConnectionAction'>
</method>
<method name='resume' fullname='robotlegs.bender.extensions.modularity.dsl:IModuleConnectionAction/robotlegs.bender.extensions.modularity.dsl:IModuleConnectionAction:resume' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='suspend' fullname='robotlegs.bender.extensions.modularity.dsl:IModuleConnectionAction/robotlegs.bender.extensions.modularity.dsl:IModuleConnectionAction:suspend' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<classRec name='VigilantError' fullname='robotlegs.bender.extensions.vigilance:VigilantError' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/vigilance/VigilantError.as' namespace='robotlegs.bender.extensions.vigilance' access='public' baseclass='Error' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Vigilant Error
	 ]]></description>
</classRec>
<method name='VigilantError' fullname='robotlegs.bender.extensions.vigilance:VigilantError/VigilantError' isStatic='false' isFinal='false' isOverride='false'  param_names='message' param_types='String' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 Creates a Vigilant Error
		 ]]></description>
<param><![CDATA[message The error message
		 ]]></param>
</method>
<classRec name='VigilanceExtension' fullname='robotlegs.bender.extensions.vigilance:VigilanceExtension' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/vigilance/VigilanceExtension.as' namespace='robotlegs.bender.extensions.vigilance' access='public' baseclass='Object' interfaces='robotlegs.bender.framework.api:IExtension;robotlegs.bender.framework.api:ILogTarget' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The Vigilance Extension throws Errors when warnings are logged.
	 ]]></description>
</classRec>
<method name='extend' fullname='robotlegs.bender.extensions.vigilance:VigilanceExtension/extend' isStatic='false' isFinal='false' isOverride='false'  param_names='context' param_types='robotlegs.bender.framework.api:IContext' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 
		 This method will be called immediately when the extension/bundle is installed.
		 		 <p>Note: the context may not be fully initialized yet. A bundle should do
		 little more than install additional bundles/extensions. An extension
		 can add lifecycle handlers to the context instance to perform synchronized
		 initialization.</p>
		 		 ]]></description>
<param><![CDATA[context The context that this extension/bundle is being installed into.
		 ]]></param>
</method>
<method name='log' fullname='robotlegs.bender.extensions.vigilance:VigilanceExtension/log' isStatic='false' isFinal='false' isOverride='false'  param_names='source;level;timestamp;message;params' param_types='Object;uint;int;String;Array' param_defaults='undefined;undefined;undefined;undefined;null' result_type='void'>
<description><![CDATA[
		 
		 Captures a log message
		 		 ]]></description>
<param><![CDATA[source The source of the log message
		 ]]></param>
<param><![CDATA[level The log level of the message
		 ]]></param>
<param><![CDATA[timestamp getTimer() timestamp
		 ]]></param>
<param><![CDATA[message The log message
		 ]]></param>
<param><![CDATA[params Message parameters
		 ]]></param>
</method>
<method name='mappingOverrideHandler' fullname='robotlegs.bender.extensions.vigilance:VigilanceExtension/private:mappingOverrideHandler' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='org.swiftsuspenders.mapping:MappingEvent' param_defaults='undefined' result_type='void'>
</method>
<field name='_messageParser' fullname='robotlegs.bender.extensions.vigilance:VigilanceExtension/private:_messageParser' type='robotlegs.bender.extensions.enhancedLogging.impl:LogMessageParser' isStatic='false' isConst='true' defaultValue='unknown' >
</field>
<classRec name='NullCommandTrigger' fullname='robotlegs.bender.extensions.commandCenter.impl:NullCommandTrigger' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/commandCenter/impl/NullCommandTrigger.as' namespace='robotlegs.bender.extensions.commandCenter.impl' access='public' baseclass='Object' interfaces='robotlegs.bender.extensions.commandCenter.api:ICommandTrigger' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 ]]></description>
<private><![CDATA[]]></private>
</classRec>
<method name='activate' fullname='robotlegs.bender.extensions.commandCenter.impl:NullCommandTrigger/activate' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='deactivate' fullname='robotlegs.bender.extensions.commandCenter.impl:NullCommandTrigger/deactivate' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<classRec name='CommandMapping' fullname='robotlegs.bender.extensions.commandCenter.impl:CommandMapping' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/commandCenter/impl/CommandMapping.as' namespace='robotlegs.bender.extensions.commandCenter.impl' access='public' baseclass='Object' interfaces='robotlegs.bender.extensions.commandCenter.api:ICommandMapping' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 ]]></description>
<private><![CDATA[]]></private>
</classRec>
<method name='CommandMapping' fullname='robotlegs.bender.extensions.commandCenter.impl:CommandMapping/CommandMapping' isStatic='false' isFinal='false' isOverride='false'  param_names='commandClass' param_types='Class' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 Creates a Command Mapping
		 ]]></description>
<param><![CDATA[commandClass The concrete Command class
		 ]]></param>
</method>
<method name='addGuards' fullname='robotlegs.bender.extensions.commandCenter.impl:CommandMapping/addGuards' isStatic='false' isFinal='false' isOverride='false'  param_names='guards' param_types='restParam' param_defaults='undefined' result_type='robotlegs.bender.extensions.commandCenter.api:ICommandMapping'>
<description><![CDATA[
		 
		 A list of Guards to query before execution
		 ]]></description>
</method>
<method name='addHooks' fullname='robotlegs.bender.extensions.commandCenter.impl:CommandMapping/addHooks' isStatic='false' isFinal='false' isOverride='false'  param_names='hooks' param_types='restParam' param_defaults='undefined' result_type='robotlegs.bender.extensions.commandCenter.api:ICommandMapping'>
<description><![CDATA[
		 
		 A list of Hooks to run during execution
		 ]]></description>
</method>
<method name='setExecuteMethod' fullname='robotlegs.bender.extensions.commandCenter.impl:CommandMapping/setExecuteMethod' isStatic='false' isFinal='false' isOverride='false'  param_names='name' param_types='String' param_defaults='undefined' result_type='robotlegs.bender.extensions.commandCenter.api:ICommandMapping'>
<description><![CDATA[
		 
		 The "execute" method to invoke on the Command instance
		 ]]></description>
</method>
<method name='setFireOnce' fullname='robotlegs.bender.extensions.commandCenter.impl:CommandMapping/setFireOnce' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='Boolean' param_defaults='undefined' result_type='robotlegs.bender.extensions.commandCenter.api:ICommandMapping'>
<description><![CDATA[
		 
		 Unmaps a Command after a successful execution
		 ]]></description>
</method>
<method name='setPayloadInjectionEnabled' fullname='robotlegs.bender.extensions.commandCenter.impl:CommandMapping/setPayloadInjectionEnabled' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='Boolean' param_defaults='undefined' result_type='robotlegs.bender.extensions.commandCenter.api:ICommandMapping'>
<description><![CDATA[
		 
		 Supply the payload values via instance injection
		 ]]></description>
</method>
<method name='toString' fullname='robotlegs.bender.extensions.commandCenter.impl:CommandMapping/toString' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
</method>
<method name='commandClass' fullname='robotlegs.bender.extensions.commandCenter.impl:CommandMapping/commandClass/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Class'>
<description><![CDATA[
		 
		 The concrete Command Class for this mapping
		 ]]></description>
</method>
<method name='executeMethod' fullname='robotlegs.bender.extensions.commandCenter.impl:CommandMapping/executeMethod/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
		 
		 The "execute" method to invoke on the Command instance
		 ]]></description>
</method>
<method name='fireOnce' fullname='robotlegs.bender.extensions.commandCenter.impl:CommandMapping/fireOnce/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 
		 Unmaps a Command after a successful execution
		 ]]></description>
</method>
<method name='guards' fullname='robotlegs.bender.extensions.commandCenter.impl:CommandMapping/guards/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
		 
		 A list of Guards to query before execution
		 ]]></description>
</method>
<method name='hooks' fullname='robotlegs.bender.extensions.commandCenter.impl:CommandMapping/hooks/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
		 
		 A list of Hooks to run during execution
		 ]]></description>
</method>
<method name='payloadInjectionEnabled' fullname='robotlegs.bender.extensions.commandCenter.impl:CommandMapping/payloadInjectionEnabled/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 
		 Supply the payload values via instance injection
		 ]]></description>
</method>
<field name='_commandClass' fullname='robotlegs.bender.extensions.commandCenter.impl:CommandMapping/private:_commandClass' type='Class' isStatic='false' isConst='false' >
</field>
<field name='_executeMethod' fullname='robotlegs.bender.extensions.commandCenter.impl:CommandMapping/private:_executeMethod' type='String' isStatic='false' isConst='false' defaultValue='execute' >
</field>
<field name='_fireOnce' fullname='robotlegs.bender.extensions.commandCenter.impl:CommandMapping/private:_fireOnce' type='Boolean' isStatic='false' isConst='false' >
</field>
<field name='_guards' fullname='robotlegs.bender.extensions.commandCenter.impl:CommandMapping/private:_guards' type='Array' isStatic='false' isConst='false' defaultValue='unknown' >
</field>
<field name='_hooks' fullname='robotlegs.bender.extensions.commandCenter.impl:CommandMapping/private:_hooks' type='Array' isStatic='false' isConst='false' defaultValue='unknown' >
</field>
<field name='_payloadInjectionEnabled' fullname='robotlegs.bender.extensions.commandCenter.impl:CommandMapping/private:_payloadInjectionEnabled' type='Boolean' isStatic='false' isConst='false' defaultValue='true' >
</field>
<classRec name='CommandMapper' fullname='robotlegs.bender.extensions.commandCenter.impl:CommandMapper' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/commandCenter/impl/CommandMapper.as' namespace='robotlegs.bender.extensions.commandCenter.impl' access='public' baseclass='Object' interfaces='robotlegs.bender.extensions.commandCenter.dsl:ICommandMapper;robotlegs.bender.extensions.commandCenter.dsl:ICommandUnmapper;robotlegs.bender.extensions.commandCenter.dsl:ICommandConfigurator' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 ]]></description>
<private><![CDATA[]]></private>
</classRec>
<method name='CommandMapper' fullname='robotlegs.bender.extensions.commandCenter.impl:CommandMapper/CommandMapper' isStatic='false' isFinal='false' isOverride='false'  param_names='mappings' param_types='robotlegs.bender.extensions.commandCenter.api:ICommandMappingList' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 Creates a Command Mapper
		 ]]></description>
<param><![CDATA[mappings The command mapping list to add mappings to
		 ]]></param>
</method>
<method name='fromAll' fullname='robotlegs.bender.extensions.commandCenter.impl:CommandMapper/fromAll' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 
		 Unmaps all commands from this trigger
		 ]]></description>
</method>
<method name='fromCommand' fullname='robotlegs.bender.extensions.commandCenter.impl:CommandMapper/fromCommand' isStatic='false' isFinal='false' isOverride='false'  param_names='commandClass' param_types='Class' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 
		 Unmaps a Command
		 ]]></description>
<param><![CDATA[commandClass Command to unmap
		 ]]></param>
</method>
<method name='once' fullname='robotlegs.bender.extensions.commandCenter.impl:CommandMapper/once' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='Boolean' param_defaults='true' result_type='robotlegs.bender.extensions.commandCenter.dsl:ICommandConfigurator'>
<description><![CDATA[
		 
		 Should this command only run once?
		 ]]></description>
<param><![CDATA[value Toggle
		 ]]></param>
<return><![CDATA[Self
		 ]]></return>
</method>
<method name='toCommand' fullname='robotlegs.bender.extensions.commandCenter.impl:CommandMapper/toCommand' isStatic='false' isFinal='false' isOverride='false'  param_names='commandClass' param_types='Class' param_defaults='undefined' result_type='robotlegs.bender.extensions.commandCenter.dsl:ICommandConfigurator'>
<description><![CDATA[
		 
		 Creates a command mapping
		 ]]></description>
<param><![CDATA[commandClass The Command Class to map
		 ]]></param>
<return><![CDATA[Mapping configurator
		 ]]></return>
</method>
<method name='withExecuteMethod' fullname='robotlegs.bender.extensions.commandCenter.impl:CommandMapper/withExecuteMethod' isStatic='false' isFinal='false' isOverride='false'  param_names='name' param_types='String' param_defaults='undefined' result_type='robotlegs.bender.extensions.commandCenter.dsl:ICommandConfigurator'>
<description><![CDATA[
		 
		 The "execute" method to invoke on the Command instance
		 ]]></description>
<param><![CDATA[name Method name
		 ]]></param>
<return><![CDATA[Self
		 ]]></return>
</method>
<method name='withGuards' fullname='robotlegs.bender.extensions.commandCenter.impl:CommandMapper/withGuards' isStatic='false' isFinal='false' isOverride='false'  param_names='guards' param_types='restParam' param_defaults='undefined' result_type='robotlegs.bender.extensions.commandCenter.dsl:ICommandConfigurator'>
<description><![CDATA[
		 
		 Guards to check before allowing a command to execute
		 ]]></description>
<param><![CDATA[guards Guards
		 ]]></param>
<return><![CDATA[Self
		 ]]></return>
</method>
<method name='withHooks' fullname='robotlegs.bender.extensions.commandCenter.impl:CommandMapper/withHooks' isStatic='false' isFinal='false' isOverride='false'  param_names='hooks' param_types='restParam' param_defaults='undefined' result_type='robotlegs.bender.extensions.commandCenter.dsl:ICommandConfigurator'>
<description><![CDATA[
		 
		 Hooks to run before command execution
		 ]]></description>
<param><![CDATA[hooks Hooks
		 ]]></param>
<return><![CDATA[Self
		 ]]></return>
</method>
<method name='withPayloadInjection' fullname='robotlegs.bender.extensions.commandCenter.impl:CommandMapper/withPayloadInjection' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='Boolean' param_defaults='true' result_type='robotlegs.bender.extensions.commandCenter.dsl:ICommandConfigurator'>
<description><![CDATA[
		 
		 Should the payload values be injected into the command instance?
		 ]]></description>
<param><![CDATA[value Toggle
		 ]]></param>
<return><![CDATA[Self
		 ]]></return>
</method>
<field name='_mapping' fullname='robotlegs.bender.extensions.commandCenter.impl:CommandMapper/private:_mapping' type='robotlegs.bender.extensions.commandCenter.api:ICommandMapping' isStatic='false' isConst='false' >
</field>
<field name='_mappings' fullname='robotlegs.bender.extensions.commandCenter.impl:CommandMapper/private:_mappings' type='robotlegs.bender.extensions.commandCenter.api:ICommandMappingList' isStatic='false' isConst='false' >
</field>
<classRec name='CommandMappingList' fullname='robotlegs.bender.extensions.commandCenter.impl:CommandMappingList' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/commandCenter/impl/CommandMappingList.as' namespace='robotlegs.bender.extensions.commandCenter.impl' access='public' baseclass='Object' interfaces='robotlegs.bender.extensions.commandCenter.api:ICommandMappingList' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 ]]></description>
<private><![CDATA[]]></private>
</classRec>
<method name='CommandMappingList' fullname='robotlegs.bender.extensions.commandCenter.impl:CommandMappingList/CommandMappingList' isStatic='false' isFinal='false' isOverride='false'  param_names='trigger;processors;logger' param_types='robotlegs.bender.extensions.commandCenter.api:ICommandTrigger;Array;robotlegs.bender.framework.api:ILogger' param_defaults='undefined;undefined;null' result_type='*'>
<description><![CDATA[
		 Create a command mapping list
		 ]]></description>
<param><![CDATA[trigger The trigger that owns this list
		 ]]></param>
<param><![CDATA[processors A reference to the mapping processors for this command map
		 ]]></param>
<param><![CDATA[logger Optional logger
		 ]]></param>
</method>
<method name='addMapping' fullname='robotlegs.bender.extensions.commandCenter.impl:CommandMappingList/addMapping' isStatic='false' isFinal='false' isOverride='false'  param_names='mapping' param_types='robotlegs.bender.extensions.commandCenter.api:ICommandMapping' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 
		 Adds a mapping to the mapping list
		 ]]></description>
<param><![CDATA[mapping Command mapping
		 ]]></param>
</method>
<method name='applyProcessors' fullname='robotlegs.bender.extensions.commandCenter.impl:CommandMappingList/private:applyProcessors' isStatic='false' isFinal='false' isOverride='false'  param_names='mapping' param_types='robotlegs.bender.extensions.commandCenter.api:ICommandMapping' param_defaults='undefined' result_type='void'>
</method>
<method name='deleteMapping' fullname='robotlegs.bender.extensions.commandCenter.impl:CommandMappingList/private:deleteMapping' isStatic='false' isFinal='false' isOverride='false'  param_names='mapping' param_types='robotlegs.bender.extensions.commandCenter.api:ICommandMapping' param_defaults='undefined' result_type='void'>
</method>
<method name='getList' fullname='robotlegs.bender.extensions.commandCenter.impl:CommandMappingList/getList' isStatic='false' isFinal='false' isOverride='false'  result_type='Vector$robotlegs.bender.extensions.commandCenter.api:ICommandMapping'>
<description><![CDATA[
		 
		 Sorted list of active mappings
		 ]]></description>
<return><![CDATA[List of mappings
		 ]]></return>
</method>
<method name='overwriteMapping' fullname='robotlegs.bender.extensions.commandCenter.impl:CommandMappingList/private:overwriteMapping' isStatic='false' isFinal='false' isOverride='false'  param_names='oldMapping;newMapping' param_types='robotlegs.bender.extensions.commandCenter.api:ICommandMapping;robotlegs.bender.extensions.commandCenter.api:ICommandMapping' param_defaults='undefined;undefined' result_type='void'>
</method>
<method name='removeAllMappings' fullname='robotlegs.bender.extensions.commandCenter.impl:CommandMappingList/removeAllMappings' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 
		 Removes all mappings for this command mapping list
		 ]]></description>
</method>
<method name='removeMappingFor' fullname='robotlegs.bender.extensions.commandCenter.impl:CommandMappingList/removeMappingFor' isStatic='false' isFinal='false' isOverride='false'  param_names='commandClass' param_types='Class' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 
		 Removes a mapping from the mapping list using the Command class
		 ]]></description>
<param><![CDATA[commandClass The command class to remove the mapping for
		 ]]></param>
</method>
<method name='removeMapping' fullname='robotlegs.bender.extensions.commandCenter.impl:CommandMappingList/removeMapping' isStatic='false' isFinal='false' isOverride='false'  param_names='mapping' param_types='robotlegs.bender.extensions.commandCenter.api:ICommandMapping' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 
		 Removes a mapping from the mapping list
		 ]]></description>
<param><![CDATA[mapping Command mapping
		 ]]></param>
</method>
<method name='sortMappings' fullname='robotlegs.bender.extensions.commandCenter.impl:CommandMappingList/private:sortMappings' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='storeMapping' fullname='robotlegs.bender.extensions.commandCenter.impl:CommandMappingList/private:storeMapping' isStatic='false' isFinal='false' isOverride='false'  param_names='mapping' param_types='robotlegs.bender.extensions.commandCenter.api:ICommandMapping' param_defaults='undefined' result_type='void'>
</method>
<method name='withSortFunction' fullname='robotlegs.bender.extensions.commandCenter.impl:CommandMappingList/withSortFunction' isStatic='false' isFinal='false' isOverride='false'  param_names='sorter' param_types='Function' param_defaults='undefined' result_type='robotlegs.bender.extensions.commandCenter.api:ICommandMappingList'>
<description><![CDATA[
		 
		 Optional mapping sort function
		 ]]></description>
<param><![CDATA[sorter Sort function
		 ]]></param>
<return><![CDATA[Self
		 ]]></return>
</method>
<field name='_compareFunction' fullname='robotlegs.bender.extensions.commandCenter.impl:CommandMappingList/private:_compareFunction' type='Function' isStatic='false' isConst='false' >
</field>
<field name='_logger' fullname='robotlegs.bender.extensions.commandCenter.impl:CommandMappingList/private:_logger' type='robotlegs.bender.framework.api:ILogger' isStatic='false' isConst='false' >
</field>
<field name='_mappingsByCommand' fullname='robotlegs.bender.extensions.commandCenter.impl:CommandMappingList/private:_mappingsByCommand' type='flash.utils:Dictionary' isStatic='false' isConst='true' defaultValue='unknown' >
</field>
<field name='_mappings' fullname='robotlegs.bender.extensions.commandCenter.impl:CommandMappingList/private:_mappings' type='Vector$robotlegs.bender.extensions.commandCenter.api:ICommandMapping' isStatic='false' isConst='false' defaultValue='unknown' >
</field>
<field name='_processors' fullname='robotlegs.bender.extensions.commandCenter.impl:CommandMappingList/private:_processors' type='Array' isStatic='false' isConst='false' >
</field>
<field name='_sorted' fullname='robotlegs.bender.extensions.commandCenter.impl:CommandMappingList/private:_sorted' type='Boolean' isStatic='false' isConst='false' >
</field>
<field name='_trigger' fullname='robotlegs.bender.extensions.commandCenter.impl:CommandMappingList/private:_trigger' type='robotlegs.bender.extensions.commandCenter.api:ICommandTrigger' isStatic='false' isConst='false' >
</field>
<classRec name='CommandTriggerMap' fullname='robotlegs.bender.extensions.commandCenter.impl:CommandTriggerMap' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/commandCenter/impl/CommandTriggerMap.as' namespace='robotlegs.bender.extensions.commandCenter.impl' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 ]]></description>
<private><![CDATA[]]></private>
</classRec>
<method name='CommandTriggerMap' fullname='robotlegs.bender.extensions.commandCenter.impl:CommandTriggerMap/CommandTriggerMap' isStatic='false' isFinal='false' isOverride='false'  param_names='keyFactory;triggerFactory' param_types='Function;Function' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[
		 Creates a command trigger map
		 ]]></description>
<param><![CDATA[keyFactory Factory function to creates keys
		 ]]></param>
<param><![CDATA[triggerFactory Factory function to create triggers
		 ]]></param>
</method>
<method name='createTrigger' fullname='robotlegs.bender.extensions.commandCenter.impl:CommandTriggerMap/private:createTrigger' isStatic='false' isFinal='false' isOverride='false'  param_names='mapperArgs' param_types='Array' param_defaults='undefined' result_type='robotlegs.bender.extensions.commandCenter.api:ICommandTrigger'>
</method>
<method name='destroyTrigger' fullname='robotlegs.bender.extensions.commandCenter.impl:CommandTriggerMap/private:destroyTrigger' isStatic='false' isFinal='false' isOverride='false'  param_names='key' param_types='Object' param_defaults='undefined' result_type='robotlegs.bender.extensions.commandCenter.api:ICommandTrigger'>
</method>
<method name='getKey' fullname='robotlegs.bender.extensions.commandCenter.impl:CommandTriggerMap/private:getKey' isStatic='false' isFinal='false' isOverride='false'  param_names='mapperArgs' param_types='Array' param_defaults='undefined' result_type='Object'>
</method>
<method name='getTrigger' fullname='robotlegs.bender.extensions.commandCenter.impl:CommandTriggerMap/getTrigger' isStatic='false' isFinal='false' isOverride='false'  param_names='params' param_types='restParam' param_defaults='undefined' result_type='robotlegs.bender.extensions.commandCenter.api:ICommandTrigger'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='removeTrigger' fullname='robotlegs.bender.extensions.commandCenter.impl:CommandTriggerMap/removeTrigger' isStatic='false' isFinal='false' isOverride='false'  param_names='params' param_types='restParam' param_defaults='undefined' result_type='robotlegs.bender.extensions.commandCenter.api:ICommandTrigger'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='_keyFactory' fullname='robotlegs.bender.extensions.commandCenter.impl:CommandTriggerMap/private:_keyFactory' type='Function' isStatic='false' isConst='false' >
</field>
<field name='_triggerFactory' fullname='robotlegs.bender.extensions.commandCenter.impl:CommandTriggerMap/private:_triggerFactory' type='Function' isStatic='false' isConst='false' >
</field>
<field name='_triggers' fullname='robotlegs.bender.extensions.commandCenter.impl:CommandTriggerMap/private:_triggers' type='flash.utils:Dictionary' isStatic='false' isConst='true' defaultValue='unknown' >
</field>
<classRec name='CommandExecutor' fullname='robotlegs.bender.extensions.commandCenter.impl:CommandExecutor' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/commandCenter/impl/CommandExecutor.as' namespace='robotlegs.bender.extensions.commandCenter.impl' access='public' baseclass='Object' interfaces='robotlegs.bender.extensions.commandCenter.api:ICommandExecutor' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 ]]></description>
<private><![CDATA[]]></private>
</classRec>
<method name='CommandExecutor' fullname='robotlegs.bender.extensions.commandCenter.impl:CommandExecutor/CommandExecutor' isStatic='false' isFinal='false' isOverride='false'  param_names='injector;removeMapping;handleResult' param_types='robotlegs.bender.framework.api:IInjector;Function;Function' param_defaults='undefined;null;null' result_type='*'>
<description><![CDATA[
		 Creates a Command Executor
		 ]]></description>
<param><![CDATA[injector The Injector to use. A child injector will be created from it.
		 ]]></param>
<param><![CDATA[removeMapping Remove mapping handler (optional)
		 ]]></param>
<param><![CDATA[handleResult Result handler (optional)
		 ]]></param>
</method>
<method name='executeCommand' fullname='robotlegs.bender.extensions.commandCenter.impl:CommandExecutor/executeCommand' isStatic='false' isFinal='false' isOverride='false'  param_names='mapping;payload' param_types='robotlegs.bender.extensions.commandCenter.api:ICommandMapping;robotlegs.bender.extensions.commandCenter.api:CommandPayload' param_defaults='undefined;null' result_type='void'>
<description><![CDATA[
		 
		 Execute a command for a given mapping
		 ]]></description>
<param><![CDATA[mapping The Command Mapping
		 ]]></param>
<param><![CDATA[payload The Command Payload
		 ]]></param>
</method>
<method name='executeCommands' fullname='robotlegs.bender.extensions.commandCenter.impl:CommandExecutor/executeCommands' isStatic='false' isFinal='false' isOverride='false'  param_names='mappings;payload' param_types='Vector$robotlegs.bender.extensions.commandCenter.api:ICommandMapping;robotlegs.bender.extensions.commandCenter.api:CommandPayload' param_defaults='undefined;null' result_type='void'>
<description><![CDATA[
		 
		 Execute a list of commands for a given list of mappings
		 ]]></description>
<param><![CDATA[mappings The Command Mappings
		 ]]></param>
<param><![CDATA[payload The Command Payload
		 ]]></param>
</method>
<method name='mapPayload' fullname='robotlegs.bender.extensions.commandCenter.impl:CommandExecutor/private:mapPayload' isStatic='false' isFinal='false' isOverride='false'  param_names='payload' param_types='robotlegs.bender.extensions.commandCenter.api:CommandPayload' param_defaults='undefined' result_type='void'>
</method>
<method name='unmapPayload' fullname='robotlegs.bender.extensions.commandCenter.impl:CommandExecutor/private:unmapPayload' isStatic='false' isFinal='false' isOverride='false'  param_names='payload' param_types='robotlegs.bender.extensions.commandCenter.api:CommandPayload' param_defaults='undefined' result_type='void'>
</method>
<field name='_handleResult' fullname='robotlegs.bender.extensions.commandCenter.impl:CommandExecutor/private:_handleResult' type='Function' isStatic='false' isConst='false' >
</field>
<field name='_injector' fullname='robotlegs.bender.extensions.commandCenter.impl:CommandExecutor/private:_injector' type='robotlegs.bender.framework.api:IInjector' isStatic='false' isConst='false' >
</field>
<field name='_removeMapping' fullname='robotlegs.bender.extensions.commandCenter.impl:CommandExecutor/private:_removeMapping' type='Function' isStatic='false' isConst='false' >
</field>
<classRec name='TypeMatcherError' fullname='robotlegs.bender.extensions.matching:TypeMatcherError' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/matching/TypeMatcherError.as' namespace='robotlegs.bender.extensions.matching' access='public' baseclass='Error' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Type Matcher Error
	 ]]></description>
</classRec>
<method name='TypeMatcherError' fullname='robotlegs.bender.extensions.matching:TypeMatcherError/TypeMatcherError' isStatic='false' isFinal='false' isOverride='false'  param_names='message' param_types='String' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 Creates a Type Matcher Error
		 ]]></description>
<param><![CDATA[message The error message
		 ]]></param>
</method>
<field name='EMPTY_MATCHER' fullname='robotlegs.bender.extensions.matching:TypeMatcherError/EMPTY_MATCHER' type='String' isStatic='true' isConst='true' defaultValue='An empty matcher will create a filter which matches nothing. You should specify at least one condition for the filter.' >
</field>
<field name='SEALED_MATCHER' fullname='robotlegs.bender.extensions.matching:TypeMatcherError/SEALED_MATCHER' type='String' isStatic='true' isConst='true' defaultValue='This matcher has been sealed and can no longer be configured.' >
</field>
<interfaceRec name='ITypeFilter' fullname='robotlegs.bender.extensions.matching:ITypeFilter' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/matching/ITypeFilter.as' namespace='robotlegs.bender.extensions.matching' access='public' baseClasses='robotlegs.bender.framework.api:IMatcher' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 A Type Filter describes a Type Matcher
	 ]]></description>
</interfaceRec>
<method name='allOfTypes' fullname='robotlegs.bender.extensions.matching:ITypeFilter/robotlegs.bender.extensions.matching:ITypeFilter:allOfTypes/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Vector$Class'>
<description><![CDATA[
		 All types that an item must extend or implement
		 ]]></description>
</method>
<method name='anyOfTypes' fullname='robotlegs.bender.extensions.matching:ITypeFilter/robotlegs.bender.extensions.matching:ITypeFilter:anyOfTypes/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Vector$Class'>
<description><![CDATA[
		 Any types that an item must extend or implement
		 ]]></description>
</method>
<method name='descriptor' fullname='robotlegs.bender.extensions.matching:ITypeFilter/robotlegs.bender.extensions.matching:ITypeFilter:descriptor/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
		 Unique description for this filter
		 ]]></description>
</method>
<method name='noneOfTypes' fullname='robotlegs.bender.extensions.matching:ITypeFilter/robotlegs.bender.extensions.matching:ITypeFilter:noneOfTypes/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Vector$Class'>
<description><![CDATA[
		 Types that an item must not extend or implement
		 ]]></description>
</method>
<interfaceRec name='ITypeMatcher' fullname='robotlegs.bender.extensions.matching:ITypeMatcher' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/matching/ITypeMatcher.as' namespace='robotlegs.bender.extensions.matching' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Type matcher interface
	 ]]></description>
</interfaceRec>
<method name='createTypeFilter' fullname='robotlegs.bender.extensions.matching:ITypeMatcher/robotlegs.bender.extensions.matching:ITypeMatcher:createTypeFilter' isStatic='false' isFinal='false' isOverride='false'  result_type='robotlegs.bender.extensions.matching:ITypeFilter'>
<description><![CDATA[
		 Creates a Type Filter for this Type Matcher
		 ]]></description>
<return><![CDATA[The Type Filter
		 ]]></return>
</method>
<method name='instanceOfType' fullname='robotlegs.bender.extensions.matching:instanceOfType' isStatic='false' isFinal='false' isOverride='false'  param_names='type' param_types='Class' param_defaults='undefined' result_type='robotlegs.bender.framework.api:IMatcher'>
<description><![CDATA[
	 Creates a matcher that matches objects of the given type
	 ]]></description>
<param><![CDATA[type The type to match
	 ]]></param>
<return><![CDATA[A matcher
	 ]]></return>
</method>
<classRec name='TypeFilter' fullname='robotlegs.bender.extensions.matching:TypeFilter' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/matching/TypeFilter.as' namespace='robotlegs.bender.extensions.matching' access='public' baseclass='Object' interfaces='robotlegs.bender.extensions.matching:ITypeFilter' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 ]]></description>
<private><![CDATA[]]></private>
</classRec>
<method name='TypeFilter' fullname='robotlegs.bender.extensions.matching:TypeFilter/TypeFilter' isStatic='false' isFinal='false' isOverride='false'  param_names='allOf;anyOf;noneOf' param_types='Vector$Class;Vector$Class;Vector$Class' param_defaults='undefined;undefined;undefined' result_type='*'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='alphabetiseCaseInsensitiveFCQNs' fullname='robotlegs.bender.extensions.matching:TypeFilter/protected:alphabetiseCaseInsensitiveFCQNs' isStatic='false' isFinal='false' isOverride='false'  param_names='classVector' param_types='Vector$Class' param_defaults='undefined' result_type='Vector$String'>
</method>
<method name='createDescriptor' fullname='robotlegs.bender.extensions.matching:TypeFilter/protected:createDescriptor' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
</method>
<method name='matches' fullname='robotlegs.bender.extensions.matching:TypeFilter/matches' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 Does this object match the given criteria?
		 		 ]]></description>
<param><![CDATA[item The object to test
		 ]]></param>
<return><![CDATA[Boolean
		 ]]></return>
</method>
<method name='stringSort' fullname='robotlegs.bender.extensions.matching:TypeFilter/protected:stringSort' isStatic='false' isFinal='false' isOverride='false'  param_names='item1;item2' param_types='String;String' param_defaults='undefined;undefined' result_type='int'>
</method>
<method name='allOfTypes' fullname='robotlegs.bender.extensions.matching:TypeFilter/allOfTypes/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Vector$Class'>
<description><![CDATA[
		 
		 All types that an item must extend or implement
		 ]]></description>
</method>
<method name='anyOfTypes' fullname='robotlegs.bender.extensions.matching:TypeFilter/anyOfTypes/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Vector$Class'>
<description><![CDATA[
		 
		 Any types that an item must extend or implement
		 ]]></description>
</method>
<method name='descriptor' fullname='robotlegs.bender.extensions.matching:TypeFilter/descriptor/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
		 
		 Unique description for this filter
		 ]]></description>
</method>
<method name='noneOfTypes' fullname='robotlegs.bender.extensions.matching:TypeFilter/noneOfTypes/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Vector$Class'>
<description><![CDATA[
		 
		 Types that an item must not extend or implement
		 ]]></description>
</method>
<field name='_allOfTypes' fullname='robotlegs.bender.extensions.matching:TypeFilter/protected:_allOfTypes' type='Vector$Class' isStatic='false' isConst='false' >
</field>
<field name='_anyOfTypes' fullname='robotlegs.bender.extensions.matching:TypeFilter/protected:_anyOfTypes' type='Vector$Class' isStatic='false' isConst='false' >
</field>
<field name='_descriptor' fullname='robotlegs.bender.extensions.matching:TypeFilter/protected:_descriptor' type='String' isStatic='false' isConst='false' >
</field>
<field name='_noneOfTypes' fullname='robotlegs.bender.extensions.matching:TypeFilter/protected:_noneOfTypes' type='Vector$Class' isStatic='false' isConst='false' >
</field>
<classRec name='PackageMatcher' fullname='robotlegs.bender.extensions.matching:PackageMatcher' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/matching/PackageMatcher.as' namespace='robotlegs.bender.extensions.matching' access='public' baseclass='Object' interfaces='robotlegs.bender.extensions.matching:ITypeMatcher' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 A Package Matcher matches types in a given package
	 ]]></description>
</classRec>
<method name='anyOf' fullname='robotlegs.bender.extensions.matching:PackageMatcher/anyOf' isStatic='false' isFinal='false' isOverride='false'  param_names='packages' param_types='restParam' param_defaults='undefined' result_type='robotlegs.bender.extensions.matching:PackageMatcher'>
<description><![CDATA[
		 Any packages that an item might be declared
		 ]]></description>
</method>
<method name='buildTypeFilter' fullname='robotlegs.bender.extensions.matching:PackageMatcher/protected:buildTypeFilter' isStatic='false' isFinal='false' isOverride='false'  result_type='robotlegs.bender.extensions.matching:ITypeFilter'>
</method>
<method name='createTypeFilter' fullname='robotlegs.bender.extensions.matching:PackageMatcher/createTypeFilter' isStatic='false' isFinal='false' isOverride='false'  result_type='robotlegs.bender.extensions.matching:ITypeFilter'>
<description><![CDATA[
		 
		 Creates a Type Filter for this Type Matcher
		 ]]></description>
<return><![CDATA[The Type Filter
		 ]]></return>
</method>
<method name='lock' fullname='robotlegs.bender.extensions.matching:PackageMatcher/lock' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 Locks this matcher
		 ]]></description>
</method>
<method name='noneOf' fullname='robotlegs.bender.extensions.matching:PackageMatcher/noneOf' isStatic='false' isFinal='false' isOverride='false'  param_names='packages' param_types='restParam' param_defaults='undefined' result_type='robotlegs.bender.extensions.matching:PackageMatcher'>
<description><![CDATA[
		 Packages that an item must not live in
		 ]]></description>
</method>
<method name='pushAddedPackagesTo' fullname='robotlegs.bender.extensions.matching:PackageMatcher/protected:pushAddedPackagesTo' isStatic='false' isFinal='false' isOverride='false'  param_names='packages;targetSet' param_types='Array;Vector$String' param_defaults='undefined;undefined' result_type='void'>
</method>
<method name='pushValuesToStringVector' fullname='robotlegs.bender.extensions.matching:PackageMatcher/protected:pushValuesToStringVector' isStatic='false' isFinal='false' isOverride='false'  param_names='values;vector' param_types='Array;Vector$String' param_defaults='undefined;undefined' result_type='void'>
</method>
<method name='require' fullname='robotlegs.bender.extensions.matching:PackageMatcher/require' isStatic='false' isFinal='false' isOverride='false'  param_names='fullPackage' param_types='String' param_defaults='undefined' result_type='robotlegs.bender.extensions.matching:PackageMatcher'>
<description><![CDATA[
		 The full package that is required
		 ]]></description>
<param><![CDATA[fullPackage
		 ]]></param>
<return><![CDATA[Self
		 ]]></return>
</method>
<method name='throwSealedMatcherError' fullname='robotlegs.bender.extensions.matching:PackageMatcher/protected:throwSealedMatcherError' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<field name='_anyOfPackages' fullname='robotlegs.bender.extensions.matching:PackageMatcher/protected:_anyOfPackages' type='Vector$String' isStatic='false' isConst='true' defaultValue='unknown' >
</field>
<field name='_noneOfPackages' fullname='robotlegs.bender.extensions.matching:PackageMatcher/protected:_noneOfPackages' type='Vector$String' isStatic='false' isConst='true' defaultValue='unknown' >
</field>
<field name='_requirePackage' fullname='robotlegs.bender.extensions.matching:PackageMatcher/protected:_requirePackage' type='String' isStatic='false' isConst='false' >
</field>
<field name='_typeFilter' fullname='robotlegs.bender.extensions.matching:PackageMatcher/protected:_typeFilter' type='robotlegs.bender.extensions.matching:ITypeFilter' isStatic='false' isConst='false' >
</field>
<classRec name='PackageFilter' fullname='robotlegs.bender.extensions.matching:PackageFilter' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/matching/PackageFilter.as' namespace='robotlegs.bender.extensions.matching' access='public' baseclass='Object' interfaces='robotlegs.bender.extensions.matching:ITypeFilter' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 A filter that describes a package matcher
	 ]]></description>
</classRec>
<method name='PackageFilter' fullname='robotlegs.bender.extensions.matching:PackageFilter/PackageFilter' isStatic='false' isFinal='false' isOverride='false'  param_names='requiredPackage;anyOfPackages;noneOfPackages' param_types='String;Vector$String;Vector$String' param_defaults='undefined;undefined;undefined' result_type='*'>
<description><![CDATA[
		 Creates a new Package Filter
		 ]]></description>
<param><![CDATA[requiredPackage
		 ]]></param>
<param><![CDATA[anyOfPackages
		 ]]></param>
<param><![CDATA[noneOfPackages
		 ]]></param>
</method>
<method name='createDescriptor' fullname='robotlegs.bender.extensions.matching:PackageFilter/private:createDescriptor' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
</method>
<method name='matchPackageInFQCN' fullname='robotlegs.bender.extensions.matching:PackageFilter/private:matchPackageInFQCN' isStatic='false' isFinal='false' isOverride='false'  param_names='packageName;fqcn' param_types='String;String' param_defaults='undefined;undefined' result_type='Boolean'>
</method>
<method name='matches' fullname='robotlegs.bender.extensions.matching:PackageFilter/matches' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 
		 Does this object match the given criteria?
		 		 ]]></description>
<param><![CDATA[item The object to test
		 ]]></param>
<return><![CDATA[Boolean
		 ]]></return>
</method>
<method name='stringSort' fullname='robotlegs.bender.extensions.matching:PackageFilter/protected:stringSort' isStatic='false' isFinal='false' isOverride='false'  param_names='item1;item2' param_types='String;String' param_defaults='undefined;undefined' result_type='int'>
</method>
<method name='allOfTypes' fullname='robotlegs.bender.extensions.matching:PackageFilter/allOfTypes/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Vector$Class'>
<description><![CDATA[
		 
		 All types that an item must extend or implement
		 ]]></description>
</method>
<method name='anyOfTypes' fullname='robotlegs.bender.extensions.matching:PackageFilter/anyOfTypes/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Vector$Class'>
<description><![CDATA[
		 
		 Any types that an item must extend or implement
		 ]]></description>
</method>
<method name='descriptor' fullname='robotlegs.bender.extensions.matching:PackageFilter/descriptor/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
		 
		 Unique description for this filter
		 ]]></description>
</method>
<method name='noneOfTypes' fullname='robotlegs.bender.extensions.matching:PackageFilter/noneOfTypes/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Vector$Class'>
<description><![CDATA[
		 
		 Types that an item must not extend or implement
		 ]]></description>
</method>
<field name='_anyOfPackages' fullname='robotlegs.bender.extensions.matching:PackageFilter/protected:_anyOfPackages' type='Vector$String' isStatic='false' isConst='false' >
</field>
<field name='_descriptor' fullname='robotlegs.bender.extensions.matching:PackageFilter/protected:_descriptor' type='String' isStatic='false' isConst='false' >
</field>
<field name='_noneOfPackages' fullname='robotlegs.bender.extensions.matching:PackageFilter/protected:_noneOfPackages' type='Vector$String' isStatic='false' isConst='false' >
</field>
<field name='_requirePackage' fullname='robotlegs.bender.extensions.matching:PackageFilter/protected:_requirePackage' type='String' isStatic='false' isConst='false' >
</field>
<field name='emptyVector' fullname='robotlegs.bender.extensions.matching:PackageFilter/protected:emptyVector' type='Vector$Class' isStatic='false' isConst='true' defaultValue='unknown' >
</field>
<interfaceRec name='ITypeMatcherFactory' fullname='robotlegs.bender.extensions.matching:ITypeMatcherFactory' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/matching/ITypeMatcherFactory.as' namespace='robotlegs.bender.extensions.matching' access='public' baseClasses='robotlegs.bender.extensions.matching:ITypeMatcher' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Type Matcher Factory
	 ]]></description>
</interfaceRec>
<method name='clone' fullname='robotlegs.bender.extensions.matching:ITypeMatcherFactory/robotlegs.bender.extensions.matching:ITypeMatcherFactory:clone' isStatic='false' isFinal='false' isOverride='false'  result_type='robotlegs.bender.extensions.matching:TypeMatcher'>
<description><![CDATA[
		 Creates a clone of this matcher
		 ]]></description>
<return><![CDATA[The clone
		 ]]></return>
</method>
<classRec name='TypeMatcher' fullname='robotlegs.bender.extensions.matching:TypeMatcher' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/matching/TypeMatcher.as' namespace='robotlegs.bender.extensions.matching' access='public' baseclass='Object' interfaces='robotlegs.bender.extensions.matching:ITypeMatcher;robotlegs.bender.extensions.matching:ITypeMatcherFactory' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 A Type Matcher matches objects that satisfy type matching rules
	 ]]></description>
</classRec>
<method name='allOf' fullname='robotlegs.bender.extensions.matching:TypeMatcher/allOf' isStatic='false' isFinal='false' isOverride='false'  param_names='types' param_types='restParam' param_defaults='undefined' result_type='robotlegs.bender.extensions.matching:TypeMatcher'>
<description><![CDATA[
		 All types that an item must extend or implement
		 ]]></description>
</method>
<method name='anyOf' fullname='robotlegs.bender.extensions.matching:TypeMatcher/anyOf' isStatic='false' isFinal='false' isOverride='false'  param_names='types' param_types='restParam' param_defaults='undefined' result_type='robotlegs.bender.extensions.matching:TypeMatcher'>
<description><![CDATA[
		 Any types that an item must extend or implement
		 ]]></description>
</method>
<method name='buildTypeFilter' fullname='robotlegs.bender.extensions.matching:TypeMatcher/protected:buildTypeFilter' isStatic='false' isFinal='false' isOverride='false'  result_type='robotlegs.bender.extensions.matching:ITypeFilter'>
</method>
<method name='clone' fullname='robotlegs.bender.extensions.matching:TypeMatcher/clone' isStatic='false' isFinal='false' isOverride='false'  result_type='robotlegs.bender.extensions.matching:TypeMatcher'>
<description><![CDATA[
		 
		 Creates a clone of this matcher
		 ]]></description>
<return><![CDATA[The clone
		 ]]></return>
</method>
<method name='createTypeFilter' fullname='robotlegs.bender.extensions.matching:TypeMatcher/createTypeFilter' isStatic='false' isFinal='false' isOverride='false'  result_type='robotlegs.bender.extensions.matching:ITypeFilter'>
<description><![CDATA[
		 
		 Creates a Type Filter for this Type Matcher
		 ]]></description>
<return><![CDATA[The Type Filter
		 ]]></return>
</method>
<method name='lock' fullname='robotlegs.bender.extensions.matching:TypeMatcher/lock' isStatic='false' isFinal='false' isOverride='false'  result_type='robotlegs.bender.extensions.matching:ITypeMatcherFactory'>
<description><![CDATA[
		 Locks this type matcher
		 ]]></description>
<return><![CDATA[]]></return>
</method>
<method name='noneOf' fullname='robotlegs.bender.extensions.matching:TypeMatcher/noneOf' isStatic='false' isFinal='false' isOverride='false'  param_names='types' param_types='restParam' param_defaults='undefined' result_type='robotlegs.bender.extensions.matching:TypeMatcher'>
<description><![CDATA[
		 Types that an item must not extend or implement
		 ]]></description>
</method>
<method name='pushAddedTypesTo' fullname='robotlegs.bender.extensions.matching:TypeMatcher/protected:pushAddedTypesTo' isStatic='false' isFinal='false' isOverride='false'  param_names='types;targetSet' param_types='Array;Vector$Class' param_defaults='undefined;undefined' result_type='void'>
</method>
<method name='pushValuesToClassVector' fullname='robotlegs.bender.extensions.matching:TypeMatcher/protected:pushValuesToClassVector' isStatic='false' isFinal='false' isOverride='false'  param_names='values;vector' param_types='Array;Vector$Class' param_defaults='undefined;undefined' result_type='void'>
</method>
<method name='throwSealedMatcherError' fullname='robotlegs.bender.extensions.matching:TypeMatcher/protected:throwSealedMatcherError' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<field name='_allOfTypes' fullname='robotlegs.bender.extensions.matching:TypeMatcher/protected:_allOfTypes' type='Vector$Class' isStatic='false' isConst='true' defaultValue='unknown' >
</field>
<field name='_anyOfTypes' fullname='robotlegs.bender.extensions.matching:TypeMatcher/protected:_anyOfTypes' type='Vector$Class' isStatic='false' isConst='true' defaultValue='unknown' >
</field>
<field name='_noneOfTypes' fullname='robotlegs.bender.extensions.matching:TypeMatcher/protected:_noneOfTypes' type='Vector$Class' isStatic='false' isConst='true' defaultValue='unknown' >
</field>
<field name='_typeFilter' fullname='robotlegs.bender.extensions.matching:TypeMatcher/protected:_typeFilter' type='robotlegs.bender.extensions.matching:ITypeFilter' isStatic='false' isConst='false' >
</field>
<classRec name='Mediator' fullname='robotlegs.bender.bundles.mvcs:Mediator' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/bundles/mvcs/Mediator.as' namespace='robotlegs.bender.bundles.mvcs' access='public' baseclass='Object' interfaces='robotlegs.bender.extensions.mediatorMap.api:IMediator' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Classic Robotlegs mediator implementation
	 	 <p>Override initialize and destroy to hook into the mediator lifecycle.</p>
	 ]]></description>
</classRec>
<method name='addContextListener' fullname='robotlegs.bender.bundles.mvcs:Mediator/protected:addContextListener' isStatic='false' isFinal='false' isOverride='false'  param_names='eventString;listener;eventClass' param_types='String;Function;Class' param_defaults='undefined;undefined;null' result_type='void'>
</method>
<method name='addViewListener' fullname='robotlegs.bender.bundles.mvcs:Mediator/protected:addViewListener' isStatic='false' isFinal='false' isOverride='false'  param_names='eventString;listener;eventClass' param_types='String;Function;Class' param_defaults='undefined;undefined;null' result_type='void'>
</method>
<method name='destroy' fullname='robotlegs.bender.bundles.mvcs:Mediator/destroy' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 
		 Destroys the mediator. This is run automatically by the mediatorMap when a mediator is destroyed.
		 You should clean up any handlers that were added directly (eventMap handlers will be cleaned up automatically).
		 ]]></description>
</method>
<method name='dispatch' fullname='robotlegs.bender.bundles.mvcs:Mediator/protected:dispatch' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='void'>
</method>
<method name='initialize' fullname='robotlegs.bender.bundles.mvcs:Mediator/initialize' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 
		 Initializes the mediator. This is run automatically by the mediatorMap when a mediator is created.
		 Normally the initialize function is where you would add handlers using the eventMap.
		 ]]></description>
</method>
<method name='postDestroy' fullname='robotlegs.bender.bundles.mvcs:Mediator/postDestroy' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 Runs after the mediator has been destroyed.
		 Cleans up listeners mapped through the local EventMap.
		 ]]></description>
</method>
<method name='removeContextListener' fullname='robotlegs.bender.bundles.mvcs:Mediator/protected:removeContextListener' isStatic='false' isFinal='false' isOverride='false'  param_names='eventString;listener;eventClass' param_types='String;Function;Class' param_defaults='undefined;undefined;null' result_type='void'>
</method>
<method name='removeViewListener' fullname='robotlegs.bender.bundles.mvcs:Mediator/protected:removeViewListener' isStatic='false' isFinal='false' isOverride='false'  param_names='eventString;listener;eventClass' param_types='String;Function;Class' param_defaults='undefined;undefined;null' result_type='void'>
</method>
<method name='viewComponent' fullname='robotlegs.bender.bundles.mvcs:Mediator/viewComponent/set' isStatic='false' isFinal='false' isOverride='false'  param_names='view' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='_viewComponent' fullname='robotlegs.bender.bundles.mvcs:Mediator/private:_viewComponent' type='Object' isStatic='false' isConst='false' >
</field>
<field name='eventDispatcher' fullname='robotlegs.bender.bundles.mvcs:Mediator/eventDispatcher' type='flash.events:IEventDispatcher' isStatic='false' isConst='false' >
</field>
<field name='eventMap' fullname='robotlegs.bender.bundles.mvcs:Mediator/eventMap' type='robotlegs.bender.extensions.localEventMap.api:IEventMap' isStatic='false' isConst='false' >
</field>
<classRec name='Command' fullname='robotlegs.bender.bundles.mvcs:Command' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/bundles/mvcs/Command.as' namespace='robotlegs.bender.bundles.mvcs' access='public' baseclass='Object' interfaces='robotlegs.bender.extensions.commandCenter.api:ICommand' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Abstract command implementation
	 	 <p>Please note: you do not have to extend this class.
	 Any class with an execute method can be used.</p>
	 ]]></description>
</classRec>
<method name='execute' fullname='robotlegs.bender.bundles.mvcs:Command/execute' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 
		 The execute method
		 ]]></description>
</method>
<classRec name='MVCSBundle' fullname='robotlegs.bender.bundles.mvcs:MVCSBundle' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/bundles/mvcs/MVCSBundle.as' namespace='robotlegs.bender.bundles.mvcs' access='public' baseclass='Object' interfaces='robotlegs.bender.framework.api:IBundle' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 For that Classic Robotlegs flavour
	 	 <p>This bundle installs a number of extensions commonly used
	 in typical Robotlegs applications and modules.</p>
	 ]]></description>
</classRec>
<method name='extend' fullname='robotlegs.bender.bundles.mvcs:MVCSBundle/extend' isStatic='false' isFinal='false' isOverride='false'  param_names='context' param_types='robotlegs.bender.framework.api:IContext' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 
		 This method will be called immediately when the extension/bundle is installed.
		 		 <p>Note: the context may not be fully initialized yet. A bundle should do
		 little more than install additional bundles/extensions. An extension
		 can add lifecycle handlers to the context instance to perform synchronized
		 initialization.</p>
		 		 ]]></description>
<param><![CDATA[context The context that this extension/bundle is being installed into.
		 ]]></param>
</method>
<classRec name='ViewProcessorMapError' fullname='robotlegs.bender.extensions.viewProcessorMap.api:ViewProcessorMapError' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/viewProcessorMap/api/ViewProcessorMapError.as' namespace='robotlegs.bender.extensions.viewProcessorMap.api' access='public' baseclass='Error' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 View Processor Map Error
	 ]]></description>
</classRec>
<method name='ViewProcessorMapError' fullname='robotlegs.bender.extensions.viewProcessorMap.api:ViewProcessorMapError/ViewProcessorMapError' isStatic='false' isFinal='false' isOverride='false'  param_names='message' param_types='String' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 Creates a View Processor Map Error
		 ]]></description>
<param><![CDATA[message The error message
		 ]]></param>
</method>
<interfaceRec name='IViewProcessorMap' fullname='robotlegs.bender.extensions.viewProcessorMap.api:IViewProcessorMap' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/viewProcessorMap/api/IViewProcessorMap.as' namespace='robotlegs.bender.extensions.viewProcessorMap.api' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The View Processor Map allows you to bind views to processors
	 ]]></description>
</interfaceRec>
<method name='mapMatcher' fullname='robotlegs.bender.extensions.viewProcessorMap.api:IViewProcessorMap/robotlegs.bender.extensions.viewProcessorMap.api:IViewProcessorMap:mapMatcher' isStatic='false' isFinal='false' isOverride='false'  param_names='matcher' param_types='robotlegs.bender.extensions.matching:ITypeMatcher' param_defaults='undefined' result_type='robotlegs.bender.extensions.viewProcessorMap.dsl:IViewProcessorMapper'>
<description><![CDATA[
		 Maps a matcher that will be tested against incoming items to be handled.
		 ]]></description>
<param><![CDATA[matcher The type or package matcher specifying the rules for matching.
		 ]]></param>
<return><![CDATA[the mapper so that you can continue the mapping.
		 ]]></return>
</method>
<method name='map' fullname='robotlegs.bender.extensions.viewProcessorMap.api:IViewProcessorMap/robotlegs.bender.extensions.viewProcessorMap.api:IViewProcessorMap:map' isStatic='false' isFinal='false' isOverride='false'  param_names='type' param_types='Class' param_defaults='undefined' result_type='robotlegs.bender.extensions.viewProcessorMap.dsl:IViewProcessorMapper'>
<description><![CDATA[
		 Maps a type that will be tested against incoming items to be handled.
		 Under the hood this will create a TypeMatcher for this type.
		 ]]></description>
<param><![CDATA[type The class or interface to be matched against.
		 ]]></param>
<return><![CDATA[the mapper so that you can continue the mapping.
		 ]]></return>
</method>
<method name='process' fullname='robotlegs.bender.extensions.viewProcessorMap.api:IViewProcessorMap/robotlegs.bender.extensions.viewProcessorMap.api:IViewProcessorMap:process' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Processes an item directly. If the item matches any mapped matchers or types then it will be processed according to those mappings.
		 ]]></description>
<param><![CDATA[item The item to process.
		 ]]></param>
</method>
<method name='unmapMatcher' fullname='robotlegs.bender.extensions.viewProcessorMap.api:IViewProcessorMap/robotlegs.bender.extensions.viewProcessorMap.api:IViewProcessorMap:unmapMatcher' isStatic='false' isFinal='false' isOverride='false'  param_names='matcher' param_types='robotlegs.bender.extensions.matching:ITypeMatcher' param_defaults='undefined' result_type='robotlegs.bender.extensions.viewProcessorMap.dsl:IViewProcessorUnmapper'>
<description><![CDATA[
		 Removes a mapping that was made against a matcher.
		 No error will be thrown if there isn't a mapping to remove.
		 ]]></description>
<param><![CDATA[matcher The type or package matcher specifying the rules for matching.
		 ]]></param>
<return><![CDATA[the unmapper so that you can continue the unmapping.
		 ]]></return>
</method>
<method name='unmap' fullname='robotlegs.bender.extensions.viewProcessorMap.api:IViewProcessorMap/robotlegs.bender.extensions.viewProcessorMap.api:IViewProcessorMap:unmap' isStatic='false' isFinal='false' isOverride='false'  param_names='type' param_types='Class' param_defaults='undefined' result_type='robotlegs.bender.extensions.viewProcessorMap.dsl:IViewProcessorUnmapper'>
<description><![CDATA[
		 Removes a mapping that was made against a type.
		 No error will be thrown if there isn't a mapping to remove.
		 ]]></description>
<param><![CDATA[type The class or interface to be matched against.
		 ]]></param>
<return><![CDATA[the unmapper so that you can continue the unmapping.
		 ]]></return>
</method>
<method name='unprocess' fullname='robotlegs.bender.extensions.viewProcessorMap.api:IViewProcessorMap/robotlegs.bender.extensions.viewProcessorMap.api:IViewProcessorMap:unprocess' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Runs unprocess on relevant processors for an item if there are any.
		 ]]></description>
<param><![CDATA[item The item to unprocess.
		 ]]></param>
</method>
<classRec name='NullMediatorUnmapper' fullname='robotlegs.bender.extensions.mediatorMap.impl:NullMediatorUnmapper' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/mediatorMap/impl/NullMediatorUnmapper.as' namespace='robotlegs.bender.extensions.mediatorMap.impl' access='public' baseclass='Object' interfaces='robotlegs.bender.extensions.mediatorMap.dsl:IMediatorUnmapper' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 ]]></description>
<private><![CDATA[]]></private>
</classRec>
<method name='fromAll' fullname='robotlegs.bender.extensions.mediatorMap.impl:NullMediatorUnmapper/fromAll' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='fromMediator' fullname='robotlegs.bender.extensions.mediatorMap.impl:NullMediatorUnmapper/fromMediator' isStatic='false' isFinal='false' isOverride='false'  param_names='mediatorClass' param_types='Class' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<classRec name='MediatorMapping' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorMapping' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/mediatorMap/impl/MediatorMapping.as' namespace='robotlegs.bender.extensions.mediatorMap.impl' access='public' baseclass='Object' interfaces='robotlegs.bender.extensions.mediatorMap.api:IMediatorMapping;robotlegs.bender.extensions.mediatorMap.dsl:IMediatorConfigurator' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 ]]></description>
<private><![CDATA[]]></private>
</classRec>
<method name='MediatorMapping' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorMapping/MediatorMapping' isStatic='false' isFinal='false' isOverride='false'  param_names='matcher;mediatorClass' param_types='robotlegs.bender.extensions.matching:ITypeFilter;Class' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='autoRemove' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorMapping/autoRemove' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='Boolean' param_defaults='true' result_type='robotlegs.bender.extensions.mediatorMap.dsl:IMediatorConfigurator'>
<description><![CDATA[
		 
		 Should the mediator be removed when the mediated item looses scope?
		 		 <p>Usually this would be when the mediated item is a Display Object
		 and it leaves the stage.</p>
		 		 ]]></description>
<param><![CDATA[value Boolean
		 ]]></param>
<return><![CDATA[Self
		 ]]></return>
</method>
<method name='withGuards' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorMapping/withGuards' isStatic='false' isFinal='false' isOverride='false'  param_names='guards' param_types='restParam' param_defaults='undefined' result_type='robotlegs.bender.extensions.mediatorMap.dsl:IMediatorConfigurator'>
<description><![CDATA[
		 
		 Guards to check before allowing a mediator to be created
		 ]]></description>
<param><![CDATA[guards Guards
		 ]]></param>
<return><![CDATA[Self
		 ]]></return>
</method>
<method name='withHooks' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorMapping/withHooks' isStatic='false' isFinal='false' isOverride='false'  param_names='hooks' param_types='restParam' param_defaults='undefined' result_type='robotlegs.bender.extensions.mediatorMap.dsl:IMediatorConfigurator'>
<description><![CDATA[
		 
		 Hooks to run before a mediator is created
		 ]]></description>
<param><![CDATA[hooks Hooks
		 ]]></param>
<return><![CDATA[Self
		 ]]></return>
</method>
<method name='autoRemoveEnabled' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorMapping/autoRemoveEnabled/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
		 
		 Should the mediator be removed when the mediated item looses scope?
		 ]]></description>
</method>
<method name='guards' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorMapping/guards/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
		 
		 A list of guards to check before allowing mediator creation
		 ]]></description>
</method>
<method name='hooks' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorMapping/hooks/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
		 
		 A list of hooks to run before creating a mediator
		 ]]></description>
</method>
<method name='matcher' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorMapping/matcher/get' isStatic='false' isFinal='false' isOverride='false'  result_type='robotlegs.bender.extensions.matching:ITypeFilter'>
<description><![CDATA[
		 
		 The matcher for this mapping
		 ]]></description>
</method>
<method name='mediatorClass' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorMapping/mediatorClass/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Class'>
<description><![CDATA[
		 
		 The concrete mediator class
		 ]]></description>
</method>
<field name='_autoRemoveEnabled' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorMapping/private:_autoRemoveEnabled' type='Boolean' isStatic='false' isConst='false' defaultValue='true' >
</field>
<field name='_guards' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorMapping/private:_guards' type='Array' isStatic='false' isConst='false' defaultValue='unknown' >
</field>
<field name='_hooks' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorMapping/private:_hooks' type='Array' isStatic='false' isConst='false' defaultValue='unknown' >
</field>
<field name='_matcher' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorMapping/private:_matcher' type='robotlegs.bender.extensions.matching:ITypeFilter' isStatic='false' isConst='false' >
</field>
<field name='_mediatorClass' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorMapping/private:_mediatorClass' type='Class' isStatic='false' isConst='false' >
</field>
<classRec name='MediatorMapper' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorMapper' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/mediatorMap/impl/MediatorMapper.as' namespace='robotlegs.bender.extensions.mediatorMap.impl' access='public' baseclass='Object' interfaces='robotlegs.bender.extensions.mediatorMap.dsl:IMediatorMapper;robotlegs.bender.extensions.mediatorMap.dsl:IMediatorUnmapper' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 ]]></description>
<private><![CDATA[]]></private>
</classRec>
<method name='MediatorMapper' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorMapper/MediatorMapper' isStatic='false' isFinal='false' isOverride='false'  param_names='typeFilter;handler;logger' param_types='robotlegs.bender.extensions.matching:ITypeFilter;robotlegs.bender.extensions.mediatorMap.impl:MediatorViewHandler;robotlegs.bender.framework.api:ILogger' param_defaults='undefined;undefined;null' result_type='*'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='createMapping' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorMapper/private:createMapping' isStatic='false' isFinal='false' isOverride='false'  param_names='mediatorClass' param_types='Class' param_defaults='undefined' result_type='robotlegs.bender.extensions.mediatorMap.impl:MediatorMapping'>
</method>
<method name='deleteMapping' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorMapper/private:deleteMapping' isStatic='false' isFinal='false' isOverride='false'  param_names='mapping' param_types='robotlegs.bender.extensions.mediatorMap.api:IMediatorMapping' param_defaults='undefined' result_type='void'>
</method>
<method name='fromAll' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorMapper/fromAll' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 
		 Unmaps all mediator mappings for this matcher
		 ]]></description>
</method>
<method name='fromMediator' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorMapper/fromMediator' isStatic='false' isFinal='false' isOverride='false'  param_names='mediatorClass' param_types='Class' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 
		 Unmaps a mediator from this matcher
		 ]]></description>
<param><![CDATA[mediatorClass Mediator to unmap
		 ]]></param>
</method>
<method name='overwriteMapping' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorMapper/private:overwriteMapping' isStatic='false' isFinal='false' isOverride='false'  param_names='mapping' param_types='robotlegs.bender.extensions.mediatorMap.api:IMediatorMapping' param_defaults='undefined' result_type='robotlegs.bender.extensions.mediatorMap.dsl:IMediatorConfigurator'>
</method>
<method name='toMediator' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorMapper/toMediator' isStatic='false' isFinal='false' isOverride='false'  param_names='mediatorClass' param_types='Class' param_defaults='undefined' result_type='robotlegs.bender.extensions.mediatorMap.dsl:IMediatorConfigurator'>
<description><![CDATA[
		 
		 Maps a matcher to a concrete Mediator class
		 ]]></description>
<param><![CDATA[mediatorClass The concrete mediator class
		 ]]></param>
<return><![CDATA[Mapping configurator
		 ]]></return>
</method>
<field name='_handler' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorMapper/private:_handler' type='robotlegs.bender.extensions.mediatorMap.impl:MediatorViewHandler' isStatic='false' isConst='false' >
</field>
<field name='_logger' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorMapper/private:_logger' type='robotlegs.bender.framework.api:ILogger' isStatic='false' isConst='false' >
</field>
<field name='_mappings' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorMapper/private:_mappings' type='flash.utils:Dictionary' isStatic='false' isConst='true' defaultValue='unknown' >
</field>
<field name='_typeFilter' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorMapper/private:_typeFilter' type='robotlegs.bender.extensions.matching:ITypeFilter' isStatic='false' isConst='false' >
</field>
<classRec name='MediatorFactory' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorFactory' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/mediatorMap/impl/MediatorFactory.as' namespace='robotlegs.bender.extensions.mediatorMap.impl' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 ]]></description>
<private><![CDATA[]]></private>
</classRec>
<method name='MediatorFactory' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorFactory/MediatorFactory' isStatic='false' isFinal='false' isOverride='false'  param_names='injector;manager' param_types='robotlegs.bender.framework.api:IInjector;robotlegs.bender.extensions.mediatorMap.impl:MediatorManager' param_defaults='undefined;null' result_type='*'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='addMediator' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorFactory/private:addMediator' isStatic='false' isFinal='false' isOverride='false'  param_names='mediator;item;mapping' param_types='Object;Object;robotlegs.bender.extensions.mediatorMap.api:IMediatorMapping' param_defaults='undefined;undefined;undefined' result_type='void'>
</method>
<method name='createMediator' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorFactory/private:createMediator' isStatic='false' isFinal='false' isOverride='false'  param_names='item;mapping' param_types='Object;robotlegs.bender.extensions.mediatorMap.api:IMediatorMapping' param_defaults='undefined;undefined' result_type='Object'>
</method>
<method name='createMediators' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorFactory/createMediators' isStatic='false' isFinal='false' isOverride='false'  param_names='item;type;mappings' param_types='Object;Class;Array' param_defaults='undefined;undefined;undefined' result_type='Array'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getMediator' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorFactory/getMediator' isStatic='false' isFinal='false' isOverride='false'  param_names='item;mapping' param_types='Object;robotlegs.bender.extensions.mediatorMap.api:IMediatorMapping' param_defaults='undefined;undefined' result_type='Object'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='mapTypeForFilterBinding' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorFactory/private:mapTypeForFilterBinding' isStatic='false' isFinal='false' isOverride='false'  param_names='filter;type;item' param_types='robotlegs.bender.extensions.matching:ITypeFilter;Class;Object' param_defaults='undefined;undefined;undefined' result_type='void'>
</method>
<method name='removeAllMediators' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorFactory/removeAllMediators' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='removeMediators' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorFactory/removeMediators' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='requiredTypesFor' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorFactory/private:requiredTypesFor' isStatic='false' isFinal='false' isOverride='false'  param_names='filter;type' param_types='robotlegs.bender.extensions.matching:ITypeFilter;Class' param_defaults='undefined;undefined' result_type='Vector$Class'>
</method>
<method name='unmapTypeForFilterBinding' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorFactory/private:unmapTypeForFilterBinding' isStatic='false' isFinal='false' isOverride='false'  param_names='filter;type;item' param_types='robotlegs.bender.extensions.matching:ITypeFilter;Class;Object' param_defaults='undefined;undefined;undefined' result_type='void'>
</method>
<field name='_injector' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorFactory/private:_injector' type='robotlegs.bender.framework.api:IInjector' isStatic='false' isConst='false' >
</field>
<field name='_manager' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorFactory/private:_manager' type='robotlegs.bender.extensions.mediatorMap.impl:MediatorManager' isStatic='false' isConst='false' >
</field>
<field name='_mediators' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorFactory/private:_mediators' type='flash.utils:Dictionary' isStatic='false' isConst='true' defaultValue='unknown' >
</field>
<classRec name='MediatorManager' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorManager' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/mediatorMap/impl/MediatorManager.as' namespace='robotlegs.bender.extensions.mediatorMap.impl' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	]]></description>
<private><![CDATA[]]></private>
</classRec>
<method name='MediatorManager' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorManager/MediatorManager' isStatic='false' isFinal='false' isOverride='false'  param_names='factory' param_types='robotlegs.bender.extensions.mediatorMap.impl:MediatorFactory' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='addMediator' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorManager/addMediator' isStatic='false' isFinal='false' isOverride='false'  param_names='mediator;item;mapping' param_types='Object;Object;robotlegs.bender.extensions.mediatorMap.api:IMediatorMapping' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='checkFlex' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorManager/private:checkFlex' isStatic='true' isFinal='false' isOverride='false'  result_type='Boolean'>
</method>
<method name='destroyMediator' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorManager/private:destroyMediator' isStatic='false' isFinal='false' isOverride='false'  param_names='mediator' param_types='Object' param_defaults='undefined' result_type='void'>
</method>
<method name='initializeMediator' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorManager/private:initializeMediator' isStatic='false' isFinal='false' isOverride='false'  param_names='mediator;mediatedItem' param_types='Object;Object' param_defaults='undefined;undefined' result_type='void'>
</method>
<method name='onRemovedFromStage' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorManager/private:onRemovedFromStage' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='void'>
</method>
<method name='removeMediator' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorManager/removeMediator' isStatic='false' isFinal='false' isOverride='false'  param_names='mediator;item;mapping' param_types='Object;Object;robotlegs.bender.extensions.mediatorMap.api:IMediatorMapping' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='CREATION_COMPLETE' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorManager/private:CREATION_COMPLETE' type='String' isStatic='true' isConst='true' defaultValue='creationComplete' >
</field>
<field name='UIComponentClass' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorManager/private:UIComponentClass' type='Class' isStatic='true' isConst='false' >
</field>
<field name='_factory' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorManager/private:_factory' type='robotlegs.bender.extensions.mediatorMap.impl:MediatorFactory' isStatic='false' isConst='false' >
</field>
<field name='flexAvailable' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorManager/private:flexAvailable' type='Boolean' isStatic='true' isConst='true' defaultValue='unknown' >
</field>
<classRec name='MediatorViewHandler' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorViewHandler' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/mediatorMap/impl/MediatorViewHandler.as' namespace='robotlegs.bender.extensions.mediatorMap.impl' access='public' baseclass='Object' interfaces='robotlegs.bender.extensions.viewManager.api:IViewHandler' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 ]]></description>
<private><![CDATA[]]></private>
</classRec>
<method name='MediatorViewHandler' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorViewHandler/MediatorViewHandler' isStatic='false' isFinal='false' isOverride='false'  param_names='factory' param_types='robotlegs.bender.extensions.mediatorMap.impl:MediatorFactory' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='addMapping' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorViewHandler/addMapping' isStatic='false' isFinal='false' isOverride='false'  param_names='mapping' param_types='robotlegs.bender.extensions.mediatorMap.api:IMediatorMapping' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='flushCache' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorViewHandler/private:flushCache' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='getInterestedMappingsFor' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorViewHandler/private:getInterestedMappingsFor' isStatic='false' isFinal='false' isOverride='false'  param_names='item;type' param_types='Object;Class' param_defaults='undefined;undefined' result_type='Array'>
</method>
<method name='handleItem' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorViewHandler/handleItem' isStatic='false' isFinal='false' isOverride='false'  param_names='item;type' param_types='Object;Class' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='handleView' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorViewHandler/handleView' isStatic='false' isFinal='false' isOverride='false'  param_names='view;type' param_types='flash.display:DisplayObject;Class' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='removeMapping' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorViewHandler/removeMapping' isStatic='false' isFinal='false' isOverride='false'  param_names='mapping' param_types='robotlegs.bender.extensions.mediatorMap.api:IMediatorMapping' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='_factory' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorViewHandler/private:_factory' type='robotlegs.bender.extensions.mediatorMap.impl:MediatorFactory' isStatic='false' isConst='false' >
</field>
<field name='_knownMappings' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorViewHandler/private:_knownMappings' type='flash.utils:Dictionary' isStatic='false' isConst='false' defaultValue='unknown' >
</field>
<field name='_mappings' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorViewHandler/private:_mappings' type='Array' isStatic='false' isConst='true' defaultValue='unknown' >
</field>
<classRec name='MediatorMap' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorMap' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/mediatorMap/impl/MediatorMap.as' namespace='robotlegs.bender.extensions.mediatorMap.impl' access='public' baseclass='Object' interfaces='robotlegs.bender.extensions.mediatorMap.api:IMediatorMap;robotlegs.bender.extensions.viewManager.api:IViewHandler' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 ]]></description>
<private><![CDATA[]]></private>
</classRec>
<method name='MediatorMap' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorMap/MediatorMap' isStatic='false' isFinal='false' isOverride='false'  param_names='context' param_types='robotlegs.bender.framework.api:IContext' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='createMapper' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorMap/private:createMapper' isStatic='false' isFinal='false' isOverride='false'  param_names='matcher' param_types='robotlegs.bender.extensions.matching:ITypeMatcher' param_defaults='undefined' result_type='robotlegs.bender.extensions.mediatorMap.dsl:IMediatorMapper'>
</method>
<method name='handleView' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorMap/handleView' isStatic='false' isFinal='false' isOverride='false'  param_names='view;type' param_types='flash.display:DisplayObject;Class' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 
		 View handler method
		 ]]></description>
<param><![CDATA[view The view instance to handle
		 ]]></param>
<param><![CDATA[type The class of the view instance
		 ]]></param>
</method>
<method name='mapMatcher' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorMap/mapMatcher' isStatic='false' isFinal='false' isOverride='false'  param_names='matcher' param_types='robotlegs.bender.extensions.matching:ITypeMatcher' param_defaults='undefined' result_type='robotlegs.bender.extensions.mediatorMap.dsl:IMediatorMapper'>
<description><![CDATA[
		 
		 Maps a matcher that will be tested against incoming items to be handled.
		 ]]></description>
<param><![CDATA[matcher The type or package matcher specifying the rules for matching.
		 ]]></param>
<return><![CDATA[the mapper so that you can continue the mapping.
		 ]]></return>
</method>
<method name='map' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorMap/map' isStatic='false' isFinal='false' isOverride='false'  param_names='type' param_types='Class' param_defaults='undefined' result_type='robotlegs.bender.extensions.mediatorMap.dsl:IMediatorMapper'>
<description><![CDATA[
		 
		 Maps a type that will be tested against incoming items to be handled.
		 Under the hood this will create a TypeMatcher for this type.
		 ]]></description>
<param><![CDATA[type The class or interface to be matched against.
		 ]]></param>
<return><![CDATA[the mapper so that you can continue the mapping.
		 ]]></return>
</method>
<method name='mediate' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorMap/mediate' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 
		 Mediates an item directly. If the item matches any mapped matchers or types then it will be mediated according to those mappings.
		 ]]></description>
<param><![CDATA[item The item to create mediators for.
		 ]]></param>
</method>
<method name='unmapMatcher' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorMap/unmapMatcher' isStatic='false' isFinal='false' isOverride='false'  param_names='matcher' param_types='robotlegs.bender.extensions.matching:ITypeMatcher' param_defaults='undefined' result_type='robotlegs.bender.extensions.mediatorMap.dsl:IMediatorUnmapper'>
<description><![CDATA[
		 
		 Removes a mapping that was made against a matcher.
		 No error will be thrown if there isn't a mapping to remove.
		 ]]></description>
<param><![CDATA[matcher The type or package matcher specifying the rules for matching.
		 ]]></param>
<return><![CDATA[the unmapper so that you can continue the unmapping.
		 ]]></return>
</method>
<method name='unmap' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorMap/unmap' isStatic='false' isFinal='false' isOverride='false'  param_names='type' param_types='Class' param_defaults='undefined' result_type='robotlegs.bender.extensions.mediatorMap.dsl:IMediatorUnmapper'>
<description><![CDATA[
		 
		 Removes a mapping that was made against a type.
		 No error will be thrown if there isn't a mapping to remove.
		 ]]></description>
<param><![CDATA[type The class or interface to be matched against.
		 ]]></param>
<return><![CDATA[the unmapper so that you can continue the unmapping.
		 ]]></return>
</method>
<method name='unmediateAll' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorMap/unmediateAll' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 
		 Removes all mediators
		 ]]></description>
</method>
<method name='unmediate' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorMap/unmediate' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 
		 Removes the mediators for an item if there are any.
		 ]]></description>
<param><![CDATA[item The item to remove mediators for.
		 ]]></param>
</method>
<field name='NULL_UNMAPPER' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorMap/private:NULL_UNMAPPER' type='robotlegs.bender.extensions.mediatorMap.dsl:IMediatorUnmapper' isStatic='false' isConst='true' defaultValue='unknown' >
</field>
<field name='_factory' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorMap/private:_factory' type='robotlegs.bender.extensions.mediatorMap.impl:MediatorFactory' isStatic='false' isConst='false' >
</field>
<field name='_logger' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorMap/private:_logger' type='robotlegs.bender.framework.api:ILogger' isStatic='false' isConst='false' >
</field>
<field name='_mappers' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorMap/private:_mappers' type='flash.utils:Dictionary' isStatic='false' isConst='true' defaultValue='unknown' >
</field>
<field name='_viewHandler' fullname='robotlegs.bender.extensions.mediatorMap.impl:MediatorMap/private:_viewHandler' type='robotlegs.bender.extensions.mediatorMap.impl:MediatorViewHandler' isStatic='false' isConst='false' >
</field>
<classRec name='ModuleConnectionConfigurator' fullname='robotlegs.bender.extensions.modularity.impl:ModuleConnectionConfigurator' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/modularity/impl/ModuleConnectionConfigurator.as' namespace='robotlegs.bender.extensions.modularity.impl' access='public' baseclass='Object' interfaces='robotlegs.bender.extensions.modularity.dsl:IModuleConnectionAction' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 ]]></description>
<private><![CDATA[]]></private>
</classRec>
<method name='ModuleConnectionConfigurator' fullname='robotlegs.bender.extensions.modularity.impl:ModuleConnectionConfigurator/ModuleConnectionConfigurator' isStatic='false' isFinal='false' isOverride='false'  param_names='localDispatcher;channelDispatcher' param_types='flash.events:IEventDispatcher;flash.events:IEventDispatcher' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='destroy' fullname='robotlegs.bender.extensions.modularity.impl:ModuleConnectionConfigurator/destroy' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='receiveEvent' fullname='robotlegs.bender.extensions.modularity.impl:ModuleConnectionConfigurator/receiveEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='eventType' param_types='String' param_defaults='undefined' result_type='robotlegs.bender.extensions.modularity.dsl:IModuleConnectionAction'>
<description><![CDATA[
		 ]]></description>
</method>
<method name='relayEvent' fullname='robotlegs.bender.extensions.modularity.impl:ModuleConnectionConfigurator/relayEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='eventType' param_types='String' param_defaults='undefined' result_type='robotlegs.bender.extensions.modularity.dsl:IModuleConnectionAction'>
<description><![CDATA[
		 ]]></description>
</method>
<method name='resume' fullname='robotlegs.bender.extensions.modularity.impl:ModuleConnectionConfigurator/resume' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 ]]></description>
</method>
<method name='suspend' fullname='robotlegs.bender.extensions.modularity.impl:ModuleConnectionConfigurator/suspend' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 ]]></description>
</method>
<field name='_channelToLocalRelay' fullname='robotlegs.bender.extensions.modularity.impl:ModuleConnectionConfigurator/private:_channelToLocalRelay' type='robotlegs.bender.extensions.eventDispatcher.impl:EventRelay' isStatic='false' isConst='false' >
</field>
<field name='_localToChannelRelay' fullname='robotlegs.bender.extensions.modularity.impl:ModuleConnectionConfigurator/private:_localToChannelRelay' type='robotlegs.bender.extensions.eventDispatcher.impl:EventRelay' isStatic='false' isConst='false' >
</field>
<classRec name='ModularContextEvent' fullname='robotlegs.bender.extensions.modularity.impl:ModularContextEvent' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/modularity/impl/ModularContextEvent.as' namespace='robotlegs.bender.extensions.modularity.impl' access='public' baseclass='flash.events:Event' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Module Context Event
	 ]]></description>
<private><![CDATA[]]></private>
</classRec>
<method name='ModularContextEvent' fullname='robotlegs.bender.extensions.modularity.impl:ModularContextEvent/ModularContextEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='type;context' param_types='String;robotlegs.bender.framework.api:IContext' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[
		 Creates a Module Context Event
		 ]]></description>
<param><![CDATA[type The event type
		 ]]></param>
<param><![CDATA[context The associated context
		 ]]></param>
</method>
<method name='clone' fullname='robotlegs.bender.extensions.modularity.impl:ModularContextEvent/clone' isStatic='false' isFinal='false' isOverride='true'  result_type='flash.events:Event'>
<description><![CDATA[
		 ]]></description>
<inheritDoc><![CDATA[]]></inheritDoc>
</method>
<method name='toString' fullname='robotlegs.bender.extensions.modularity.impl:ModularContextEvent/toString' isStatic='false' isFinal='false' isOverride='true'  result_type='String'>
</method>
<method name='context' fullname='robotlegs.bender.extensions.modularity.impl:ModularContextEvent/context/get' isStatic='false' isFinal='false' isOverride='false'  result_type='robotlegs.bender.framework.api:IContext'>
<description><![CDATA[
		 The context associated with this event
		 ]]></description>
</method>
<field name='CONTEXT_ADD' fullname='robotlegs.bender.extensions.modularity.impl:ModularContextEvent/CONTEXT_ADD' type='String' isStatic='true' isConst='true' defaultValue='contextAdd' >
</field>
<field name='_context' fullname='robotlegs.bender.extensions.modularity.impl:ModularContextEvent/private:_context' type='robotlegs.bender.framework.api:IContext' isStatic='false' isConst='false' >
</field>
<classRec name='ModuleConnector' fullname='robotlegs.bender.extensions.modularity.impl:ModuleConnector' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/modularity/impl/ModuleConnector.as' namespace='robotlegs.bender.extensions.modularity.impl' access='public' baseclass='Object' interfaces='robotlegs.bender.extensions.modularity.api:IModuleConnector' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 ]]></description>
<private><![CDATA[]]></private>
</classRec>
<method name='ModuleConnector' fullname='robotlegs.bender.extensions.modularity.impl:ModuleConnector/ModuleConnector' isStatic='false' isFinal='false' isOverride='false'  param_names='context' param_types='robotlegs.bender.framework.api:IContext' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='createConfigurator' fullname='robotlegs.bender.extensions.modularity.impl:ModuleConnector/private:createConfigurator' isStatic='false' isFinal='false' isOverride='false'  param_names='channelId' param_types='String' param_defaults='undefined' result_type='robotlegs.bender.extensions.modularity.impl:ModuleConnectionConfigurator'>
</method>
<method name='destroy' fullname='robotlegs.bender.extensions.modularity.impl:ModuleConnector/private:destroy' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='getOrCreateConfigurator' fullname='robotlegs.bender.extensions.modularity.impl:ModuleConnector/private:getOrCreateConfigurator' isStatic='false' isFinal='false' isOverride='false'  param_names='channelId' param_types='String' param_defaults='undefined' result_type='robotlegs.bender.extensions.modularity.impl:ModuleConnectionConfigurator'>
</method>
<method name='getRootInjector' fullname='robotlegs.bender.extensions.modularity.impl:ModuleConnector/private:getRootInjector' isStatic='false' isFinal='false' isOverride='false'  param_names='injector' param_types='robotlegs.bender.framework.api:IInjector' param_defaults='undefined' result_type='robotlegs.bender.framework.api:IInjector'>
</method>
<method name='onChannel' fullname='robotlegs.bender.extensions.modularity.impl:ModuleConnector/onChannel' isStatic='false' isFinal='false' isOverride='false'  param_names='channelId' param_types='String' param_defaults='undefined' result_type='robotlegs.bender.extensions.modularity.dsl:IModuleConnectionAction'>
<description><![CDATA[
		 
		 Connects to a specified channel
		 ]]></description>
<param><![CDATA[channelId The channel Id
		 ]]></param>
<return><![CDATA[Configurator
		 ]]></return>
</method>
<method name='onDefaultChannel' fullname='robotlegs.bender.extensions.modularity.impl:ModuleConnector/onDefaultChannel' isStatic='false' isFinal='false' isOverride='false'  result_type='robotlegs.bender.extensions.modularity.dsl:IModuleConnectionAction'>
<description><![CDATA[
		 
		 Connects to the default channel
		 ]]></description>
<return><![CDATA[Configurator
		 ]]></return>
</method>
<field name='_configuratorsByChannel' fullname='robotlegs.bender.extensions.modularity.impl:ModuleConnector/private:_configuratorsByChannel' type='Object' isStatic='false' isConst='false' defaultValue='unknown' >
</field>
<field name='_localDispatcher' fullname='robotlegs.bender.extensions.modularity.impl:ModuleConnector/private:_localDispatcher' type='flash.events:IEventDispatcher' isStatic='false' isConst='false' >
</field>
<field name='_rootInjector' fullname='robotlegs.bender.extensions.modularity.impl:ModuleConnector/private:_rootInjector' type='robotlegs.bender.framework.api:IInjector' isStatic='false' isConst='false' >
</field>
<classRec name='ViewManagerBasedExistenceWatcher' fullname='robotlegs.bender.extensions.modularity.impl:ViewManagerBasedExistenceWatcher' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/modularity/impl/ViewManagerBasedExistenceWatcher.as' namespace='robotlegs.bender.extensions.modularity.impl' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 ]]></description>
<private><![CDATA[]]></private>
</classRec>
<method name='ViewManagerBasedExistenceWatcher' fullname='robotlegs.bender.extensions.modularity.impl:ViewManagerBasedExistenceWatcher/ViewManagerBasedExistenceWatcher' isStatic='false' isFinal='false' isOverride='false'  param_names='context;viewManager' param_types='robotlegs.bender.framework.api:IContext;robotlegs.bender.extensions.viewManager.api:IViewManager' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='destroy' fullname='robotlegs.bender.extensions.modularity.impl:ViewManagerBasedExistenceWatcher/private:destroy' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='init' fullname='robotlegs.bender.extensions.modularity.impl:ViewManagerBasedExistenceWatcher/private:init' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='onContainerAdd' fullname='robotlegs.bender.extensions.modularity.impl:ViewManagerBasedExistenceWatcher/private:onContainerAdd' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='robotlegs.bender.extensions.viewManager.impl:ViewManagerEvent' param_defaults='undefined' result_type='void'>
</method>
<method name='onContainerRemove' fullname='robotlegs.bender.extensions.modularity.impl:ViewManagerBasedExistenceWatcher/private:onContainerRemove' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='robotlegs.bender.extensions.viewManager.impl:ViewManagerEvent' param_defaults='undefined' result_type='void'>
</method>
<method name='onContextAdd' fullname='robotlegs.bender.extensions.modularity.impl:ViewManagerBasedExistenceWatcher/private:onContextAdd' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='robotlegs.bender.extensions.modularity.impl:ModularContextEvent' param_defaults='undefined' result_type='void'>
</method>
<field name='_context' fullname='robotlegs.bender.extensions.modularity.impl:ViewManagerBasedExistenceWatcher/private:_context' type='robotlegs.bender.framework.api:IContext' isStatic='false' isConst='false' >
</field>
<field name='_logger' fullname='robotlegs.bender.extensions.modularity.impl:ViewManagerBasedExistenceWatcher/private:_logger' type='robotlegs.bender.framework.api:ILogger' isStatic='false' isConst='false' >
</field>
<field name='_viewManager' fullname='robotlegs.bender.extensions.modularity.impl:ViewManagerBasedExistenceWatcher/private:_viewManager' type='robotlegs.bender.extensions.viewManager.api:IViewManager' isStatic='false' isConst='false' >
</field>
<classRec name='ContextViewBasedExistenceWatcher' fullname='robotlegs.bender.extensions.modularity.impl:ContextViewBasedExistenceWatcher' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/modularity/impl/ContextViewBasedExistenceWatcher.as' namespace='robotlegs.bender.extensions.modularity.impl' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 ]]></description>
<private><![CDATA[]]></private>
</classRec>
<method name='ContextViewBasedExistenceWatcher' fullname='robotlegs.bender.extensions.modularity.impl:ContextViewBasedExistenceWatcher/ContextViewBasedExistenceWatcher' isStatic='false' isFinal='false' isOverride='false'  param_names='context;contextView' param_types='robotlegs.bender.framework.api:IContext;flash.display:DisplayObjectContainer' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='destroy' fullname='robotlegs.bender.extensions.modularity.impl:ContextViewBasedExistenceWatcher/private:destroy' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='init' fullname='robotlegs.bender.extensions.modularity.impl:ContextViewBasedExistenceWatcher/private:init' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='onContextAdd' fullname='robotlegs.bender.extensions.modularity.impl:ContextViewBasedExistenceWatcher/private:onContextAdd' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='robotlegs.bender.extensions.modularity.impl:ModularContextEvent' param_defaults='undefined' result_type='void'>
</method>
<field name='_contextView' fullname='robotlegs.bender.extensions.modularity.impl:ContextViewBasedExistenceWatcher/private:_contextView' type='flash.display:DisplayObjectContainer' isStatic='false' isConst='false' >
</field>
<field name='_context' fullname='robotlegs.bender.extensions.modularity.impl:ContextViewBasedExistenceWatcher/private:_context' type='robotlegs.bender.framework.api:IContext' isStatic='false' isConst='false' >
</field>
<field name='_logger' fullname='robotlegs.bender.extensions.modularity.impl:ContextViewBasedExistenceWatcher/private:_logger' type='robotlegs.bender.framework.api:ILogger' isStatic='false' isConst='false' >
</field>
<classRec name='ContainerBindingEvent' fullname='robotlegs.bender.extensions.viewManager.impl:ContainerBindingEvent' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/viewManager/impl/ContainerBindingEvent.as' namespace='robotlegs.bender.extensions.viewManager.impl' access='public' baseclass='flash.events:Event' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 ]]></description>
<private><![CDATA[]]></private>
</classRec>
<method name='ContainerBindingEvent' fullname='robotlegs.bender.extensions.viewManager.impl:ContainerBindingEvent/ContainerBindingEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='type' param_types='String' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='clone' fullname='robotlegs.bender.extensions.viewManager.impl:ContainerBindingEvent/clone' isStatic='false' isFinal='false' isOverride='true'  result_type='flash.events:Event'>
<description><![CDATA[
		 ]]></description>
<inheritDoc><![CDATA[]]></inheritDoc>
</method>
<field name='BINDING_EMPTY' fullname='robotlegs.bender.extensions.viewManager.impl:ContainerBindingEvent/BINDING_EMPTY' type='String' isStatic='true' isConst='true' defaultValue='bindingEmpty' >
</field>
<classRec name='ConfigureViewEvent' fullname='robotlegs.bender.extensions.viewManager.impl:ConfigureViewEvent' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/viewManager/impl/ConfigureViewEvent.as' namespace='robotlegs.bender.extensions.viewManager.impl' access='public' baseclass='flash.events:Event' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 View Configuration Event
	 ]]></description>
<private><![CDATA[]]></private>
</classRec>
<method name='ConfigureViewEvent' fullname='robotlegs.bender.extensions.viewManager.impl:ConfigureViewEvent/ConfigureViewEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='type;view' param_types='String;flash.display:DisplayObject' param_defaults='undefined;null' result_type='*'>
<description><![CDATA[
		 Creates a view configuration event
		 ]]></description>
<param><![CDATA[type The event type
		 ]]></param>
<param><![CDATA[view The associated view instance
		 ]]></param>
</method>
<method name='clone' fullname='robotlegs.bender.extensions.viewManager.impl:ConfigureViewEvent/clone' isStatic='false' isFinal='false' isOverride='true'  result_type='flash.events:Event'>
<description><![CDATA[
		 ]]></description>
<inheritDoc><![CDATA[]]></inheritDoc>
</method>
<method name='view' fullname='robotlegs.bender.extensions.viewManager.impl:ConfigureViewEvent/view/get' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.display:DisplayObject'>
<description><![CDATA[
		 The view instance associated with this event
		 ]]></description>
</method>
<field name='CONFIGURE_VIEW' fullname='robotlegs.bender.extensions.viewManager.impl:ConfigureViewEvent/CONFIGURE_VIEW' type='String' isStatic='true' isConst='true' defaultValue='configureView' >
</field>
<field name='_view' fullname='robotlegs.bender.extensions.viewManager.impl:ConfigureViewEvent/private:_view' type='flash.display:DisplayObject' isStatic='false' isConst='false' >
</field>
<classRec name='ContainerRegistry' fullname='robotlegs.bender.extensions.viewManager.impl:ContainerRegistry' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/viewManager/impl/ContainerRegistry.as' namespace='robotlegs.bender.extensions.viewManager.impl' access='public' baseclass='flash.events:EventDispatcher' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 ]]></description>
<private><![CDATA[]]></private>
<metadata>
	<Event owner='robotlegs.bender.extensions.viewManager.impl:ContainerRegistry' name='rootContainerRemove' type='robotlegs.bender.extensions.viewManager.impl.ContainerRegistryEvent' >
	</Event>
</metadata>
<metadata>
	<Event owner='robotlegs.bender.extensions.viewManager.impl:ContainerRegistry' name='rootContainerAdd' type='robotlegs.bender.extensions.viewManager.impl.ContainerRegistryEvent' >
	</Event>
</metadata>
<metadata>
	<Event owner='robotlegs.bender.extensions.viewManager.impl:ContainerRegistry' name='containerRemove' type='robotlegs.bender.extensions.viewManager.impl.ContainerRegistryEvent' >
	</Event>
</metadata>
<metadata>
	<Event owner='robotlegs.bender.extensions.viewManager.impl:ContainerRegistry' name='containerAdd' type='robotlegs.bender.extensions.viewManager.impl.ContainerRegistryEvent' >
	</Event>
</metadata>
</classRec>
<method name='addContainer' fullname='robotlegs.bender.extensions.viewManager.impl:ContainerRegistry/addContainer' isStatic='false' isFinal='false' isOverride='false'  param_names='container' param_types='flash.display:DisplayObjectContainer' param_defaults='undefined' result_type='robotlegs.bender.extensions.viewManager.impl:ContainerBinding'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='addRootBinding' fullname='robotlegs.bender.extensions.viewManager.impl:ContainerRegistry/private:addRootBinding' isStatic='false' isFinal='false' isOverride='false'  param_names='binding' param_types='robotlegs.bender.extensions.viewManager.impl:ContainerBinding' param_defaults='undefined' result_type='void'>
</method>
<method name='createBinding' fullname='robotlegs.bender.extensions.viewManager.impl:ContainerRegistry/private:createBinding' isStatic='false' isFinal='false' isOverride='false'  param_names='container' param_types='flash.display:DisplayObjectContainer' param_defaults='undefined' result_type='robotlegs.bender.extensions.viewManager.impl:ContainerBinding'>
</method>
<method name='findParentBinding' fullname='robotlegs.bender.extensions.viewManager.impl:ContainerRegistry/findParentBinding' isStatic='false' isFinal='false' isOverride='false'  param_names='target' param_types='flash.display:DisplayObject' param_defaults='undefined' result_type='robotlegs.bender.extensions.viewManager.impl:ContainerBinding'>
<description><![CDATA[
		 Finds the closest parent binding for a given display object
		 		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getBinding' fullname='robotlegs.bender.extensions.viewManager.impl:ContainerRegistry/getBinding' isStatic='false' isFinal='false' isOverride='false'  param_names='container' param_types='flash.display:DisplayObjectContainer' param_defaults='undefined' result_type='robotlegs.bender.extensions.viewManager.impl:ContainerBinding'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='onBindingEmpty' fullname='robotlegs.bender.extensions.viewManager.impl:ContainerRegistry/private:onBindingEmpty' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='robotlegs.bender.extensions.viewManager.impl:ContainerBindingEvent' param_defaults='undefined' result_type='void'>
</method>
<method name='removeBinding' fullname='robotlegs.bender.extensions.viewManager.impl:ContainerRegistry/private:removeBinding' isStatic='false' isFinal='false' isOverride='false'  param_names='binding' param_types='robotlegs.bender.extensions.viewManager.impl:ContainerBinding' param_defaults='undefined' result_type='void'>
</method>
<method name='removeContainer' fullname='robotlegs.bender.extensions.viewManager.impl:ContainerRegistry/removeContainer' isStatic='false' isFinal='false' isOverride='false'  param_names='container' param_types='flash.display:DisplayObjectContainer' param_defaults='undefined' result_type='robotlegs.bender.extensions.viewManager.impl:ContainerBinding'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='removeRootBinding' fullname='robotlegs.bender.extensions.viewManager.impl:ContainerRegistry/private:removeRootBinding' isStatic='false' isFinal='false' isOverride='false'  param_names='binding' param_types='robotlegs.bender.extensions.viewManager.impl:ContainerBinding' param_defaults='undefined' result_type='void'>
</method>
<method name='bindings' fullname='robotlegs.bender.extensions.viewManager.impl:ContainerRegistry/bindings/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Vector$robotlegs.bender.extensions.viewManager.impl:ContainerBinding'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='rootBindings' fullname='robotlegs.bender.extensions.viewManager.impl:ContainerRegistry/rootBindings/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Vector$robotlegs.bender.extensions.viewManager.impl:ContainerBinding'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='_bindingByContainer' fullname='robotlegs.bender.extensions.viewManager.impl:ContainerRegistry/private:_bindingByContainer' type='flash.utils:Dictionary' isStatic='false' isConst='true' defaultValue='unknown' >
</field>
<field name='_bindings' fullname='robotlegs.bender.extensions.viewManager.impl:ContainerRegistry/private:_bindings' type='Vector$robotlegs.bender.extensions.viewManager.impl:ContainerBinding' isStatic='false' isConst='true' defaultValue='unknown' >
</field>
<field name='_rootBindings' fullname='robotlegs.bender.extensions.viewManager.impl:ContainerRegistry/private:_rootBindings' type='Vector$robotlegs.bender.extensions.viewManager.impl:ContainerBinding' isStatic='false' isConst='true' defaultValue='unknown' >
</field>
<classRec name='ViewManagerEvent' fullname='robotlegs.bender.extensions.viewManager.impl:ViewManagerEvent' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/viewManager/impl/ViewManagerEvent.as' namespace='robotlegs.bender.extensions.viewManager.impl' access='public' baseclass='flash.events:Event' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Container existence event
	 ]]></description>
<private><![CDATA[]]></private>
</classRec>
<method name='ViewManagerEvent' fullname='robotlegs.bender.extensions.viewManager.impl:ViewManagerEvent/ViewManagerEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='type;container;handler' param_types='String;flash.display:DisplayObjectContainer;robotlegs.bender.extensions.viewManager.api:IViewHandler' param_defaults='undefined;null;null' result_type='*'>
<description><![CDATA[
		 Creates a view manager event
		 ]]></description>
<param><![CDATA[type The event type
		 ]]></param>
<param><![CDATA[container The container associated with this event
		 ]]></param>
<param><![CDATA[handler The view handler associated with this event
		 ]]></param>
</method>
<method name='clone' fullname='robotlegs.bender.extensions.viewManager.impl:ViewManagerEvent/clone' isStatic='false' isFinal='false' isOverride='true'  result_type='flash.events:Event'>
<description><![CDATA[
		 ]]></description>
<inheritDoc><![CDATA[]]></inheritDoc>
</method>
<method name='container' fullname='robotlegs.bender.extensions.viewManager.impl:ViewManagerEvent/container/get' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.display:DisplayObjectContainer'>
<description><![CDATA[
		 The container associated with this event
		 ]]></description>
</method>
<method name='handler' fullname='robotlegs.bender.extensions.viewManager.impl:ViewManagerEvent/handler/get' isStatic='false' isFinal='false' isOverride='false'  result_type='robotlegs.bender.extensions.viewManager.api:IViewHandler'>
<description><![CDATA[
		 The view handler associated with this event
		 ]]></description>
</method>
<field name='CONTAINER_ADD' fullname='robotlegs.bender.extensions.viewManager.impl:ViewManagerEvent/CONTAINER_ADD' type='String' isStatic='true' isConst='true' defaultValue='containerAdd' >
</field>
<field name='CONTAINER_REMOVE' fullname='robotlegs.bender.extensions.viewManager.impl:ViewManagerEvent/CONTAINER_REMOVE' type='String' isStatic='true' isConst='true' defaultValue='containerRemove' >
</field>
<field name='HANDLER_ADD' fullname='robotlegs.bender.extensions.viewManager.impl:ViewManagerEvent/HANDLER_ADD' type='String' isStatic='true' isConst='true' defaultValue='handlerAdd' >
</field>
<field name='HANDLER_REMOVE' fullname='robotlegs.bender.extensions.viewManager.impl:ViewManagerEvent/HANDLER_REMOVE' type='String' isStatic='true' isConst='true' defaultValue='handlerRemove' >
</field>
<field name='_container' fullname='robotlegs.bender.extensions.viewManager.impl:ViewManagerEvent/private:_container' type='flash.display:DisplayObjectContainer' isStatic='false' isConst='false' >
</field>
<field name='_handler' fullname='robotlegs.bender.extensions.viewManager.impl:ViewManagerEvent/private:_handler' type='robotlegs.bender.extensions.viewManager.api:IViewHandler' isStatic='false' isConst='false' >
</field>
<classRec name='ContainerRegistryEvent' fullname='robotlegs.bender.extensions.viewManager.impl:ContainerRegistryEvent' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/viewManager/impl/ContainerRegistryEvent.as' namespace='robotlegs.bender.extensions.viewManager.impl' access='public' baseclass='flash.events:Event' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Container existence event
	 ]]></description>
<private><![CDATA[]]></private>
</classRec>
<method name='ContainerRegistryEvent' fullname='robotlegs.bender.extensions.viewManager.impl:ContainerRegistryEvent/ContainerRegistryEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='type;container' param_types='String;flash.display:DisplayObjectContainer' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[
		 Creates a new container existence event
		 ]]></description>
<param><![CDATA[type The event type
		 ]]></param>
<param><![CDATA[container The container associated with this event
		 ]]></param>
</method>
<method name='clone' fullname='robotlegs.bender.extensions.viewManager.impl:ContainerRegistryEvent/clone' isStatic='false' isFinal='false' isOverride='true'  result_type='flash.events:Event'>
<description><![CDATA[
		 ]]></description>
<inheritDoc><![CDATA[]]></inheritDoc>
</method>
<method name='container' fullname='robotlegs.bender.extensions.viewManager.impl:ContainerRegistryEvent/container/get' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.display:DisplayObjectContainer'>
<description><![CDATA[
		 The container associated with this event
		 ]]></description>
</method>
<field name='CONTAINER_ADD' fullname='robotlegs.bender.extensions.viewManager.impl:ContainerRegistryEvent/CONTAINER_ADD' type='String' isStatic='true' isConst='true' defaultValue='containerAdd' >
</field>
<field name='CONTAINER_REMOVE' fullname='robotlegs.bender.extensions.viewManager.impl:ContainerRegistryEvent/CONTAINER_REMOVE' type='String' isStatic='true' isConst='true' defaultValue='containerRemove' >
</field>
<field name='ROOT_CONTAINER_ADD' fullname='robotlegs.bender.extensions.viewManager.impl:ContainerRegistryEvent/ROOT_CONTAINER_ADD' type='String' isStatic='true' isConst='true' defaultValue='rootContainerAdd' >
</field>
<field name='ROOT_CONTAINER_REMOVE' fullname='robotlegs.bender.extensions.viewManager.impl:ContainerRegistryEvent/ROOT_CONTAINER_REMOVE' type='String' isStatic='true' isConst='true' defaultValue='rootContainerRemove' >
</field>
<field name='_container' fullname='robotlegs.bender.extensions.viewManager.impl:ContainerRegistryEvent/private:_container' type='flash.display:DisplayObjectContainer' isStatic='false' isConst='false' >
</field>
<classRec name='ViewManager' fullname='robotlegs.bender.extensions.viewManager.impl:ViewManager' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/viewManager/impl/ViewManager.as' namespace='robotlegs.bender.extensions.viewManager.impl' access='public' baseclass='flash.events:EventDispatcher' interfaces='robotlegs.bender.extensions.viewManager.api:IViewManager' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 ]]></description>
<private><![CDATA[]]></private>
<metadata>
	<Event owner='robotlegs.bender.extensions.viewManager.impl:ViewManager' name='handlerRemove' type='robotlegs.bender.extensions.viewManager.impl.ViewManagerEvent' >
	</Event>
</metadata>
<metadata>
	<Event owner='robotlegs.bender.extensions.viewManager.impl:ViewManager' name='handlerAdd' type='robotlegs.bender.extensions.viewManager.impl.ViewManagerEvent' >
	</Event>
</metadata>
<metadata>
	<Event owner='robotlegs.bender.extensions.viewManager.impl:ViewManager' name='containerRemove' type='robotlegs.bender.extensions.viewManager.impl.ViewManagerEvent' >
	</Event>
</metadata>
<metadata>
	<Event owner='robotlegs.bender.extensions.viewManager.impl:ViewManager' name='containerAdd' type='robotlegs.bender.extensions.viewManager.impl.ViewManagerEvent' >
	</Event>
</metadata>
</classRec>
<method name='ViewManager' fullname='robotlegs.bender.extensions.viewManager.impl:ViewManager/ViewManager' isStatic='false' isFinal='false' isOverride='false'  param_names='containerRegistry' param_types='robotlegs.bender.extensions.viewManager.impl:ContainerRegistry' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='addContainer' fullname='robotlegs.bender.extensions.viewManager.impl:ViewManager/addContainer' isStatic='false' isFinal='false' isOverride='false'  param_names='container' param_types='flash.display:DisplayObjectContainer' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 
		 Adds a container as a "view root" into the context
		 ]]></description>
<param><![CDATA[container
		 ]]></param>
</method>
<method name='addViewHandler' fullname='robotlegs.bender.extensions.viewManager.impl:ViewManager/addViewHandler' isStatic='false' isFinal='false' isOverride='false'  param_names='handler' param_types='robotlegs.bender.extensions.viewManager.api:IViewHandler' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 
		 Registers a view handler
		 ]]></description>
<param><![CDATA[handler
		 ]]></param>
</method>
<method name='removeAllHandlers' fullname='robotlegs.bender.extensions.viewManager.impl:ViewManager/removeAllHandlers' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 
		 Removes all view handlers from this context
		 ]]></description>
</method>
<method name='removeContainer' fullname='robotlegs.bender.extensions.viewManager.impl:ViewManager/removeContainer' isStatic='false' isFinal='false' isOverride='false'  param_names='container' param_types='flash.display:DisplayObjectContainer' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 
		 Removes a container from this context
		 ]]></description>
<param><![CDATA[container
		 ]]></param>
</method>
<method name='removeViewHandler' fullname='robotlegs.bender.extensions.viewManager.impl:ViewManager/removeViewHandler' isStatic='false' isFinal='false' isOverride='false'  param_names='handler' param_types='robotlegs.bender.extensions.viewManager.api:IViewHandler' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 
		 Removes a view handler
		 ]]></description>
<param><![CDATA[handler
		 ]]></param>
</method>
<method name='validContainer' fullname='robotlegs.bender.extensions.viewManager.impl:ViewManager/private:validContainer' isStatic='false' isFinal='false' isOverride='false'  param_names='container' param_types='flash.display:DisplayObjectContainer' param_defaults='undefined' result_type='Boolean'>
</method>
<method name='containers' fullname='robotlegs.bender.extensions.viewManager.impl:ViewManager/containers/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Vector$flash.display:DisplayObjectContainer'>
<description><![CDATA[
		 
		 A list of currently registered container
		 ]]></description>
</method>
<field name='_containers' fullname='robotlegs.bender.extensions.viewManager.impl:ViewManager/private:_containers' type='Vector$flash.display:DisplayObjectContainer' isStatic='false' isConst='true' defaultValue='unknown' >
</field>
<field name='_handlers' fullname='robotlegs.bender.extensions.viewManager.impl:ViewManager/private:_handlers' type='Vector$robotlegs.bender.extensions.viewManager.api:IViewHandler' isStatic='false' isConst='true' defaultValue='unknown' >
</field>
<field name='_registry' fullname='robotlegs.bender.extensions.viewManager.impl:ViewManager/private:_registry' type='robotlegs.bender.extensions.viewManager.impl:ContainerRegistry' isStatic='false' isConst='false' >
</field>
<classRec name='StageCrawler' fullname='robotlegs.bender.extensions.viewManager.impl:StageCrawler' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/viewManager/impl/StageCrawler.as' namespace='robotlegs.bender.extensions.viewManager.impl' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 ]]></description>
<private><![CDATA[]]></private>
</classRec>
<method name='StageCrawler' fullname='robotlegs.bender.extensions.viewManager.impl:StageCrawler/StageCrawler' isStatic='false' isFinal='false' isOverride='false'  param_names='containerBinding' param_types='robotlegs.bender.extensions.viewManager.impl:ContainerBinding' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='processView' fullname='robotlegs.bender.extensions.viewManager.impl:StageCrawler/private:processView' isStatic='false' isFinal='false' isOverride='false'  param_names='view' param_types='flash.display:DisplayObject' param_defaults='undefined' result_type='void'>
</method>
<method name='scanContainer' fullname='robotlegs.bender.extensions.viewManager.impl:StageCrawler/private:scanContainer' isStatic='false' isFinal='false' isOverride='false'  param_names='container' param_types='flash.display:DisplayObjectContainer' param_defaults='undefined' result_type='void'>
</method>
<method name='scan' fullname='robotlegs.bender.extensions.viewManager.impl:StageCrawler/scan' isStatic='false' isFinal='false' isOverride='false'  param_names='view' param_types='flash.display:DisplayObjectContainer' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='_binding' fullname='robotlegs.bender.extensions.viewManager.impl:StageCrawler/private:_binding' type='robotlegs.bender.extensions.viewManager.impl:ContainerBinding' isStatic='false' isConst='false' >
</field>
<classRec name='ContainerBinding' fullname='robotlegs.bender.extensions.viewManager.impl:ContainerBinding' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/viewManager/impl/ContainerBinding.as' namespace='robotlegs.bender.extensions.viewManager.impl' access='public' baseclass='flash.events:EventDispatcher' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 ]]></description>
<private><![CDATA[]]></private>
<metadata>
	<Event owner='robotlegs.bender.extensions.viewManager.impl:ContainerBinding' name='bindingEmpty' type='robotlegs.bender.extensions.viewManager.impl.ContainerBindingEvent' >
	</Event>
</metadata>
</classRec>
<method name='ContainerBinding' fullname='robotlegs.bender.extensions.viewManager.impl:ContainerBinding/ContainerBinding' isStatic='false' isFinal='false' isOverride='false'  param_names='container' param_types='flash.display:DisplayObjectContainer' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='addHandler' fullname='robotlegs.bender.extensions.viewManager.impl:ContainerBinding/addHandler' isStatic='false' isFinal='false' isOverride='false'  param_names='handler' param_types='robotlegs.bender.extensions.viewManager.api:IViewHandler' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='handleView' fullname='robotlegs.bender.extensions.viewManager.impl:ContainerBinding/handleView' isStatic='false' isFinal='false' isOverride='false'  param_names='view;type' param_types='flash.display:DisplayObject;Class' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='removeHandler' fullname='robotlegs.bender.extensions.viewManager.impl:ContainerBinding/removeHandler' isStatic='false' isFinal='false' isOverride='false'  param_names='handler' param_types='robotlegs.bender.extensions.viewManager.api:IViewHandler' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='container' fullname='robotlegs.bender.extensions.viewManager.impl:ContainerBinding/container/get' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.display:DisplayObjectContainer'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='parent' fullname='robotlegs.bender.extensions.viewManager.impl:ContainerBinding/parent/get' isStatic='false' isFinal='false' isOverride='false'  result_type='robotlegs.bender.extensions.viewManager.impl:ContainerBinding'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='parent' fullname='robotlegs.bender.extensions.viewManager.impl:ContainerBinding/parent/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='robotlegs.bender.extensions.viewManager.impl:ContainerBinding' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='_container' fullname='robotlegs.bender.extensions.viewManager.impl:ContainerBinding/private:_container' type='flash.display:DisplayObjectContainer' isStatic='false' isConst='false' >
</field>
<field name='_handlers' fullname='robotlegs.bender.extensions.viewManager.impl:ContainerBinding/private:_handlers' type='Vector$robotlegs.bender.extensions.viewManager.api:IViewHandler' isStatic='false' isConst='true' defaultValue='unknown' >
</field>
<field name='_parent' fullname='robotlegs.bender.extensions.viewManager.impl:ContainerBinding/private:_parent' type='robotlegs.bender.extensions.viewManager.impl:ContainerBinding' isStatic='false' isConst='false' >
</field>
<classRec name='StageObserver' fullname='robotlegs.bender.extensions.viewManager.impl:StageObserver' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/viewManager/impl/StageObserver.as' namespace='robotlegs.bender.extensions.viewManager.impl' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 ]]></description>
<private><![CDATA[]]></private>
</classRec>
<method name='StageObserver' fullname='robotlegs.bender.extensions.viewManager.impl:StageObserver/StageObserver' isStatic='false' isFinal='false' isOverride='false'  param_names='containerRegistry' param_types='robotlegs.bender.extensions.viewManager.impl:ContainerRegistry' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='addRootListener' fullname='robotlegs.bender.extensions.viewManager.impl:StageObserver/private:addRootListener' isStatic='false' isFinal='false' isOverride='false'  param_names='container' param_types='flash.display:DisplayObjectContainer' param_defaults='undefined' result_type='void'>
</method>
<method name='destroy' fullname='robotlegs.bender.extensions.viewManager.impl:StageObserver/destroy' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='onContainerRootAddedToStage' fullname='robotlegs.bender.extensions.viewManager.impl:StageObserver/private:onContainerRootAddedToStage' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='void'>
</method>
<method name='onRootContainerAdd' fullname='robotlegs.bender.extensions.viewManager.impl:StageObserver/private:onRootContainerAdd' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='robotlegs.bender.extensions.viewManager.impl:ContainerRegistryEvent' param_defaults='undefined' result_type='void'>
</method>
<method name='onRootContainerRemove' fullname='robotlegs.bender.extensions.viewManager.impl:StageObserver/private:onRootContainerRemove' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='robotlegs.bender.extensions.viewManager.impl:ContainerRegistryEvent' param_defaults='undefined' result_type='void'>
</method>
<method name='onViewAddedToStage' fullname='robotlegs.bender.extensions.viewManager.impl:StageObserver/private:onViewAddedToStage' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='void'>
</method>
<method name='removeRootListener' fullname='robotlegs.bender.extensions.viewManager.impl:StageObserver/private:removeRootListener' isStatic='false' isFinal='false' isOverride='false'  param_names='container' param_types='flash.display:DisplayObjectContainer' param_defaults='undefined' result_type='void'>
</method>
<field name='_filter' fullname='robotlegs.bender.extensions.viewManager.impl:StageObserver/private:_filter' type='RegExp' isStatic='false' isConst='true' defaultValue='unknown' >
</field>
<field name='_registry' fullname='robotlegs.bender.extensions.viewManager.impl:StageObserver/private:_registry' type='robotlegs.bender.extensions.viewManager.impl:ContainerRegistry' isStatic='false' isConst='false' >
</field>
<classRec name='ManualStageObserver' fullname='robotlegs.bender.extensions.viewManager.impl:ManualStageObserver' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/viewManager/impl/ManualStageObserver.as' namespace='robotlegs.bender.extensions.viewManager.impl' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 ]]></description>
<private><![CDATA[]]></private>
</classRec>
<method name='ManualStageObserver' fullname='robotlegs.bender.extensions.viewManager.impl:ManualStageObserver/ManualStageObserver' isStatic='false' isFinal='false' isOverride='false'  param_names='containerRegistry' param_types='robotlegs.bender.extensions.viewManager.impl:ContainerRegistry' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='addContainerListener' fullname='robotlegs.bender.extensions.viewManager.impl:ManualStageObserver/private:addContainerListener' isStatic='false' isFinal='false' isOverride='false'  param_names='container' param_types='flash.display:DisplayObjectContainer' param_defaults='undefined' result_type='void'>
</method>
<method name='destroy' fullname='robotlegs.bender.extensions.viewManager.impl:ManualStageObserver/destroy' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='onConfigureView' fullname='robotlegs.bender.extensions.viewManager.impl:ManualStageObserver/private:onConfigureView' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='robotlegs.bender.extensions.viewManager.impl:ConfigureViewEvent' param_defaults='undefined' result_type='void'>
</method>
<method name='onContainerAdd' fullname='robotlegs.bender.extensions.viewManager.impl:ManualStageObserver/private:onContainerAdd' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='robotlegs.bender.extensions.viewManager.impl:ContainerRegistryEvent' param_defaults='undefined' result_type='void'>
</method>
<method name='onContainerRemove' fullname='robotlegs.bender.extensions.viewManager.impl:ManualStageObserver/private:onContainerRemove' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='robotlegs.bender.extensions.viewManager.impl:ContainerRegistryEvent' param_defaults='undefined' result_type='void'>
</method>
<method name='removeContainerListener' fullname='robotlegs.bender.extensions.viewManager.impl:ManualStageObserver/private:removeContainerListener' isStatic='false' isFinal='false' isOverride='false'  param_names='container' param_types='flash.display:DisplayObjectContainer' param_defaults='undefined' result_type='void'>
</method>
<field name='_registry' fullname='robotlegs.bender.extensions.viewManager.impl:ManualStageObserver/private:_registry' type='robotlegs.bender.extensions.viewManager.impl:ContainerRegistry' isStatic='false' isConst='false' >
</field>
<interfaceRec name='IDirectCommandMapper' fullname='robotlegs.bender.extensions.directCommandMap.api:IDirectCommandMapper' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/directCommandMap/api/IDirectCommandMapper.as' namespace='robotlegs.bender.extensions.directCommandMap.api' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 ]]></description>
<private><![CDATA[]]></private>
</interfaceRec>
<method name='execute' fullname='robotlegs.bender.extensions.directCommandMap.api:IDirectCommandMapper/robotlegs.bender.extensions.directCommandMap.api:IDirectCommandMapper:execute' isStatic='false' isFinal='false' isOverride='false'  param_names='payload' param_types='robotlegs.bender.extensions.commandCenter.api:CommandPayload' param_defaults='null' result_type='void'>
<description><![CDATA[
		 Execute the configured command(s)
		 ]]></description>
<param><![CDATA[payload The Command Payload
		 ]]></param>
</method>
<method name='map' fullname='robotlegs.bender.extensions.directCommandMap.api:IDirectCommandMapper/robotlegs.bender.extensions.directCommandMap.api:IDirectCommandMapper:map' isStatic='false' isFinal='false' isOverride='false'  param_names='commandClass' param_types='Class' param_defaults='undefined' result_type='robotlegs.bender.extensions.directCommandMap.dsl:IDirectCommandConfigurator'>
<description><![CDATA[
		 Creates a mapping for a command class
		 ]]></description>
<param><![CDATA[commandClass The concrete Command class
		 ]]></param>
<return><![CDATA[Mapping configurator
		 ]]></return>
</method>
<interfaceRec name='IDirectCommandMap' fullname='robotlegs.bender.extensions.directCommandMap.api:IDirectCommandMap' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/directCommandMap/api/IDirectCommandMap.as' namespace='robotlegs.bender.extensions.directCommandMap.api' access='public' baseClasses='robotlegs.bender.extensions.directCommandMap.api:IDirectCommandMapper' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Maps commands for direct (manual) execution
	 ]]></description>
</interfaceRec>
<method name='addMappingProcessor' fullname='robotlegs.bender.extensions.directCommandMap.api:IDirectCommandMap/robotlegs.bender.extensions.directCommandMap.api:IDirectCommandMap:addMappingProcessor' isStatic='false' isFinal='false' isOverride='false'  param_names='handler' param_types='Function' param_defaults='undefined' result_type='robotlegs.bender.extensions.directCommandMap.api:IDirectCommandMap'>
<description><![CDATA[
		 Adds a handler to process mappings
		 ]]></description>
<param><![CDATA[handler Function that accepts a mapping
		 ]]></param>
<return><![CDATA[Self
		 ]]></return>
</method>
<method name='detain' fullname='robotlegs.bender.extensions.directCommandMap.api:IDirectCommandMap/robotlegs.bender.extensions.directCommandMap.api:IDirectCommandMap:detain' isStatic='false' isFinal='false' isOverride='false'  param_names='command' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Pins a command in memory
		 ]]></description>
<param><![CDATA[command the command instance to pin
		 ]]></param>
</method>
<method name='release' fullname='robotlegs.bender.extensions.directCommandMap.api:IDirectCommandMap/robotlegs.bender.extensions.directCommandMap.api:IDirectCommandMap:release' isStatic='false' isFinal='false' isOverride='false'  param_names='command' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Unpins a command instance from memory
		 ]]></description>
<param><![CDATA[command the command instance to unpin
		 ]]></param>
</method>
<classRec name='TraceLoggingExtension' fullname='robotlegs.bender.extensions.enhancedLogging:TraceLoggingExtension' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/enhancedLogging/TraceLoggingExtension.as' namespace='robotlegs.bender.extensions.enhancedLogging' access='public' baseclass='Object' interfaces='robotlegs.bender.framework.api:IExtension' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Adds a TraceLogTarget to the context
	 ]]></description>
</classRec>
<method name='extend' fullname='robotlegs.bender.extensions.enhancedLogging:TraceLoggingExtension/extend' isStatic='false' isFinal='false' isOverride='false'  param_names='context' param_types='robotlegs.bender.framework.api:IContext' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 
		 This method will be called immediately when the extension/bundle is installed.
		 		 <p>Note: the context may not be fully initialized yet. A bundle should do
		 little more than install additional bundles/extensions. An extension
		 can add lifecycle handlers to the context instance to perform synchronized
		 initialization.</p>
		 		 ]]></description>
<param><![CDATA[context The context that this extension/bundle is being installed into.
		 ]]></param>
</method>
<classRec name='InjectorActivityLoggingExtension' fullname='robotlegs.bender.extensions.enhancedLogging:InjectorActivityLoggingExtension' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/enhancedLogging/InjectorActivityLoggingExtension.as' namespace='robotlegs.bender.extensions.enhancedLogging' access='public' baseclass='Object' interfaces='robotlegs.bender.framework.api:IExtension' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 This extension logs messages for all Injector actions.
	 	 Warning: this extension will degrade the performance of your application.
	 ]]></description>
</classRec>
<method name='extend' fullname='robotlegs.bender.extensions.enhancedLogging:InjectorActivityLoggingExtension/extend' isStatic='false' isFinal='false' isOverride='false'  param_names='context' param_types='robotlegs.bender.framework.api:IContext' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 
		 This method will be called immediately when the extension/bundle is installed.
		 		 <p>Note: the context may not be fully initialized yet. A bundle should do
		 little more than install additional bundles/extensions. An extension
		 can add lifecycle handlers to the context instance to perform synchronized
		 initialization.</p>
		 		 ]]></description>
<param><![CDATA[context The context that this extension/bundle is being installed into.
		 ]]></param>
</method>
<classRec name='InjectableLoggerExtension' fullname='robotlegs.bender.extensions.enhancedLogging:InjectableLoggerExtension' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/enhancedLogging/InjectableLoggerExtension.as' namespace='robotlegs.bender.extensions.enhancedLogging' access='public' baseclass='Object' interfaces='robotlegs.bender.framework.api:IExtension' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Allows you to [Inject] unique loggers into your objects.
	 	 <code>
	     [Inject]
	     public var logger:ILogger;
	 </code>
	 ]]></description>
</classRec>
<method name='extend' fullname='robotlegs.bender.extensions.enhancedLogging:InjectableLoggerExtension/extend' isStatic='false' isFinal='false' isOverride='false'  param_names='context' param_types='robotlegs.bender.framework.api:IContext' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 
		 This method will be called immediately when the extension/bundle is installed.
		 		 <p>Note: the context may not be fully initialized yet. A bundle should do
		 little more than install additional bundles/extensions. An extension
		 can add lifecycle handlers to the context instance to perform synchronized
		 initialization.</p>
		 		 ]]></description>
<param><![CDATA[context The context that this extension/bundle is being installed into.
		 ]]></param>
</method>
<interfaceRec name='IDirectCommandConfigurator' fullname='robotlegs.bender.extensions.directCommandMap.dsl:IDirectCommandConfigurator' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/directCommandMap/dsl/IDirectCommandConfigurator.as' namespace='robotlegs.bender.extensions.directCommandMap.dsl' access='public' baseClasses='robotlegs.bender.extensions.directCommandMap.api:IDirectCommandMapper' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 ]]></description>
<private><![CDATA[]]></private>
</interfaceRec>
<method name='withExecuteMethod' fullname='robotlegs.bender.extensions.directCommandMap.dsl:IDirectCommandConfigurator/robotlegs.bender.extensions.directCommandMap.dsl:IDirectCommandConfigurator:withExecuteMethod' isStatic='false' isFinal='false' isOverride='false'  param_names='name' param_types='String' param_defaults='undefined' result_type='robotlegs.bender.extensions.directCommandMap.dsl:IDirectCommandConfigurator'>
<description><![CDATA[
		 The "execute" method to invoke on the Command instance
		 ]]></description>
<param><![CDATA[name Method name
		 ]]></param>
<return><![CDATA[Self
		 ]]></return>
</method>
<method name='withGuards' fullname='robotlegs.bender.extensions.directCommandMap.dsl:IDirectCommandConfigurator/robotlegs.bender.extensions.directCommandMap.dsl:IDirectCommandConfigurator:withGuards' isStatic='false' isFinal='false' isOverride='false'  param_names='guards' param_types='restParam' param_defaults='undefined' result_type='robotlegs.bender.extensions.directCommandMap.dsl:IDirectCommandConfigurator'>
<description><![CDATA[
		 Guards to check before allowing a command to execute
		 ]]></description>
<param><![CDATA[guards Guards
		 ]]></param>
<return><![CDATA[Self
		 ]]></return>
</method>
<method name='withHooks' fullname='robotlegs.bender.extensions.directCommandMap.dsl:IDirectCommandConfigurator/robotlegs.bender.extensions.directCommandMap.dsl:IDirectCommandConfigurator:withHooks' isStatic='false' isFinal='false' isOverride='false'  param_names='hooks' param_types='restParam' param_defaults='undefined' result_type='robotlegs.bender.extensions.directCommandMap.dsl:IDirectCommandConfigurator'>
<description><![CDATA[
		 Hooks to run before command execution
		 ]]></description>
<param><![CDATA[hooks Hooks
		 ]]></param>
<return><![CDATA[Self
		 ]]></return>
</method>
<method name='withPayloadInjection' fullname='robotlegs.bender.extensions.directCommandMap.dsl:IDirectCommandConfigurator/robotlegs.bender.extensions.directCommandMap.dsl:IDirectCommandConfigurator:withPayloadInjection' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='Boolean' param_defaults='true' result_type='robotlegs.bender.extensions.directCommandMap.dsl:IDirectCommandConfigurator'>
<description><![CDATA[
		 Should the payload values be injected into the command instance?
		 ]]></description>
<param><![CDATA[value Toggle
		 ]]></param>
<return><![CDATA[Self
		 ]]></return>
</method>
<classRec name='LocalEventMapExtension' fullname='robotlegs.bender.extensions.localEventMap:LocalEventMapExtension' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/localEventMap/LocalEventMapExtension.as' namespace='robotlegs.bender.extensions.localEventMap' access='public' baseclass='Object' interfaces='robotlegs.bender.framework.api:IExtension' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 An Event Map keeps track of listeners and provides the ability
	 to unregister all listeners with a single method call.
	 ]]></description>
</classRec>
<method name='extend' fullname='robotlegs.bender.extensions.localEventMap:LocalEventMapExtension/extend' isStatic='false' isFinal='false' isOverride='false'  param_names='context' param_types='robotlegs.bender.framework.api:IContext' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 
		 This method will be called immediately when the extension/bundle is installed.
		 		 <p>Note: the context may not be fully initialized yet. A bundle should do
		 little more than install additional bundles/extensions. An extension
		 can add lifecycle handlers to the context instance to perform synchronized
		 initialization.</p>
		 		 ]]></description>
<param><![CDATA[context The context that this extension/bundle is being installed into.
		 ]]></param>
</method>
<classRec name='EventCommandMapExtension' fullname='robotlegs.bender.extensions.eventCommandMap:EventCommandMapExtension' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/eventCommandMap/EventCommandMapExtension.as' namespace='robotlegs.bender.extensions.eventCommandMap' access='public' baseclass='Object' interfaces='robotlegs.bender.framework.api:IExtension' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The Event Command Map allows you to bind Events to Commands
	 ]]></description>
</classRec>
<method name='extend' fullname='robotlegs.bender.extensions.eventCommandMap:EventCommandMapExtension/extend' isStatic='false' isFinal='false' isOverride='false'  param_names='context' param_types='robotlegs.bender.framework.api:IContext' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 
		 This method will be called immediately when the extension/bundle is installed.
		 		 <p>Note: the context may not be fully initialized yet. A bundle should do
		 little more than install additional bundles/extensions. An extension
		 can add lifecycle handlers to the context instance to perform synchronized
		 initialization.</p>
		 		 ]]></description>
<param><![CDATA[context The context that this extension/bundle is being installed into.
		 ]]></param>
</method>
<classRec name='EventDispatcherExtension' fullname='robotlegs.bender.extensions.eventDispatcher:EventDispatcherExtension' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/eventDispatcher/EventDispatcherExtension.as' namespace='robotlegs.bender.extensions.eventDispatcher' access='public' baseclass='Object' interfaces='robotlegs.bender.framework.api:IExtension' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 This extension maps an IEventDispatcher into a context's injector.
	 ]]></description>
</classRec>
<method name='EventDispatcherExtension' fullname='robotlegs.bender.extensions.eventDispatcher:EventDispatcherExtension/EventDispatcherExtension' isStatic='false' isFinal='false' isOverride='false'  param_names='eventDispatcher' param_types='flash.events:IEventDispatcher' param_defaults='null' result_type='*'>
<description><![CDATA[
		 Creates an Event Dispatcher Extension
		 ]]></description>
<param><![CDATA[eventDispatcher Optional IEventDispatcher instance to share
		 ]]></param>
</method>
<method name='configureLifecycleEventRelay' fullname='robotlegs.bender.extensions.eventDispatcher:EventDispatcherExtension/private:configureLifecycleEventRelay' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='destroyLifecycleEventRelay' fullname='robotlegs.bender.extensions.eventDispatcher:EventDispatcherExtension/private:destroyLifecycleEventRelay' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='extend' fullname='robotlegs.bender.extensions.eventDispatcher:EventDispatcherExtension/extend' isStatic='false' isFinal='false' isOverride='false'  param_names='context' param_types='robotlegs.bender.framework.api:IContext' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 
		 This method will be called immediately when the extension/bundle is installed.
		 		 <p>Note: the context may not be fully initialized yet. A bundle should do
		 little more than install additional bundles/extensions. An extension
		 can add lifecycle handlers to the context instance to perform synchronized
		 initialization.</p>
		 		 ]]></description>
<param><![CDATA[context The context that this extension/bundle is being installed into.
		 ]]></param>
</method>
<field name='_context' fullname='robotlegs.bender.extensions.eventDispatcher:EventDispatcherExtension/private:_context' type='robotlegs.bender.framework.api:IContext' isStatic='false' isConst='false' >
</field>
<field name='_eventDispatcher' fullname='robotlegs.bender.extensions.eventDispatcher:EventDispatcherExtension/private:_eventDispatcher' type='flash.events:IEventDispatcher' isStatic='false' isConst='false' >
</field>
<field name='_lifecycleRelay' fullname='robotlegs.bender.extensions.eventDispatcher:EventDispatcherExtension/private:_lifecycleRelay' type='robotlegs.bender.extensions.eventDispatcher.impl:LifecycleEventRelay' isStatic='false' isConst='false' >
</field>
<classRec name='DirectCommandMapper' fullname='robotlegs.bender.extensions.directCommandMap.impl:DirectCommandMapper' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/directCommandMap/impl/DirectCommandMapper.as' namespace='robotlegs.bender.extensions.directCommandMap.impl' access='public' baseclass='Object' interfaces='robotlegs.bender.extensions.directCommandMap.dsl:IDirectCommandConfigurator' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 ]]></description>
<private><![CDATA[]]></private>
</classRec>
<method name='DirectCommandMapper' fullname='robotlegs.bender.extensions.directCommandMap.impl:DirectCommandMapper/DirectCommandMapper' isStatic='false' isFinal='false' isOverride='false'  param_names='executor;mappings;commandClass' param_types='robotlegs.bender.extensions.commandCenter.api:ICommandExecutor;robotlegs.bender.extensions.commandCenter.api:ICommandMappingList;Class' param_defaults='undefined;undefined;undefined' result_type='*'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='execute' fullname='robotlegs.bender.extensions.directCommandMap.impl:DirectCommandMapper/execute' isStatic='false' isFinal='false' isOverride='false'  param_names='payload' param_types='robotlegs.bender.extensions.commandCenter.api:CommandPayload' param_defaults='null' result_type='void'>
<description><![CDATA[
		 
		 Execute the configured command(s)
		 ]]></description>
<param><![CDATA[payload The Command Payload
		 ]]></param>
</method>
<method name='map' fullname='robotlegs.bender.extensions.directCommandMap.impl:DirectCommandMapper/map' isStatic='false' isFinal='false' isOverride='false'  param_names='commandClass' param_types='Class' param_defaults='undefined' result_type='robotlegs.bender.extensions.directCommandMap.dsl:IDirectCommandConfigurator'>
<description><![CDATA[
		 
		 Creates a mapping for a command class
		 ]]></description>
<param><![CDATA[commandClass The concrete Command class
		 ]]></param>
<return><![CDATA[Mapping configurator
		 ]]></return>
</method>
<method name='withExecuteMethod' fullname='robotlegs.bender.extensions.directCommandMap.impl:DirectCommandMapper/withExecuteMethod' isStatic='false' isFinal='false' isOverride='false'  param_names='name' param_types='String' param_defaults='undefined' result_type='robotlegs.bender.extensions.directCommandMap.dsl:IDirectCommandConfigurator'>
<description><![CDATA[
		 
		 The "execute" method to invoke on the Command instance
		 ]]></description>
<param><![CDATA[name Method name
		 ]]></param>
<return><![CDATA[Self
		 ]]></return>
</method>
<method name='withGuards' fullname='robotlegs.bender.extensions.directCommandMap.impl:DirectCommandMapper/withGuards' isStatic='false' isFinal='false' isOverride='false'  param_names='guards' param_types='restParam' param_defaults='undefined' result_type='robotlegs.bender.extensions.directCommandMap.dsl:IDirectCommandConfigurator'>
<description><![CDATA[
		 
		 Guards to check before allowing a command to execute
		 ]]></description>
<param><![CDATA[guards Guards
		 ]]></param>
<return><![CDATA[Self
		 ]]></return>
</method>
<method name='withHooks' fullname='robotlegs.bender.extensions.directCommandMap.impl:DirectCommandMapper/withHooks' isStatic='false' isFinal='false' isOverride='false'  param_names='hooks' param_types='restParam' param_defaults='undefined' result_type='robotlegs.bender.extensions.directCommandMap.dsl:IDirectCommandConfigurator'>
<description><![CDATA[
		 
		 Hooks to run before command execution
		 ]]></description>
<param><![CDATA[hooks Hooks
		 ]]></param>
<return><![CDATA[Self
		 ]]></return>
</method>
<method name='withPayloadInjection' fullname='robotlegs.bender.extensions.directCommandMap.impl:DirectCommandMapper/withPayloadInjection' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='Boolean' param_defaults='true' result_type='robotlegs.bender.extensions.directCommandMap.dsl:IDirectCommandConfigurator'>
<description><![CDATA[
		 
		 Should the payload values be injected into the command instance?
		 ]]></description>
<param><![CDATA[value Toggle
		 ]]></param>
<return><![CDATA[Self
		 ]]></return>
</method>
<field name='_executor' fullname='robotlegs.bender.extensions.directCommandMap.impl:DirectCommandMapper/private:_executor' type='robotlegs.bender.extensions.commandCenter.api:ICommandExecutor' isStatic='false' isConst='false' >
</field>
<field name='_mapping' fullname='robotlegs.bender.extensions.directCommandMap.impl:DirectCommandMapper/private:_mapping' type='robotlegs.bender.extensions.commandCenter.api:ICommandMapping' isStatic='false' isConst='false' >
</field>
<field name='_mappings' fullname='robotlegs.bender.extensions.directCommandMap.impl:DirectCommandMapper/private:_mappings' type='robotlegs.bender.extensions.commandCenter.api:ICommandMappingList' isStatic='false' isConst='false' >
</field>
<classRec name='DirectCommandMap' fullname='robotlegs.bender.extensions.directCommandMap.impl:DirectCommandMap' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/directCommandMap/impl/DirectCommandMap.as' namespace='robotlegs.bender.extensions.directCommandMap.impl' access='public' baseclass='Object' interfaces='robotlegs.bender.extensions.directCommandMap.api:IDirectCommandMap' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Maps commands for direct (manual) execution
	 ]]></description>
</classRec>
<method name='DirectCommandMap' fullname='robotlegs.bender.extensions.directCommandMap.impl:DirectCommandMap/DirectCommandMap' isStatic='false' isFinal='false' isOverride='false'  param_names='context' param_types='robotlegs.bender.framework.api:IContext' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 Creates a Direct Command Map
		 ]]></description>
<param><![CDATA[context The context that owns this map
		 ]]></param>
</method>
<method name='addMappingProcessor' fullname='robotlegs.bender.extensions.directCommandMap.impl:DirectCommandMap/addMappingProcessor' isStatic='false' isFinal='false' isOverride='false'  param_names='handler' param_types='Function' param_defaults='undefined' result_type='robotlegs.bender.extensions.directCommandMap.api:IDirectCommandMap'>
<description><![CDATA[
		 
		 Adds a handler to process mappings
		 ]]></description>
<param><![CDATA[handler Function that accepts a mapping
		 ]]></param>
<return><![CDATA[Self
		 ]]></return>
</method>
<method name='detain' fullname='robotlegs.bender.extensions.directCommandMap.impl:DirectCommandMap/detain' isStatic='false' isFinal='false' isOverride='false'  param_names='command' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 
		 Pins a command in memory
		 ]]></description>
<param><![CDATA[command the command instance to pin
		 ]]></param>
</method>
<method name='execute' fullname='robotlegs.bender.extensions.directCommandMap.impl:DirectCommandMap/execute' isStatic='false' isFinal='false' isOverride='false'  param_names='payload' param_types='robotlegs.bender.extensions.commandCenter.api:CommandPayload' param_defaults='null' result_type='void'>
<description><![CDATA[
		 
		 Execute the configured command(s)
		 ]]></description>
<param><![CDATA[payload The Command Payload
		 ]]></param>
</method>
<method name='map' fullname='robotlegs.bender.extensions.directCommandMap.impl:DirectCommandMap/map' isStatic='false' isFinal='false' isOverride='false'  param_names='commandClass' param_types='Class' param_defaults='undefined' result_type='robotlegs.bender.extensions.directCommandMap.dsl:IDirectCommandConfigurator'>
<description><![CDATA[
		 
		 Creates a mapping for a command class
		 ]]></description>
<param><![CDATA[commandClass The concrete Command class
		 ]]></param>
<return><![CDATA[Mapping configurator
		 ]]></return>
</method>
<method name='release' fullname='robotlegs.bender.extensions.directCommandMap.impl:DirectCommandMap/release' isStatic='false' isFinal='false' isOverride='false'  param_names='command' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 
		 Unpins a command instance from memory
		 ]]></description>
<param><![CDATA[command the command instance to unpin
		 ]]></param>
</method>
<field name='_context' fullname='robotlegs.bender.extensions.directCommandMap.impl:DirectCommandMap/private:_context' type='robotlegs.bender.framework.api:IContext' isStatic='false' isConst='false' >
</field>
<field name='_executor' fullname='robotlegs.bender.extensions.directCommandMap.impl:DirectCommandMap/private:_executor' type='robotlegs.bender.extensions.commandCenter.api:ICommandExecutor' isStatic='false' isConst='false' >
</field>
<field name='_mappingProcessors' fullname='robotlegs.bender.extensions.directCommandMap.impl:DirectCommandMap/private:_mappingProcessors' type='Array' isStatic='false' isConst='true' defaultValue='unknown' >
</field>
<field name='_mappings' fullname='robotlegs.bender.extensions.directCommandMap.impl:DirectCommandMap/private:_mappings' type='robotlegs.bender.extensions.commandCenter.impl:CommandMappingList' isStatic='false' isConst='false' >
</field>
<classRec name='DirectCommandMapExtension' fullname='robotlegs.bender.extensions.directCommandMap:DirectCommandMapExtension' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/directCommandMap/DirectCommandMapExtension.as' namespace='robotlegs.bender.extensions.directCommandMap' access='public' baseclass='Object' interfaces='robotlegs.bender.framework.api:IExtension' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Maps commands for direct (manual) execution
	 ]]></description>
</classRec>
<method name='extend' fullname='robotlegs.bender.extensions.directCommandMap:DirectCommandMapExtension/extend' isStatic='false' isFinal='false' isOverride='false'  param_names='context' param_types='robotlegs.bender.framework.api:IContext' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 
		 This method will be called immediately when the extension/bundle is installed.
		 		 <p>Note: the context may not be fully initialized yet. A bundle should do
		 little more than install additional bundles/extensions. An extension
		 can add lifecycle handlers to the context instance to perform synchronized
		 initialization.</p>
		 		 ]]></description>
<param><![CDATA[context The context that this extension/bundle is being installed into.
		 ]]></param>
</method>
<classRec name='FastPropertyInjector' fullname='robotlegs.bender.extensions.viewProcessorMap.utils:FastPropertyInjector' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/viewProcessorMap/utils/FastPropertyInjector.as' namespace='robotlegs.bender.extensions.viewProcessorMap.utils' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Avoids view reflection by using a provided map
	 of property names to dependency types
	 ]]></description>
</classRec>
<method name='FastPropertyInjector' fullname='robotlegs.bender.extensions.viewProcessorMap.utils:FastPropertyInjector/FastPropertyInjector' isStatic='false' isFinal='false' isOverride='false'  param_names='propertyTypesByName' param_types='Object' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 Creates a Fast Property Injection Processor
		 		 <code>
		     new FastPropertyInjector({
		         userService: IUserService,
		         userPM: UserPM
		     })
		 </code>
		 		 ]]></description>
<param><![CDATA[propertyTypesByName A map of property names to dependency types
		 ]]></param>
</method>
<method name='process' fullname='robotlegs.bender.extensions.viewProcessorMap.utils:FastPropertyInjector/process' isStatic='false' isFinal='false' isOverride='false'  param_names='view;type;injector' param_types='Object;Class;robotlegs.bender.framework.api:IInjector' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='unprocess' fullname='robotlegs.bender.extensions.viewProcessorMap.utils:FastPropertyInjector/unprocess' isStatic='false' isFinal='false' isOverride='false'  param_names='view;type;injector' param_types='Object;Class;robotlegs.bender.framework.api:IInjector' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='_propertyTypesByName' fullname='robotlegs.bender.extensions.viewProcessorMap.utils:FastPropertyInjector/private:_propertyTypesByName' type='Object' isStatic='false' isConst='false' >
</field>
<classRec name='MediatorCreator' fullname='robotlegs.bender.extensions.viewProcessorMap.utils:MediatorCreator' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/viewProcessorMap/utils/MediatorCreator.as' namespace='robotlegs.bender.extensions.viewProcessorMap.utils' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Simple Mediator creation processor
	 ]]></description>
</classRec>
<method name='MediatorCreator' fullname='robotlegs.bender.extensions.viewProcessorMap.utils:MediatorCreator/MediatorCreator' isStatic='false' isFinal='false' isOverride='false'  param_names='mediatorClass' param_types='Class' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 Mediator Creator Processor
		 ]]></description>
<param><![CDATA[mediatorClass The mediator class to create
		 ]]></param>
</method>
<method name='destroyMediator' fullname='robotlegs.bender.extensions.viewProcessorMap.utils:MediatorCreator/private:destroyMediator' isStatic='false' isFinal='false' isOverride='false'  param_names='mediator' param_types='Object' param_defaults='undefined' result_type='void'>
</method>
<method name='initializeMediator' fullname='robotlegs.bender.extensions.viewProcessorMap.utils:MediatorCreator/private:initializeMediator' isStatic='false' isFinal='false' isOverride='false'  param_names='view;mediator' param_types='Object;Object' param_defaults='undefined;undefined' result_type='void'>
</method>
<method name='process' fullname='robotlegs.bender.extensions.viewProcessorMap.utils:MediatorCreator/process' isStatic='false' isFinal='false' isOverride='false'  param_names='view;type;injector' param_types='Object;Class;robotlegs.bender.framework.api:IInjector' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='unprocess' fullname='robotlegs.bender.extensions.viewProcessorMap.utils:MediatorCreator/unprocess' isStatic='false' isFinal='false' isOverride='false'  param_names='view;type;injector' param_types='Object;Class;robotlegs.bender.framework.api:IInjector' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='_createdMediatorsByView' fullname='robotlegs.bender.extensions.viewProcessorMap.utils:MediatorCreator/private:_createdMediatorsByView' type='flash.utils:Dictionary' isStatic='false' isConst='true' defaultValue='unknown' >
</field>
<field name='_mediatorClass' fullname='robotlegs.bender.extensions.viewProcessorMap.utils:MediatorCreator/private:_mediatorClass' type='Class' isStatic='false' isConst='false' >
</field>
<classRec name='PropertyValueInjector' fullname='robotlegs.bender.extensions.viewProcessorMap.utils:PropertyValueInjector' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/viewProcessorMap/utils/PropertyValueInjector.as' namespace='robotlegs.bender.extensions.viewProcessorMap.utils' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Avoids view reflection by using a provided map
	 of property names to dependency values
	 ]]></description>
</classRec>
<method name='PropertyValueInjector' fullname='robotlegs.bender.extensions.viewProcessorMap.utils:PropertyValueInjector/PropertyValueInjector' isStatic='false' isFinal='false' isOverride='false'  param_names='valuesByPropertyName' param_types='Object' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 Creates a Value Property Injection Processor
		 		 <code>
		     new PropertyValueInjector({
		         userService: myUserService,
		         userPM: myUserPM
		     })
		 </code>
		 		 ]]></description>
<param><![CDATA[valuesByPropertyName A map of property names to dependency values
		 ]]></param>
</method>
<method name='process' fullname='robotlegs.bender.extensions.viewProcessorMap.utils:PropertyValueInjector/process' isStatic='false' isFinal='false' isOverride='false'  param_names='view;type;injector' param_types='Object;Class;robotlegs.bender.framework.api:IInjector' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='unprocess' fullname='robotlegs.bender.extensions.viewProcessorMap.utils:PropertyValueInjector/unprocess' isStatic='false' isFinal='false' isOverride='false'  param_names='view;type;injector' param_types='Object;Class;robotlegs.bender.framework.api:IInjector' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='_valuesByPropertyName' fullname='robotlegs.bender.extensions.viewProcessorMap.utils:PropertyValueInjector/private:_valuesByPropertyName' type='Object' isStatic='false' isConst='false' >
</field>
<classRec name='EventCommandTrigger' fullname='robotlegs.bender.extensions.eventCommandMap.impl:EventCommandTrigger' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/eventCommandMap/impl/EventCommandTrigger.as' namespace='robotlegs.bender.extensions.eventCommandMap.impl' access='public' baseclass='Object' interfaces='robotlegs.bender.extensions.commandCenter.api:ICommandTrigger' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 ]]></description>
<private><![CDATA[]]></private>
</classRec>
<method name='EventCommandTrigger' fullname='robotlegs.bender.extensions.eventCommandMap.impl:EventCommandTrigger/EventCommandTrigger' isStatic='false' isFinal='false' isOverride='false'  param_names='injector;dispatcher;type;eventClass;processors;logger' param_types='robotlegs.bender.framework.api:IInjector;flash.events:IEventDispatcher;String;Class;Array;robotlegs.bender.framework.api:ILogger' param_defaults='undefined;undefined;undefined;null;null;null' result_type='*'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='activate' fullname='robotlegs.bender.extensions.eventCommandMap.impl:EventCommandTrigger/activate' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 
		 Invoked when the trigger should be activated.
		 		 <p>Use this to add event listeners or Signal handlers.</p>
		 ]]></description>
</method>
<method name='createMapper' fullname='robotlegs.bender.extensions.eventCommandMap.impl:EventCommandTrigger/createMapper' isStatic='false' isFinal='false' isOverride='false'  result_type='robotlegs.bender.extensions.commandCenter.impl:CommandMapper'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='deactivate' fullname='robotlegs.bender.extensions.eventCommandMap.impl:EventCommandTrigger/deactivate' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 
		 Invoked when the trigger should be deactivated.
		 		 <p>Use this to remove event listeners or Signal handlers.</p>
		 ]]></description>
</method>
<method name='eventHandler' fullname='robotlegs.bender.extensions.eventCommandMap.impl:EventCommandTrigger/private:eventHandler' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='void'>
</method>
<method name='toString' fullname='robotlegs.bender.extensions.eventCommandMap.impl:EventCommandTrigger/toString' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
</method>
<field name='_dispatcher' fullname='robotlegs.bender.extensions.eventCommandMap.impl:EventCommandTrigger/private:_dispatcher' type='flash.events:IEventDispatcher' isStatic='false' isConst='false' >
</field>
<field name='_eventClass' fullname='robotlegs.bender.extensions.eventCommandMap.impl:EventCommandTrigger/private:_eventClass' type='Class' isStatic='false' isConst='false' >
</field>
<field name='_executor' fullname='robotlegs.bender.extensions.eventCommandMap.impl:EventCommandTrigger/private:_executor' type='robotlegs.bender.extensions.commandCenter.api:ICommandExecutor' isStatic='false' isConst='false' >
</field>
<field name='_mappings' fullname='robotlegs.bender.extensions.eventCommandMap.impl:EventCommandTrigger/private:_mappings' type='robotlegs.bender.extensions.commandCenter.api:ICommandMappingList' isStatic='false' isConst='false' >
</field>
<field name='_type' fullname='robotlegs.bender.extensions.eventCommandMap.impl:EventCommandTrigger/private:_type' type='String' isStatic='false' isConst='false' >
</field>
<classRec name='EventCommandMap' fullname='robotlegs.bender.extensions.eventCommandMap.impl:EventCommandMap' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/eventCommandMap/impl/EventCommandMap.as' namespace='robotlegs.bender.extensions.eventCommandMap.impl' access='public' baseclass='Object' interfaces='robotlegs.bender.extensions.eventCommandMap.api:IEventCommandMap' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 ]]></description>
<private><![CDATA[]]></private>
</classRec>
<method name='EventCommandMap' fullname='robotlegs.bender.extensions.eventCommandMap.impl:EventCommandMap/EventCommandMap' isStatic='false' isFinal='false' isOverride='false'  param_names='context;dispatcher' param_types='robotlegs.bender.framework.api:IContext;flash.events:IEventDispatcher' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[
		 ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='addMappingProcessor' fullname='robotlegs.bender.extensions.eventCommandMap.impl:EventCommandMap/addMappingProcessor' isStatic='false' isFinal='false' isOverride='false'  param_names='handler' param_types='Function' param_defaults='undefined' result_type='robotlegs.bender.extensions.eventCommandMap.api:IEventCommandMap'>
<description><![CDATA[
		 
		 Adds a handler to process mappings
		 ]]></description>
<param><![CDATA[handler Function that accepts a mapping
		 ]]></param>
<return><![CDATA[Self
		 ]]></return>
</method>
<method name='createTrigger' fullname='robotlegs.bender.extensions.eventCommandMap.impl:EventCommandMap/private:createTrigger' isStatic='false' isFinal='false' isOverride='false'  param_names='type;eventClass' param_types='String;Class' param_defaults='undefined;undefined' result_type='robotlegs.bender.extensions.eventCommandMap.impl:EventCommandTrigger'>
</method>
<method name='getKey' fullname='robotlegs.bender.extensions.eventCommandMap.impl:EventCommandMap/private:getKey' isStatic='false' isFinal='false' isOverride='false'  param_names='type;eventClass' param_types='String;Class' param_defaults='undefined;undefined' result_type='String'>
</method>
<method name='getTrigger' fullname='robotlegs.bender.extensions.eventCommandMap.impl:EventCommandMap/private:getTrigger' isStatic='false' isFinal='false' isOverride='false'  param_names='type;eventClass' param_types='String;Class' param_defaults='undefined;undefined' result_type='robotlegs.bender.extensions.eventCommandMap.impl:EventCommandTrigger'>
</method>
<method name='map' fullname='robotlegs.bender.extensions.eventCommandMap.impl:EventCommandMap/map' isStatic='false' isFinal='false' isOverride='false'  param_names='type;eventClass' param_types='String;Class' param_defaults='undefined;null' result_type='robotlegs.bender.extensions.commandCenter.dsl:ICommandMapper'>
<description><![CDATA[
		 
		 Creates a mapping for an Event based trigger
		 ]]></description>
<param><![CDATA[type The Event type
		 ]]></param>
<param><![CDATA[eventClass The concrete Event class
		 ]]></param>
<return><![CDATA[Command Mapper
		 ]]></return>
</method>
<method name='unmap' fullname='robotlegs.bender.extensions.eventCommandMap.impl:EventCommandMap/unmap' isStatic='false' isFinal='false' isOverride='false'  param_names='type;eventClass' param_types='String;Class' param_defaults='undefined;null' result_type='robotlegs.bender.extensions.commandCenter.dsl:ICommandUnmapper'>
<description><![CDATA[
		 
		 Unmaps an Event based trigger from a Command
		 ]]></description>
<param><![CDATA[type The Event type
		 ]]></param>
<param><![CDATA[eventClass The concrete Event class
		 ]]></param>
<return><![CDATA[Command Unmapper
		 ]]></return>
</method>
<field name='_dispatcher' fullname='robotlegs.bender.extensions.eventCommandMap.impl:EventCommandMap/private:_dispatcher' type='flash.events:IEventDispatcher' isStatic='false' isConst='false' >
</field>
<field name='_injector' fullname='robotlegs.bender.extensions.eventCommandMap.impl:EventCommandMap/private:_injector' type='robotlegs.bender.framework.api:IInjector' isStatic='false' isConst='false' >
</field>
<field name='_logger' fullname='robotlegs.bender.extensions.eventCommandMap.impl:EventCommandMap/private:_logger' type='robotlegs.bender.framework.api:ILogger' isStatic='false' isConst='false' >
</field>
<field name='_mappingProcessors' fullname='robotlegs.bender.extensions.eventCommandMap.impl:EventCommandMap/private:_mappingProcessors' type='Array' isStatic='false' isConst='true' defaultValue='unknown' >
</field>
<field name='_triggerMap' fullname='robotlegs.bender.extensions.eventCommandMap.impl:EventCommandMap/private:_triggerMap' type='robotlegs.bender.extensions.commandCenter.impl:CommandTriggerMap' isStatic='false' isConst='false' >
</field>
<classRec name='StageObserverExtension' fullname='robotlegs.bender.extensions.viewManager:StageObserverExtension' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/viewManager/StageObserverExtension.as' namespace='robotlegs.bender.extensions.viewManager' access='public' baseclass='Object' interfaces='robotlegs.bender.framework.api:IExtension' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 This extension install an automatic Stage Observer
	 ]]></description>
</classRec>
<method name='extend' fullname='robotlegs.bender.extensions.viewManager:StageObserverExtension/extend' isStatic='false' isFinal='false' isOverride='false'  param_names='context' param_types='robotlegs.bender.framework.api:IContext' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 
		 This method will be called immediately when the extension/bundle is installed.
		 		 <p>Note: the context may not be fully initialized yet. A bundle should do
		 little more than install additional bundles/extensions. An extension
		 can add lifecycle handlers to the context instance to perform synchronized
		 initialization.</p>
		 		 ]]></description>
<param><![CDATA[context The context that this extension/bundle is being installed into.
		 ]]></param>
</method>
<method name='whenDestroying' fullname='robotlegs.bender.extensions.viewManager:StageObserverExtension/private:whenDestroying' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='whenInitializing' fullname='robotlegs.bender.extensions.viewManager:StageObserverExtension/private:whenInitializing' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<field name='_injector' fullname='robotlegs.bender.extensions.viewManager:StageObserverExtension/private:_injector' type='robotlegs.bender.framework.api:IInjector' isStatic='false' isConst='false' >
</field>
<field name='_installCount' fullname='robotlegs.bender.extensions.viewManager:StageObserverExtension/private:_installCount' type='uint' isStatic='true' isConst='false' >
</field>
<field name='_logger' fullname='robotlegs.bender.extensions.viewManager:StageObserverExtension/private:_logger' type='robotlegs.bender.framework.api:ILogger' isStatic='false' isConst='false' >
</field>
<field name='_stageObserver' fullname='robotlegs.bender.extensions.viewManager:StageObserverExtension/private:_stageObserver' type='robotlegs.bender.extensions.viewManager.impl:StageObserver' isStatic='true' isConst='false' >
</field>
<classRec name='ManualStageObserverExtension' fullname='robotlegs.bender.extensions.viewManager:ManualStageObserverExtension' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/viewManager/ManualStageObserverExtension.as' namespace='robotlegs.bender.extensions.viewManager' access='public' baseclass='Object' interfaces='robotlegs.bender.framework.api:IExtension' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 This extension install a manual Stage Observer
	 ]]></description>
</classRec>
<method name='extend' fullname='robotlegs.bender.extensions.viewManager:ManualStageObserverExtension/extend' isStatic='false' isFinal='false' isOverride='false'  param_names='context' param_types='robotlegs.bender.framework.api:IContext' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 
		 This method will be called immediately when the extension/bundle is installed.
		 		 <p>Note: the context may not be fully initialized yet. A bundle should do
		 little more than install additional bundles/extensions. An extension
		 can add lifecycle handlers to the context instance to perform synchronized
		 initialization.</p>
		 		 ]]></description>
<param><![CDATA[context The context that this extension/bundle is being installed into.
		 ]]></param>
</method>
<method name='whenDestroying' fullname='robotlegs.bender.extensions.viewManager:ManualStageObserverExtension/private:whenDestroying' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='whenInitializing' fullname='robotlegs.bender.extensions.viewManager:ManualStageObserverExtension/private:whenInitializing' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<field name='_injector' fullname='robotlegs.bender.extensions.viewManager:ManualStageObserverExtension/private:_injector' type='robotlegs.bender.framework.api:IInjector' isStatic='false' isConst='false' >
</field>
<field name='_installCount' fullname='robotlegs.bender.extensions.viewManager:ManualStageObserverExtension/private:_installCount' type='uint' isStatic='true' isConst='false' >
</field>
<field name='_logger' fullname='robotlegs.bender.extensions.viewManager:ManualStageObserverExtension/private:_logger' type='robotlegs.bender.framework.api:ILogger' isStatic='false' isConst='false' >
</field>
<field name='_manualStageObserver' fullname='robotlegs.bender.extensions.viewManager:ManualStageObserverExtension/private:_manualStageObserver' type='robotlegs.bender.extensions.viewManager.impl:ManualStageObserver' isStatic='true' isConst='false' >
</field>
<classRec name='ViewManagerExtension' fullname='robotlegs.bender.extensions.viewManager:ViewManagerExtension' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/viewManager/ViewManagerExtension.as' namespace='robotlegs.bender.extensions.viewManager' access='public' baseclass='Object' interfaces='robotlegs.bender.framework.api:IExtension' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 This extension install a View Manager into the context
	 ]]></description>
</classRec>
<method name='extend' fullname='robotlegs.bender.extensions.viewManager:ViewManagerExtension/extend' isStatic='false' isFinal='false' isOverride='false'  param_names='context' param_types='robotlegs.bender.framework.api:IContext' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 
		 This method will be called immediately when the extension/bundle is installed.
		 		 <p>Note: the context may not be fully initialized yet. A bundle should do
		 little more than install additional bundles/extensions. An extension
		 can add lifecycle handlers to the context instance to perform synchronized
		 initialization.</p>
		 		 ]]></description>
<param><![CDATA[context The context that this extension/bundle is being installed into.
		 ]]></param>
</method>
<method name='whenDestroying' fullname='robotlegs.bender.extensions.viewManager:ViewManagerExtension/private:whenDestroying' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='whenInitializing' fullname='robotlegs.bender.extensions.viewManager:ViewManagerExtension/private:whenInitializing' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<field name='_containerRegistry' fullname='robotlegs.bender.extensions.viewManager:ViewManagerExtension/private:_containerRegistry' type='robotlegs.bender.extensions.viewManager.impl:ContainerRegistry' isStatic='true' isConst='false' >
</field>
<field name='_injector' fullname='robotlegs.bender.extensions.viewManager:ViewManagerExtension/private:_injector' type='robotlegs.bender.framework.api:IInjector' isStatic='false' isConst='false' >
</field>
<field name='_viewManager' fullname='robotlegs.bender.extensions.viewManager:ViewManagerExtension/private:_viewManager' type='robotlegs.bender.extensions.viewManager.api:IViewManager' isStatic='false' isConst='false' >
</field>
<classRec name='StageCrawlerExtension' fullname='robotlegs.bender.extensions.viewManager:StageCrawlerExtension' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/viewManager/StageCrawlerExtension.as' namespace='robotlegs.bender.extensions.viewManager' access='public' baseclass='Object' interfaces='robotlegs.bender.framework.api:IExtension' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 View Handlers (like the MediatorMap) handle views as they land on stage.
	 	 This extension checks for views that might already be on the stage
	 after context initialization and ensures that those views are handled.
	 ]]></description>
</classRec>
<method name='afterInitializing' fullname='robotlegs.bender.extensions.viewManager:StageCrawlerExtension/private:afterInitializing' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='extend' fullname='robotlegs.bender.extensions.viewManager:StageCrawlerExtension/extend' isStatic='false' isFinal='false' isOverride='false'  param_names='context' param_types='robotlegs.bender.framework.api:IContext' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 
		 This method will be called immediately when the extension/bundle is installed.
		 		 <p>Note: the context may not be fully initialized yet. A bundle should do
		 little more than install additional bundles/extensions. An extension
		 can add lifecycle handlers to the context instance to perform synchronized
		 initialization.</p>
		 		 ]]></description>
<param><![CDATA[context The context that this extension/bundle is being installed into.
		 ]]></param>
</method>
<method name='scanContainer' fullname='robotlegs.bender.extensions.viewManager:StageCrawlerExtension/private:scanContainer' isStatic='false' isFinal='false' isOverride='false'  param_names='container' param_types='flash.display:DisplayObjectContainer' param_defaults='undefined' result_type='void'>
</method>
<method name='scanContextView' fullname='robotlegs.bender.extensions.viewManager:StageCrawlerExtension/private:scanContextView' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='scanViewManagedContainers' fullname='robotlegs.bender.extensions.viewManager:StageCrawlerExtension/private:scanViewManagedContainers' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<field name='_containerRegistry' fullname='robotlegs.bender.extensions.viewManager:StageCrawlerExtension/private:_containerRegistry' type='robotlegs.bender.extensions.viewManager.impl:ContainerRegistry' isStatic='false' isConst='false' >
</field>
<field name='_injector' fullname='robotlegs.bender.extensions.viewManager:StageCrawlerExtension/private:_injector' type='robotlegs.bender.framework.api:IInjector' isStatic='false' isConst='false' >
</field>
<field name='_logger' fullname='robotlegs.bender.extensions.viewManager:StageCrawlerExtension/private:_logger' type='robotlegs.bender.framework.api:ILogger' isStatic='false' isConst='false' >
</field>
<classRec name='ContextViewListenerConfig' fullname='robotlegs.bender.extensions.contextView:ContextViewListenerConfig' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/contextView/ContextViewListenerConfig.as' namespace='robotlegs.bender.extensions.contextView' access='public' baseclass='Object' interfaces='robotlegs.bender.framework.api:IConfig' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 This configuration file adds the ContextView to the viewManager.
	 	 It requires that the ViewManagerExtension, ContextViewExtension
	 and a ContextView have been installed.
	 ]]></description>
</classRec>
<method name='configure' fullname='robotlegs.bender.extensions.contextView:ContextViewListenerConfig/configure' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 
		 Configure will be invoked after dependencies have been supplied
		 ]]></description>
</method>
<field name='contextView' fullname='robotlegs.bender.extensions.contextView:ContextViewListenerConfig/contextView' type='robotlegs.bender.extensions.contextView:ContextView' isStatic='false' isConst='false' >
</field>
<field name='viewManager' fullname='robotlegs.bender.extensions.contextView:ContextViewListenerConfig/viewManager' type='robotlegs.bender.extensions.viewManager.api:IViewManager' isStatic='false' isConst='false' >
</field>
<classRec name='ContextViewExtension' fullname='robotlegs.bender.extensions.contextView:ContextViewExtension' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/contextView/ContextViewExtension.as' namespace='robotlegs.bender.extensions.contextView' access='public' baseclass='Object' interfaces='robotlegs.bender.framework.api:IExtension' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 <p>This Extension waits for a ContextView to be added as a configuration
	 and maps it into the context's injector.</p>
	 	 <p>It should be installed before context initialization.</p>
	 ]]></description>
</classRec>
<method name='beforeInitializing' fullname='robotlegs.bender.extensions.contextView:ContextViewExtension/private:beforeInitializing' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='extend' fullname='robotlegs.bender.extensions.contextView:ContextViewExtension/extend' isStatic='false' isFinal='false' isOverride='false'  param_names='context' param_types='robotlegs.bender.framework.api:IContext' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 
		 This method will be called immediately when the extension/bundle is installed.
		 		 <p>Note: the context may not be fully initialized yet. A bundle should do
		 little more than install additional bundles/extensions. An extension
		 can add lifecycle handlers to the context instance to perform synchronized
		 initialization.</p>
		 		 ]]></description>
<param><![CDATA[context The context that this extension/bundle is being installed into.
		 ]]></param>
</method>
<method name='handleContextView' fullname='robotlegs.bender.extensions.contextView:ContextViewExtension/private:handleContextView' isStatic='false' isFinal='false' isOverride='false'  param_names='contextView' param_types='robotlegs.bender.extensions.contextView:ContextView' param_defaults='undefined' result_type='void'>
</method>
<field name='_injector' fullname='robotlegs.bender.extensions.contextView:ContextViewExtension/private:_injector' type='robotlegs.bender.framework.api:IInjector' isStatic='false' isConst='false' >
</field>
<field name='_logger' fullname='robotlegs.bender.extensions.contextView:ContextViewExtension/private:_logger' type='robotlegs.bender.framework.api:ILogger' isStatic='false' isConst='false' >
</field>
<classRec name='ContextView' fullname='robotlegs.bender.extensions.contextView:ContextView' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/contextView/ContextView.as' namespace='robotlegs.bender.extensions.contextView' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The Context View represents the root DisplayObjectContainer for a Context
	 ]]></description>
</classRec>
<method name='ContextView' fullname='robotlegs.bender.extensions.contextView:ContextView/ContextView' isStatic='false' isFinal='false' isOverride='false'  param_names='view' param_types='flash.display:DisplayObjectContainer' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 The Context View represents the root DisplayObjectContainer for a Context
		 ]]></description>
<param><![CDATA[view The root DisplayObjectContainer for this Context
		 ]]></param>
</method>
<method name='view' fullname='robotlegs.bender.extensions.contextView:ContextView/view/get' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.display:DisplayObjectContainer'>
<description><![CDATA[
		 The root DisplayObjectContainer for this Context
		 ]]></description>
</method>
<field name='_view' fullname='robotlegs.bender.extensions.contextView:ContextView/private:_view' type='flash.display:DisplayObjectContainer' isStatic='false' isConst='false' >
</field>
<classRec name='StageSyncExtension' fullname='robotlegs.bender.extensions.contextView:StageSyncExtension' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/contextView/StageSyncExtension.as' namespace='robotlegs.bender.extensions.contextView' access='public' baseclass='Object' interfaces='robotlegs.bender.framework.api:IExtension' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 <p>This Extension waits for a ContextView to be added as a configuration,
	 and initializes and destroys the context based on the contextView's stage presence.</p>
	 	 <p>It should be installed before context initialization.</p>
	 ]]></description>
</classRec>
<method name='extend' fullname='robotlegs.bender.extensions.contextView:StageSyncExtension/extend' isStatic='false' isFinal='false' isOverride='false'  param_names='context' param_types='robotlegs.bender.framework.api:IContext' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 
		 This method will be called immediately when the extension/bundle is installed.
		 		 <p>Note: the context may not be fully initialized yet. A bundle should do
		 little more than install additional bundles/extensions. An extension
		 can add lifecycle handlers to the context instance to perform synchronized
		 initialization.</p>
		 		 ]]></description>
<param><![CDATA[context The context that this extension/bundle is being installed into.
		 ]]></param>
</method>
<method name='handleContextView' fullname='robotlegs.bender.extensions.contextView:StageSyncExtension/private:handleContextView' isStatic='false' isFinal='false' isOverride='false'  param_names='contextView' param_types='robotlegs.bender.extensions.contextView:ContextView' param_defaults='undefined' result_type='void'>
</method>
<method name='initializeContext' fullname='robotlegs.bender.extensions.contextView:StageSyncExtension/private:initializeContext' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='onAddedToStage' fullname='robotlegs.bender.extensions.contextView:StageSyncExtension/private:onAddedToStage' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='void'>
</method>
<method name='onRemovedFromStage' fullname='robotlegs.bender.extensions.contextView:StageSyncExtension/private:onRemovedFromStage' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='void'>
</method>
<field name='_contextView' fullname='robotlegs.bender.extensions.contextView:StageSyncExtension/private:_contextView' type='flash.display:DisplayObjectContainer' isStatic='false' isConst='false' >
</field>
<field name='_context' fullname='robotlegs.bender.extensions.contextView:StageSyncExtension/private:_context' type='robotlegs.bender.framework.api:IContext' isStatic='false' isConst='false' >
</field>
<field name='_logger' fullname='robotlegs.bender.extensions.contextView:StageSyncExtension/private:_logger' type='robotlegs.bender.framework.api:ILogger' isStatic='false' isConst='false' >
</field>
<classRec name='MediatorMapExtension' fullname='robotlegs.bender.extensions.mediatorMap:MediatorMapExtension' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/mediatorMap/MediatorMapExtension.as' namespace='robotlegs.bender.extensions.mediatorMap' access='public' baseclass='Object' interfaces='robotlegs.bender.framework.api:IExtension' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 This extension installs a shared IMediatorMap into the context
	 ]]></description>
</classRec>
<method name='beforeDestroying' fullname='robotlegs.bender.extensions.mediatorMap:MediatorMapExtension/private:beforeDestroying' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='beforeInitializing' fullname='robotlegs.bender.extensions.mediatorMap:MediatorMapExtension/private:beforeInitializing' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='extend' fullname='robotlegs.bender.extensions.mediatorMap:MediatorMapExtension/extend' isStatic='false' isFinal='false' isOverride='false'  param_names='context' param_types='robotlegs.bender.framework.api:IContext' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 
		 This method will be called immediately when the extension/bundle is installed.
		 		 <p>Note: the context may not be fully initialized yet. A bundle should do
		 little more than install additional bundles/extensions. An extension
		 can add lifecycle handlers to the context instance to perform synchronized
		 initialization.</p>
		 		 ]]></description>
<param><![CDATA[context The context that this extension/bundle is being installed into.
		 ]]></param>
</method>
<method name='whenDestroying' fullname='robotlegs.bender.extensions.mediatorMap:MediatorMapExtension/private:whenDestroying' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<field name='_injector' fullname='robotlegs.bender.extensions.mediatorMap:MediatorMapExtension/private:_injector' type='robotlegs.bender.framework.api:IInjector' isStatic='false' isConst='false' >
</field>
<field name='_mediatorMap' fullname='robotlegs.bender.extensions.mediatorMap:MediatorMapExtension/private:_mediatorMap' type='robotlegs.bender.extensions.mediatorMap.impl:MediatorMap' isStatic='false' isConst='false' >
</field>
<field name='_viewManager' fullname='robotlegs.bender.extensions.mediatorMap:MediatorMapExtension/private:_viewManager' type='robotlegs.bender.extensions.viewManager.api:IViewManager' isStatic='false' isConst='false' >
</field>
<classRec name='ViewProcessorMapExtension' fullname='robotlegs.bender.extensions.viewProcessorMap:ViewProcessorMapExtension' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/viewProcessorMap/ViewProcessorMapExtension.as' namespace='robotlegs.bender.extensions.viewProcessorMap' access='public' baseclass='Object' interfaces='robotlegs.bender.framework.api:IExtension' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 This extension install a View Processor Map into a context
	 ]]></description>
</classRec>
<method name='beforeDestroying' fullname='robotlegs.bender.extensions.viewProcessorMap:ViewProcessorMapExtension/private:beforeDestroying' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='beforeInitializing' fullname='robotlegs.bender.extensions.viewProcessorMap:ViewProcessorMapExtension/private:beforeInitializing' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='extend' fullname='robotlegs.bender.extensions.viewProcessorMap:ViewProcessorMapExtension/extend' isStatic='false' isFinal='false' isOverride='false'  param_names='context' param_types='robotlegs.bender.framework.api:IContext' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 
		 This method will be called immediately when the extension/bundle is installed.
		 		 <p>Note: the context may not be fully initialized yet. A bundle should do
		 little more than install additional bundles/extensions. An extension
		 can add lifecycle handlers to the context instance to perform synchronized
		 initialization.</p>
		 		 ]]></description>
<param><![CDATA[context The context that this extension/bundle is being installed into.
		 ]]></param>
</method>
<method name='whenDestroying' fullname='robotlegs.bender.extensions.viewProcessorMap:ViewProcessorMapExtension/private:whenDestroying' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<field name='_injector' fullname='robotlegs.bender.extensions.viewProcessorMap:ViewProcessorMapExtension/private:_injector' type='robotlegs.bender.framework.api:IInjector' isStatic='false' isConst='false' >
</field>
<field name='_viewManager' fullname='robotlegs.bender.extensions.viewProcessorMap:ViewProcessorMapExtension/private:_viewManager' type='robotlegs.bender.extensions.viewManager.api:IViewManager' isStatic='false' isConst='false' >
</field>
<field name='_viewProcessorFactory' fullname='robotlegs.bender.extensions.viewProcessorMap:ViewProcessorMapExtension/private:_viewProcessorFactory' type='robotlegs.bender.extensions.viewProcessorMap.impl:IViewProcessorFactory' isStatic='false' isConst='false' >
</field>
<field name='_viewProcessorMap' fullname='robotlegs.bender.extensions.viewProcessorMap:ViewProcessorMapExtension/private:_viewProcessorMap' type='robotlegs.bender.extensions.viewProcessorMap.api:IViewProcessorMap' isStatic='false' isConst='false' >
</field>
<interfaceRec name='IViewHandler' fullname='robotlegs.bender.extensions.viewManager.api:IViewHandler' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/viewManager/api/IViewHandler.as' namespace='robotlegs.bender.extensions.viewManager.api' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 View handler contract
	 ]]></description>
</interfaceRec>
<method name='handleView' fullname='robotlegs.bender.extensions.viewManager.api:IViewHandler/robotlegs.bender.extensions.viewManager.api:IViewHandler:handleView' isStatic='false' isFinal='false' isOverride='false'  param_names='view;type' param_types='flash.display:DisplayObject;Class' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 View handler method
		 ]]></description>
<param><![CDATA[view The view instance to handle
		 ]]></param>
<param><![CDATA[type The class of the view instance
		 ]]></param>
</method>
<interfaceRec name='IViewManager' fullname='robotlegs.bender.extensions.viewManager.api:IViewManager' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/viewManager/api/IViewManager.as' namespace='robotlegs.bender.extensions.viewManager.api' access='public' baseClasses='flash.events:IEventDispatcher' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The View Manager allows you to add multiple "view root" containers to a context
	 ]]></description>
<metadata>
	<Event owner='robotlegs.bender.extensions.viewManager.api:IViewManager' name='handlerRemove' type='robotlegs.bender.extensions.viewManager.impl.ViewManagerEvent' >
	</Event>
</metadata>
<metadata>
	<Event owner='robotlegs.bender.extensions.viewManager.api:IViewManager' name='handlerAdd' type='robotlegs.bender.extensions.viewManager.impl.ViewManagerEvent' >
	</Event>
</metadata>
<metadata>
	<Event owner='robotlegs.bender.extensions.viewManager.api:IViewManager' name='containerRemove' type='robotlegs.bender.extensions.viewManager.impl.ViewManagerEvent' >
	</Event>
</metadata>
<metadata>
	<Event owner='robotlegs.bender.extensions.viewManager.api:IViewManager' name='containerAdd' type='robotlegs.bender.extensions.viewManager.impl.ViewManagerEvent' >
	</Event>
</metadata>
</interfaceRec>
<method name='addContainer' fullname='robotlegs.bender.extensions.viewManager.api:IViewManager/robotlegs.bender.extensions.viewManager.api:IViewManager:addContainer' isStatic='false' isFinal='false' isOverride='false'  param_names='container' param_types='flash.display:DisplayObjectContainer' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Adds a container as a "view root" into the context
		 ]]></description>
<param><![CDATA[container
		 ]]></param>
</method>
<method name='addViewHandler' fullname='robotlegs.bender.extensions.viewManager.api:IViewManager/robotlegs.bender.extensions.viewManager.api:IViewManager:addViewHandler' isStatic='false' isFinal='false' isOverride='false'  param_names='handler' param_types='robotlegs.bender.extensions.viewManager.api:IViewHandler' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Registers a view handler
		 ]]></description>
<param><![CDATA[handler
		 ]]></param>
</method>
<method name='removeAllHandlers' fullname='robotlegs.bender.extensions.viewManager.api:IViewManager/robotlegs.bender.extensions.viewManager.api:IViewManager:removeAllHandlers' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 Removes all view handlers from this context
		 ]]></description>
</method>
<method name='removeContainer' fullname='robotlegs.bender.extensions.viewManager.api:IViewManager/robotlegs.bender.extensions.viewManager.api:IViewManager:removeContainer' isStatic='false' isFinal='false' isOverride='false'  param_names='container' param_types='flash.display:DisplayObjectContainer' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Removes a container from this context
		 ]]></description>
<param><![CDATA[container
		 ]]></param>
</method>
<method name='removeViewHandler' fullname='robotlegs.bender.extensions.viewManager.api:IViewManager/robotlegs.bender.extensions.viewManager.api:IViewManager:removeViewHandler' isStatic='false' isFinal='false' isOverride='false'  param_names='handler' param_types='robotlegs.bender.extensions.viewManager.api:IViewHandler' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Removes a view handler
		 ]]></description>
<param><![CDATA[handler
		 ]]></param>
</method>
<method name='containers' fullname='robotlegs.bender.extensions.viewManager.api:IViewManager/robotlegs.bender.extensions.viewManager.api:IViewManager:containers/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Vector$flash.display:DisplayObjectContainer'>
<description><![CDATA[
		 A list of currently registered container
		 ]]></description>
</method>
<classRec name='ModularityExtension' fullname='robotlegs.bender.extensions.modularity:ModularityExtension' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/extensions/modularity/ModularityExtension.as' namespace='robotlegs.bender.extensions.modularity' access='public' baseclass='Object' interfaces='robotlegs.bender.framework.api:IExtension' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 This extension allows a context to inherit dependencies from a parent context,
	 and/or expose its dependencies to child contexts.
	 	 <p>It must be installed before context initialization.</p>
	 ]]></description>
</classRec>
<method name='ModularityExtension' fullname='robotlegs.bender.extensions.modularity:ModularityExtension/ModularityExtension' isStatic='false' isFinal='false' isOverride='false'  param_names='inherit;expose' param_types='Boolean;Boolean' param_defaults='true;true' result_type='*'>
<description><![CDATA[
		 Modularity
		 		 ]]></description>
<param><![CDATA[inherit Should this context inherit dependencies from a parent context?
		 ]]></param>
<param><![CDATA[expose Should this context expose its dependencies to child contexts?
		 ]]></param>
</method>
<method name='beforeInitializing' fullname='robotlegs.bender.extensions.modularity:ModularityExtension/private:beforeInitializing' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='broadcastContextExistence' fullname='robotlegs.bender.extensions.modularity:ModularityExtension/private:broadcastContextExistence' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='configureExistenceBroadcaster' fullname='robotlegs.bender.extensions.modularity:ModularityExtension/private:configureExistenceBroadcaster' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='configureExistenceWatcher' fullname='robotlegs.bender.extensions.modularity:ModularityExtension/private:configureExistenceWatcher' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='extend' fullname='robotlegs.bender.extensions.modularity:ModularityExtension/extend' isStatic='false' isFinal='false' isOverride='false'  param_names='context' param_types='robotlegs.bender.framework.api:IContext' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 
		 This method will be called immediately when the extension/bundle is installed.
		 		 <p>Note: the context may not be fully initialized yet. A bundle should do
		 little more than install additional bundles/extensions. An extension
		 can add lifecycle handlers to the context instance to perform synchronized
		 initialization.</p>
		 		 ]]></description>
<param><![CDATA[context The context that this extension/bundle is being installed into.
		 ]]></param>
</method>
<method name='handleContextView' fullname='robotlegs.bender.extensions.modularity:ModularityExtension/private:handleContextView' isStatic='false' isFinal='false' isOverride='false'  param_names='contextView' param_types='robotlegs.bender.extensions.contextView:ContextView' param_defaults='undefined' result_type='void'>
</method>
<method name='onAddedToStage' fullname='robotlegs.bender.extensions.modularity:ModularityExtension/private:onAddedToStage' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='void'>
</method>
<field name='_contextView' fullname='robotlegs.bender.extensions.modularity:ModularityExtension/private:_contextView' type='flash.display:DisplayObjectContainer' isStatic='false' isConst='false' >
</field>
<field name='_context' fullname='robotlegs.bender.extensions.modularity:ModularityExtension/private:_context' type='robotlegs.bender.framework.api:IContext' isStatic='false' isConst='false' >
</field>
<field name='_expose' fullname='robotlegs.bender.extensions.modularity:ModularityExtension/private:_expose' type='Boolean' isStatic='false' isConst='false' >
</field>
<field name='_inherit' fullname='robotlegs.bender.extensions.modularity:ModularityExtension/private:_inherit' type='Boolean' isStatic='false' isConst='false' >
</field>
<field name='_injector' fullname='robotlegs.bender.extensions.modularity:ModularityExtension/private:_injector' type='robotlegs.bender.framework.api:IInjector' isStatic='false' isConst='false' >
</field>
<field name='_logger' fullname='robotlegs.bender.extensions.modularity:ModularityExtension/private:_logger' type='robotlegs.bender.framework.api:ILogger' isStatic='false' isConst='false' >
</field>
<classRec name='ContextBuilderTag' fullname='robotlegs.bender.mxml:ContextBuilderTag' sourcefile='/Development/Projects/Robotlegs/robotlegs-framework/src/robotlegs/bender/mxml/ContextBuilderTag.as' namespace='robotlegs.bender.mxml' access='public' baseclass='Object' interfaces='mx.core:IMXMLObject' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 Apache Flex context builder tag
	 ]]></description>
<metadata>
	<DefaultProperty owner='robotlegs.bender.mxml:ContextBuilderTag' name='configs' >
	</DefaultProperty>
</metadata>
</classRec>
<method name='configureBuilder' fullname='robotlegs.bender.mxml:ContextBuilderTag/private:configureBuilder' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='initialized' fullname='robotlegs.bender.mxml:ContextBuilderTag/initialized' isStatic='false' isFinal='false' isOverride='false'  param_names='document;id' param_types='Object;String' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 ]]></description>
<inheritDoc><![CDATA[]]></inheritDoc>
</method>
<method name='isExtension' fullname='robotlegs.bender.mxml:ContextBuilderTag/private:isExtension' isStatic='false' isFinal='false' isOverride='false'  param_names='object' param_types='Object' param_defaults='undefined' result_type='Boolean'>
</method>
<method name='configs' fullname='robotlegs.bender.mxml:ContextBuilderTag/configs/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
		 Configs, extensions or bundles
		 ]]></description>
</method>
<method name='context' fullname='robotlegs.bender.mxml:ContextBuilderTag/context/get' isStatic='false' isFinal='false' isOverride='false'  result_type='robotlegs.bender.framework.api:IContext'>
<description><![CDATA[
		 The context associated with this builder
		 ]]></description>
</method>
<method name='configs' fullname='robotlegs.bender.mxml:ContextBuilderTag/configs/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='Array' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Configs, extensions or bundles
		 ]]></description>
</method>
<method name='contextView' fullname='robotlegs.bender.mxml:ContextBuilderTag/contextView/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='flash.display:DisplayObjectContainer' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 The context view
		 ]]></description>
<param><![CDATA[value
		 ]]></param>
</method>
<field name='_configs' fullname='robotlegs.bender.mxml:ContextBuilderTag/private:_configs' type='Array' isStatic='false' isConst='false' defaultValue='unknown' >
</field>
<field name='_contextView' fullname='robotlegs.bender.mxml:ContextBuilderTag/private:_contextView' type='flash.display:DisplayObjectContainer' isStatic='false' isConst='false' >
</field>
<field name='_context' fullname='robotlegs.bender.mxml:ContextBuilderTag/private:_context' type='robotlegs.bender.framework.api:IContext' isStatic='false' isConst='true' defaultValue='unknown' >
</field>
<field name='_reflector' fullname='robotlegs.bender.mxml:ContextBuilderTag/private:_reflector' type='org.swiftsuspenders.reflection:Reflector' isStatic='false' isConst='true' defaultValue='unknown' >
</field>
</asdoc>
